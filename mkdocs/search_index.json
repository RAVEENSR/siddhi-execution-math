{
    "docs": [
        {
            "location": "/", 
            "text": "siddhi-execution-math\n\n\nThe \nsiddhi-execution-math extension\n is an extension to \nSiddhi\n that contains useful mathematical functions to make your siddhi queries more flexible.\n\n\nFind some useful links below:\n\n\n\n\nSource code\n\n\nReleases\n\n\nIssue tracker\n\n\n\n\nLatest API Docs\n\n\nLatest API Docs is \n4.0.12\n.\n\n\nHow to use\n\n\nUsing the extension in \nWSO2 Stream Processor\n\n\n\n\n\n\nYou can use this extension in the latest \nWSO2 Stream Processor\n that is a part of \nWSO2 Analytics\n offering, with editor, debugger and simulation support. \n\n\n\n\n\n\nThis extension is shipped by default with WSO2 Stream Processor, if you wish to use an alternative version of this extension you can replace the component \njar\n that can be found in the \nSTREAM_PROCESSOR_HOME\n/lib\n directory.\n\n\n\n\n\n\nUsing the extension as a \njava library\n\n\n\n\nThis extension can be added as a maven dependency along with other Siddhi dependencies to your project.\n\n\n\n\n     \ndependency\n\n        \ngroupId\norg.wso2.extension.siddhi.execution.math\n/groupId\n\n        \nartifactId\nsiddhi-execution-math\n/artifactId\n\n        \nversion\nx.x.x\n/version\n\n     \n/dependency\n\n\n\n\n\nJenkins Build Status\n\n\n\n\n\n\n\n\n\n\nBranch\n\n\nBuild Status\n\n\n\n\n\n\n\n\n\n\nmaster\n\n\n\n\n\n\n\n\n\n\n\n\nFeatures\n\n\n\n\npercentile\n \n(\n(Aggregate Function)\n)\nReturns the pth percentile value of the arg values.\n\n\nabs\n \n(\n(Function)\n)\nReturns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function.\n\n\nacos\n \n(\n(Function)\n)\nIf -1 \n= p1 \n= 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function.\n\n\nasin\n \n(\n(Function)\n)\nIf -1 \n= p1 \n= 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function.\n\n\natan\n \n(\n(Function)\n)\n1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function.\n2. Returns the arc-tangent (inverse tangent) of  p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function.\n\n\nbin\n \n(\n(Function)\n)\nReturns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods.\n\n\ncbrt\n \n(\n(Function)\n)\nReturns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function.\n\n\nceil\n \n(\n(Function)\n)\nReturns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method.\n\n\nconv\n \n(\n(Function)\n)\nConverts a from the fromBase base to the toBase base.\n\n\ncopySign\n \n(\n(Function)\n)\nReturns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function.\n\n\ncos\n \n(\n(Function)\n)\nReturns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function.\n\n\ncosh\n \n(\n(Function)\n)\nReturns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function.\n\n\ne\n \n(\n(Function)\n)\nReturns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms).\n\n\nexp\n \n(\n(Function)\n)\nReturns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function.\n\n\nfloor\n \n(\n(Function)\n)\nThis function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer.\n\n\ngetExponent\n \n(\n(Function)\n)\nReturns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function.\n\n\nhex\n \n(\n(Function)\n)\nThis function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1.\n\n\nisInfinite\n \n(\n(Function)\n)\nThis function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise.\n\n\nisNan\n \n(\n(Function)\n)\nThis function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise.\n\n\nln\n \n(\n(Function)\n)\nReturns the natural logarithm (base e) of p1.\n\n\nlog\n \n(\n(Function)\n)\nReturns the logarithm (base=base) of number.\n\n\nlog10\n \n(\n(Function)\n)\nReturns the base 10 logarithm of p1.\n\n\nlog2\n \n(\n(Function)\n)\nReturns the base 2 logarithm of p1.\n\n\nmax\n \n(\n(Function)\n)\nReturns the greater value out of p1 and p2.\n\n\nmin\n \n(\n(Function)\n)\nReturns the smaller value out of p1 and p2.\n\n\noct\n \n(\n(Function)\n)\nConverts p1 to octal.\n\n\nparseDouble\n \n(\n(Function)\n)\nReturns str as a double.\n\n\nparseFloat\n \n(\n(Function)\n)\nReturns str as a float.\n\n\nparseInt\n \n(\n(Function)\n)\nReturns str as a int.\n\n\nparseLong\n \n(\n(Function)\n)\nReturns str as a long.\n\n\npi\n \n(\n(Function)\n)\nReturns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter). \n\n\npower\n \n(\n(Function)\n)\nReturns value raised to the power of toPower.\n\n\nrand\n \n(\n(Function)\n)\n1.  A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally.\n2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. \n\n\nround\n \n(\n(Function)\n)\nReturns the closest integer/long (depending on the input) value to the argument.\n\n\nsignum\n \n(\n(Function)\n)\nIf a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function.\n\n\nsin\n \n(\n(Function)\n)\nReturns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function.\n\n\nsinh\n \n(\n(Function)\n)\nReturns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function. \n\n\nsqrt\n \n(\n(Function)\n)\nReturns the square-root of p1. This function wraps the java.lang.Math.sqrt() function.\n\n\ntan\n \n(\n(Function)\n)\nReturns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function.\n\n\ntanh\n \n(\n(Function)\n)\nReturns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function.\n\n\ntoDegrees\n \n(\n(Function)\n)\nConverts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function.\n\n\ntoRadians\n \n(\n(Function)\n)\nConverts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function.\n\n\n\n\nHow to Contribute\n\n\n\n\n\n\nPlease report issues at \nGitHub Issue Tracker\n.\n\n\n\n\n\n\nSend your contributions as pull requests to \nmaster branch\n. \n\n\n\n\n\n\nContact us\n\n\n\n\n\n\nPost your questions with the \n\"Siddhi\"\n tag in \nStackoverflow\n. \n\n\n\n\n\n\nSiddhi developers can be contacted via the mailing lists:\n\n\nDevelopers List   : \ndev@wso2.org\n\n\nArchitecture List : \narchitecture@wso2.org\n\n\n\n\n\n\nSupport\n\n\n\n\n\n\nWe are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology. \n\n\n\n\n\n\nFor more details and to take advantage of this unique opportunity contact us via \nhttp://wso2.com/support/\n.", 
            "title": "Welcome to WSO2 Siddhi Execution Math"
        }, 
        {
            "location": "/#siddhi-execution-math", 
            "text": "The  siddhi-execution-math extension  is an extension to  Siddhi  that contains useful mathematical functions to make your siddhi queries more flexible.  Find some useful links below:   Source code  Releases  Issue tracker", 
            "title": "siddhi-execution-math"
        }, 
        {
            "location": "/#latest-api-docs", 
            "text": "Latest API Docs is  4.0.12 .", 
            "title": "Latest API Docs"
        }, 
        {
            "location": "/#how-to-use", 
            "text": "Using the extension in  WSO2 Stream Processor    You can use this extension in the latest  WSO2 Stream Processor  that is a part of  WSO2 Analytics  offering, with editor, debugger and simulation support.     This extension is shipped by default with WSO2 Stream Processor, if you wish to use an alternative version of this extension you can replace the component  jar  that can be found in the  STREAM_PROCESSOR_HOME /lib  directory.    Using the extension as a  java library   This extension can be added as a maven dependency along with other Siddhi dependencies to your project.         dependency \n         groupId org.wso2.extension.siddhi.execution.math /groupId \n         artifactId siddhi-execution-math /artifactId \n         version x.x.x /version \n      /dependency", 
            "title": "How to use"
        }, 
        {
            "location": "/#jenkins-build-status", 
            "text": "Branch  Build Status      master", 
            "title": "Jenkins Build Status"
        }, 
        {
            "location": "/#features", 
            "text": "percentile   ( (Aggregate Function) ) Returns the pth percentile value of the arg values.  abs   ( (Function) ) Returns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function.  acos   ( (Function) ) If -1  = p1  = 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function.  asin   ( (Function) ) If -1  = p1  = 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function.  atan   ( (Function) ) 1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function. 2. Returns the arc-tangent (inverse tangent) of  p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function.  bin   ( (Function) ) Returns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods.  cbrt   ( (Function) ) Returns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function.  ceil   ( (Function) ) Returns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method.  conv   ( (Function) ) Converts a from the fromBase base to the toBase base.  copySign   ( (Function) ) Returns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function.  cos   ( (Function) ) Returns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function.  cosh   ( (Function) ) Returns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function.  e   ( (Function) ) Returns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms).  exp   ( (Function) ) Returns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function.  floor   ( (Function) ) This function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer.  getExponent   ( (Function) ) Returns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function.  hex   ( (Function) ) This function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1.  isInfinite   ( (Function) ) This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise.  isNan   ( (Function) ) This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise.  ln   ( (Function) ) Returns the natural logarithm (base e) of p1.  log   ( (Function) ) Returns the logarithm (base=base) of number.  log10   ( (Function) ) Returns the base 10 logarithm of p1.  log2   ( (Function) ) Returns the base 2 logarithm of p1.  max   ( (Function) ) Returns the greater value out of p1 and p2.  min   ( (Function) ) Returns the smaller value out of p1 and p2.  oct   ( (Function) ) Converts p1 to octal.  parseDouble   ( (Function) ) Returns str as a double.  parseFloat   ( (Function) ) Returns str as a float.  parseInt   ( (Function) ) Returns str as a int.  parseLong   ( (Function) ) Returns str as a long.  pi   ( (Function) ) Returns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter).   power   ( (Function) ) Returns value raised to the power of toPower.  rand   ( (Function) ) 1.  A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. 2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally.   round   ( (Function) ) Returns the closest integer/long (depending on the input) value to the argument.  signum   ( (Function) ) If a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function.  sin   ( (Function) ) Returns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function.  sinh   ( (Function) ) Returns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function.   sqrt   ( (Function) ) Returns the square-root of p1. This function wraps the java.lang.Math.sqrt() function.  tan   ( (Function) ) Returns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function.  tanh   ( (Function) ) Returns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function.  toDegrees   ( (Function) ) Converts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function.  toRadians   ( (Function) ) Converts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function.", 
            "title": "Features"
        }, 
        {
            "location": "/#how-to-contribute", 
            "text": "Please report issues at  GitHub Issue Tracker .    Send your contributions as pull requests to  master branch .", 
            "title": "How to Contribute"
        }, 
        {
            "location": "/#contact-us", 
            "text": "Post your questions with the  \"Siddhi\"  tag in  Stackoverflow .     Siddhi developers can be contacted via the mailing lists:  Developers List   :  dev@wso2.org  Architecture List :  architecture@wso2.org", 
            "title": "Contact us"
        }, 
        {
            "location": "/#support", 
            "text": "We are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology.     For more details and to take advantage of this unique opportunity contact us via  http://wso2.com/support/ .", 
            "title": "Support"
        }, 
        {
            "location": "/api/4.0.12/", 
            "text": "API Docs - v4.0.12\n\n\nMath\n\n\npercentile \n(Aggregate Function)\n\n\nReturns the pth percentile value of the arg values.\n\n\n\nSyntax\n\n\nDOUBLE\n math:percentile(\nINT|LONG|FLOAT|DOUBLE\n arg, \nDOUBLE\n p)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe values of which the percentile should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np\n\n        \nEstimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;\n\n\n\n\nmath:percentile(temperature, 97.0)\n\n\n\nabs \n(Function)\n\n\nReturns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:abs(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the absolute value should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;\n\n\n\n\nBoth abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.\n\n\n\nacos \n(Function)\n\n\nIf -1 \n= p1 \n= 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:acos(\nFLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-cosine (inverse cosine) should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;\n\n\n\n\nacos(0.5) returns 1.0471975511965979.\n\n\n\nasin \n(Function)\n\n\nIf -1 \n= p1 \n= 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:asin(\nFLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-sin (inverse sine) should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;\n\n\n\n\nasin(0.5) returns 0.5235987755982989.\n\n\n\natan \n(Function)\n\n\n1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function.\n2. Returns the arc-tangent (inverse tangent) of  p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:atan(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np1\n\n        \nThis optional parameter represents the y coordinate of the (x,y) coordinate pair\n\n        \n0D\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\natan(12d, 5d) returns 1.1760052070951352.\n\n\n\nbin \n(Function)\n\n\nReturns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods.\n\n\n\nSyntax\n\n\nSTRING\n math:bin(\nINT|LONG\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to an unsigned integer of base 2\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;\n\n\n\n\nbin(9) returns \"1001\".\n\n\n\ncbrt \n(Function)\n\n\nReturns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cbrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose cube-root should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;\n\n\n\n\ncbrt(17d) returns 2.5712815906582356.\n\n\n\nceil \n(Function)\n\n\nReturns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ceil(\nFLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose ceiling value should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;\n\n\n\n\nceil(423.187d) returns 424.0.\n\n\n\nconv \n(Function)\n\n\nConverts a from the fromBase base to the toBase base.\n\n\n\nSyntax\n\n\nSTRING\n math:conv(\nSTRING\n a, \nINT\n from.base, \nINT\n to.base)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \na\n\n        \nThe value whose base should be changed. Input should be as a String\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfrom.base\n\n        \nThe source base of the input parameter 'a'\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.base\n\n        \nThe target base that input parameter 'a' should be converted to\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\nconv(\"7f\", 16, 10) returns \"127\".\n\n\n\ncopySign \n(Function)\n\n\nReturns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:copySign(\nINT|LONG|FLOAT|DOUBLE\n magnitude, \nINT|LONG|FLOAT|DOUBLE\n sign)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmagnitude\n\n        \nThis parameters magnitude will be used for output attribute\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsign\n\n        \nThis parameters sign will be used for output attribute\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;\n\n\n\n\ncopySign(5.6d, -3.0d) returns -5.6.\n\n\n\ncos \n(Function)\n\n\nReturns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cos(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose cosine value should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\ncos(6d) returns 0.9601702866503661.\n\n\n\ncosh \n(Function)\n\n\nReturns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cosh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic cosine should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\ncosh (6d) returns 201.7156361224559.\n\n\n\ne \n(Function)\n\n\nReturns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms).\n\n\n\nSyntax\n\n\nDOUBLE\n math:e()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;\n\n\n\n\ne() returns 2.7182818284590452354.\n\n\n\nexp \n(Function)\n\n\nReturns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:exp(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe power that the Euler's number e should be raised to\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\nexp(10.23) returns 27722.51006805505.\n\n\n\nfloor \n(Function)\n\n\nThis function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer.\n\n\n\nSyntax\n\n\nDOUBLE\n math:floor(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose floor value should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;\n\n\n\n\nfloor(10.23) returns 10.0.\n\n\n\ngetExponent \n(Function)\n\n\nReturns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function.\n\n\n\nSyntax\n\n\nINT\n math:getExponent(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose unbiased exponent representation should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\ngetExponent(60984.1) returns 15.\n\n\n\nhex \n(Function)\n\n\nThis function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1.\n\n\n\nSyntax\n\n\nSTRING\n math:hex(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hexadecimal representation should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;\n\n\n\n\nhex(200) returns \"c8\".\n\n\n\nisInfinite \n(Function)\n\n\nThis function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isInfinite(\nFLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if infinite\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;\n\n\n\n\nisInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.\n\n\n\nisNan \n(Function)\n\n\nThis function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isNan(\nFLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if it is a number\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;\n\n\n\n\nisNan(java.lang.Math.log(-12d)) returns true.\n\n\n\nln \n(Function)\n\n\nReturns the natural logarithm (base e) of p1.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ln(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose natural logarithm (base e) should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\nln(11.453) returns 2.438251704415579.\n\n\n\nlog \n(Function)\n\n\nReturns the logarithm (base=base) of number.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log(\nINT|LONG|FLOAT|DOUBLE\n number, \nINT|LONG|FLOAT|DOUBLE\n base)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nnumber\n\n        \nThe value of whose base should be changed\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbase\n\n        \nThe base value of the ouput\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;\n\n\n\n\nlog(34, 2f) returns 5.08746284125034.\n\n\n\nlog10 \n(Function)\n\n\nReturns the base 10 logarithm of p1.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log10(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose base 10 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\nlog10(19.234) returns 1.2840696117100832.\n\n\n\nlog2 \n(Function)\n\n\nReturns the base 2 logarithm of p1.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log2(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose base 2 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\nlog2(91d) returns 6.507794640198696.\n\n\n\nmax \n(Function)\n\n\nReturns the greater value out of p1 and p2.\n\n\n\nSyntax\n\n\nDOUBLE\n math:max(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nValue one to be compared in finding largest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nValue two to be compared in finding largest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;\n\n\n\n\nmax(123.67d, 91) returns 123.67.\n\n\n\nmin \n(Function)\n\n\nReturns the smaller value out of p1 and p2.\n\n\n\nSyntax\n\n\nDOUBLE\n math:min(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nValue one to be compared in finding smallest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nValue two to be compared in finding smallest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;\n\n\n\n\nmin(123.67d, 91) returns 91.\n\n\n\noct \n(Function)\n\n\nConverts p1 to octal.\n\n\n\nSyntax\n\n\nSTRING\n math:oct(\nINT|LONG\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose octal representation should be found.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\noct(99l) returns \"143\".\n\n\n\nparseDouble \n(Function)\n\n\nReturns str as a double.\n\n\n\nSyntax\n\n\nDOUBLE\n math:parseDouble(\nSTRING\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a double\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\nparseDouble(\"123\") returns 123.0.\n\n\n\nparseFloat \n(Function)\n\n\nReturns str as a float.\n\n\n\nSyntax\n\n\nFLOAT\n math:parseFloat(\nSTRING\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a float\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\nparseFloat(\"123\") returns 123.0.\n\n\n\nparseInt \n(Function)\n\n\nReturns str as a int.\n\n\n\nSyntax\n\n\nINT\n math:parseInt(\nSTRING\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a int\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\nparseInt(\"123\") returns 123.\n\n\n\nparseLong \n(Function)\n\n\nReturns str as a long.\n\n\n\nSyntax\n\n\nLONG\n math:parseLong(\nSTRING\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a long\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\nparseLong(\"123\") returns 123.\n\n\n\npi \n(Function)\n\n\nReturns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter). \n\n\n\nSyntax\n\n\nDOUBLE\n math:pi()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;\n\n\n\n\npi() always returns 3.141592653589793.\n\n\n\npower \n(Function)\n\n\nReturns value raised to the power of toPower.\n\n\n\nSyntax\n\n\nDOUBLE\n math:power(\nINT|LONG|FLOAT|DOUBLE\n value, \nINT|LONG|FLOAT|DOUBLE\n to.power)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value that should be raised to the power of 'to.power' input parameter\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.power\n\n        \nThe power that 'value' input parameter should be raised to\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;\n\n\n\n\npower(5.6d, 3.0d) returns 175.61599999999996.\n\n\n\nrand \n(Function)\n\n\n1.  A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally.\n2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. \n\n\n\nSyntax\n\n\nDOUBLE\n math:rand(\nINT|LONG\n seed)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nseed\n\n        \nAn optional seed value that will be used to generate the random number sequence\n\n        \ndefaultSeed\n\n        \nINT\nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\nA random double value between 0 and 1 will be generated using math:rand()\n\n\n\nround \n(Function)\n\n\nReturns the closest integer/long (depending on the input) value to the argument.\n\n\n\nSyntax\n\n\nINT|LONG\n math:round(\nFLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be rounded to the closest integer/long.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;\n\n\n\n\nround(3252.353) returns 3252.\n\n\n\nsignum \n(Function)\n\n\nIf a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function.\n\n\n\nSyntax\n\n\nINT\n math:signum(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if positive or negative or otherwise\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;\n\n\n\n\nsignum(-6.32d) returns -1.\n\n\n\nsin \n(Function)\n\n\nReturns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sin(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose sine value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;\n\n\n\n\nsin(6d) returns -0.27941549819892586.\n\n\n\nsinh \n(Function)\n\n\nReturns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function. \n\n\n\nSyntax\n\n\nDOUBLE\n math:sinh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic sine value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;\n\n\n\n\nsinh(6d) returns 201.71315737027922.\n\n\n\nsqrt \n(Function)\n\n\nReturns the square-root of p1. This function wraps the java.lang.Math.sqrt() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sqrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose square-root value should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;\n\n\n\n\nsqrt(4d) returns 2.\n\n\n\ntan \n(Function)\n\n\nReturns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tan(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose tan value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;\n\n\n\n\ntan(6d) returns -0.29100619138474915.\n\n\n\ntanh \n(Function)\n\n\nReturns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tanh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic tangent value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;\n\n\n\n\ntanh(6d) returns 0.9999877116507956.\n\n\n\ntoDegrees \n(Function)\n\n\nConverts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toDegrees(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe radians value that should be converted to degrees\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;\n\n\n\n\ntoDegrees(6d) returns 343.77467707849394.\n\n\n\ntoRadians \n(Function)\n\n\nConverts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toRadians(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe degrees value that should be converted to radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;\n\n\n\n\ntoRadians(6d) returns 0.10471975511965977.", 
            "title": "4.0.12"
        }, 
        {
            "location": "/api/4.0.12/#api-docs-v4012", 
            "text": "", 
            "title": "API Docs - v4.0.12"
        }, 
        {
            "location": "/api/4.0.12/#math", 
            "text": "", 
            "title": "Math"
        }, 
        {
            "location": "/api/4.0.12/#percentile-aggregate-function", 
            "text": "Returns the pth percentile value of the arg values.  Syntax  DOUBLE  math:percentile( INT|LONG|FLOAT|DOUBLE  arg,  DOUBLE  p)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The values of which the percentile should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p \n         Estimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100 \n         \n         DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;  math:percentile(temperature, 97.0)", 
            "title": "percentile (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.12/#abs-function", 
            "text": "Returns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function.  Syntax  DOUBLE  math:abs( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the absolute value should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;  Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.", 
            "title": "abs (Function)"
        }, 
        {
            "location": "/api/4.0.12/#acos-function", 
            "text": "If -1  = p1  = 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function.  Syntax  DOUBLE  math:acos( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-cosine (inverse cosine) should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;  acos(0.5) returns 1.0471975511965979.", 
            "title": "acos (Function)"
        }, 
        {
            "location": "/api/4.0.12/#asin-function", 
            "text": "If -1  = p1  = 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function.  Syntax  DOUBLE  math:asin( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-sin (inverse sine) should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;  asin(0.5) returns 0.5235987755982989.", 
            "title": "asin (Function)"
        }, 
        {
            "location": "/api/4.0.12/#atan-function", 
            "text": "1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function. 2. Returns the arc-tangent (inverse tangent) of  p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function.  Syntax  DOUBLE  math:atan( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p1 \n         This optional parameter represents the y coordinate of the (x,y) coordinate pair \n         0D \n         INT LONG FLOAT DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;  atan(12d, 5d) returns 1.1760052070951352.", 
            "title": "atan (Function)"
        }, 
        {
            "location": "/api/4.0.12/#bin-function", 
            "text": "Returns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods.  Syntax  STRING  math:bin( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to an unsigned integer of base 2 \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;  bin(9) returns \"1001\".", 
            "title": "bin (Function)"
        }, 
        {
            "location": "/api/4.0.12/#cbrt-function", 
            "text": "Returns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function.  Syntax  DOUBLE  math:cbrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose cube-root should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;  cbrt(17d) returns 2.5712815906582356.", 
            "title": "cbrt (Function)"
        }, 
        {
            "location": "/api/4.0.12/#ceil-function", 
            "text": "Returns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method.  Syntax  DOUBLE  math:ceil( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose ceiling value should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;  ceil(423.187d) returns 424.0.", 
            "title": "ceil (Function)"
        }, 
        {
            "location": "/api/4.0.12/#conv-function", 
            "text": "Converts a from the fromBase base to the toBase base.  Syntax  STRING  math:conv( STRING  a,  INT  from.base,  INT  to.base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         a \n         The value whose base should be changed. Input should be as a String \n         \n         STRING \n         No \n         No \n     \n     \n         from.base \n         The source base of the input parameter 'a' \n         \n         INT \n         No \n         No \n     \n     \n         to.base \n         The target base that input parameter 'a' should be converted to \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;  conv(\"7f\", 16, 10) returns \"127\".", 
            "title": "conv (Function)"
        }, 
        {
            "location": "/api/4.0.12/#copysign-function", 
            "text": "Returns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function.  Syntax  DOUBLE  math:copySign( INT|LONG|FLOAT|DOUBLE  magnitude,  INT|LONG|FLOAT|DOUBLE  sign)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         magnitude \n         This parameters magnitude will be used for output attribute \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         sign \n         This parameters sign will be used for output attribute \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;  copySign(5.6d, -3.0d) returns -5.6.", 
            "title": "copySign (Function)"
        }, 
        {
            "location": "/api/4.0.12/#cos-function", 
            "text": "Returns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function.  Syntax  DOUBLE  math:cos( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose cosine value should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;  cos(6d) returns 0.9601702866503661.", 
            "title": "cos (Function)"
        }, 
        {
            "location": "/api/4.0.12/#cosh-function", 
            "text": "Returns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function.  Syntax  DOUBLE  math:cosh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic cosine should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;  cosh (6d) returns 201.7156361224559.", 
            "title": "cosh (Function)"
        }, 
        {
            "location": "/api/4.0.12/#e-function", 
            "text": "Returns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms).  Syntax  DOUBLE  math:e()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;  e() returns 2.7182818284590452354.", 
            "title": "e (Function)"
        }, 
        {
            "location": "/api/4.0.12/#exp-function", 
            "text": "Returns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function.  Syntax  DOUBLE  math:exp( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The power that the Euler's number e should be raised to \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;  exp(10.23) returns 27722.51006805505.", 
            "title": "exp (Function)"
        }, 
        {
            "location": "/api/4.0.12/#floor-function", 
            "text": "This function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer.  Syntax  DOUBLE  math:floor( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose floor value should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;  floor(10.23) returns 10.0.", 
            "title": "floor (Function)"
        }, 
        {
            "location": "/api/4.0.12/#getexponent-function", 
            "text": "Returns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function.  Syntax  INT  math:getExponent( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose unbiased exponent representation should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;  getExponent(60984.1) returns 15.", 
            "title": "getExponent (Function)"
        }, 
        {
            "location": "/api/4.0.12/#hex-function", 
            "text": "This function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1.  Syntax  STRING  math:hex( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hexadecimal representation should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;  hex(200) returns \"c8\".", 
            "title": "hex (Function)"
        }, 
        {
            "location": "/api/4.0.12/#isinfinite-function", 
            "text": "This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise.  Syntax  BOOL  math:isInfinite( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if infinite \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;  isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.", 
            "title": "isInfinite (Function)"
        }, 
        {
            "location": "/api/4.0.12/#isnan-function", 
            "text": "This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise.  Syntax  BOOL  math:isNan( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if it is a number \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;  isNan(java.lang.Math.log(-12d)) returns true.", 
            "title": "isNan (Function)"
        }, 
        {
            "location": "/api/4.0.12/#ln-function", 
            "text": "Returns the natural logarithm (base e) of p1.  Syntax  DOUBLE  math:ln( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose natural logarithm (base e) should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;  ln(11.453) returns 2.438251704415579.", 
            "title": "ln (Function)"
        }, 
        {
            "location": "/api/4.0.12/#log-function", 
            "text": "Returns the logarithm (base=base) of number.  Syntax  DOUBLE  math:log( INT|LONG|FLOAT|DOUBLE  number,  INT|LONG|FLOAT|DOUBLE  base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         number \n         The value of whose base should be changed \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         base \n         The base value of the ouput \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;  log(34, 2f) returns 5.08746284125034.", 
            "title": "log (Function)"
        }, 
        {
            "location": "/api/4.0.12/#log10-function", 
            "text": "Returns the base 10 logarithm of p1.  Syntax  DOUBLE  math:log10( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose base 10 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;  log10(19.234) returns 1.2840696117100832.", 
            "title": "log10 (Function)"
        }, 
        {
            "location": "/api/4.0.12/#log2-function", 
            "text": "Returns the base 2 logarithm of p1.  Syntax  DOUBLE  math:log2( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose base 2 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;  log2(91d) returns 6.507794640198696.", 
            "title": "log2 (Function)"
        }, 
        {
            "location": "/api/4.0.12/#max-function", 
            "text": "Returns the greater value out of p1 and p2.  Syntax  DOUBLE  math:max( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         Value one to be compared in finding largest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         Value two to be compared in finding largest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;  max(123.67d, 91) returns 123.67.", 
            "title": "max (Function)"
        }, 
        {
            "location": "/api/4.0.12/#min-function", 
            "text": "Returns the smaller value out of p1 and p2.  Syntax  DOUBLE  math:min( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         Value one to be compared in finding smallest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         Value two to be compared in finding smallest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;  min(123.67d, 91) returns 91.", 
            "title": "min (Function)"
        }, 
        {
            "location": "/api/4.0.12/#oct-function", 
            "text": "Converts p1 to octal.  Syntax  STRING  math:oct( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose octal representation should be found. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  oct(99l) returns \"143\".", 
            "title": "oct (Function)"
        }, 
        {
            "location": "/api/4.0.12/#parsedouble-function", 
            "text": "Returns str as a double.  Syntax  DOUBLE  math:parseDouble( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a double \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;  parseDouble(\"123\") returns 123.0.", 
            "title": "parseDouble (Function)"
        }, 
        {
            "location": "/api/4.0.12/#parsefloat-function", 
            "text": "Returns str as a float.  Syntax  FLOAT  math:parseFloat( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a float \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;  parseFloat(\"123\") returns 123.0.", 
            "title": "parseFloat (Function)"
        }, 
        {
            "location": "/api/4.0.12/#parseint-function", 
            "text": "Returns str as a int.  Syntax  INT  math:parseInt( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a int \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;  parseInt(\"123\") returns 123.", 
            "title": "parseInt (Function)"
        }, 
        {
            "location": "/api/4.0.12/#parselong-function", 
            "text": "Returns str as a long.  Syntax  LONG  math:parseLong( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a long \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;  parseLong(\"123\") returns 123.", 
            "title": "parseLong (Function)"
        }, 
        {
            "location": "/api/4.0.12/#pi-function", 
            "text": "Returns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter).   Syntax  DOUBLE  math:pi()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;  pi() always returns 3.141592653589793.", 
            "title": "pi (Function)"
        }, 
        {
            "location": "/api/4.0.12/#power-function", 
            "text": "Returns value raised to the power of toPower.  Syntax  DOUBLE  math:power( INT|LONG|FLOAT|DOUBLE  value,  INT|LONG|FLOAT|DOUBLE  to.power)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value that should be raised to the power of 'to.power' input parameter \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         to.power \n         The power that 'value' input parameter should be raised to \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;  power(5.6d, 3.0d) returns 175.61599999999996.", 
            "title": "power (Function)"
        }, 
        {
            "location": "/api/4.0.12/#rand-function", 
            "text": "1.  A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. 2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally.   Syntax  DOUBLE  math:rand( INT|LONG  seed)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         seed \n         An optional seed value that will be used to generate the random number sequence \n         defaultSeed \n         INT LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  A random double value between 0 and 1 will be generated using math:rand()", 
            "title": "rand (Function)"
        }, 
        {
            "location": "/api/4.0.12/#round-function", 
            "text": "Returns the closest integer/long (depending on the input) value to the argument.  Syntax  INT|LONG  math:round( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be rounded to the closest integer/long. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;  round(3252.353) returns 3252.", 
            "title": "round (Function)"
        }, 
        {
            "location": "/api/4.0.12/#signum-function", 
            "text": "If a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function.  Syntax  INT  math:signum( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if positive or negative or otherwise \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;  signum(-6.32d) returns -1.", 
            "title": "signum (Function)"
        }, 
        {
            "location": "/api/4.0.12/#sin-function", 
            "text": "Returns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function.  Syntax  DOUBLE  math:sin( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose sine value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;  sin(6d) returns -0.27941549819892586.", 
            "title": "sin (Function)"
        }, 
        {
            "location": "/api/4.0.12/#sinh-function", 
            "text": "Returns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function.   Syntax  DOUBLE  math:sinh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic sine value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;  sinh(6d) returns 201.71315737027922.", 
            "title": "sinh (Function)"
        }, 
        {
            "location": "/api/4.0.12/#sqrt-function", 
            "text": "Returns the square-root of p1. This function wraps the java.lang.Math.sqrt() function.  Syntax  DOUBLE  math:sqrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose square-root value should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;  sqrt(4d) returns 2.", 
            "title": "sqrt (Function)"
        }, 
        {
            "location": "/api/4.0.12/#tan-function", 
            "text": "Returns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function.  Syntax  DOUBLE  math:tan( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose tan value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;  tan(6d) returns -0.29100619138474915.", 
            "title": "tan (Function)"
        }, 
        {
            "location": "/api/4.0.12/#tanh-function", 
            "text": "Returns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function.  Syntax  DOUBLE  math:tanh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic tangent value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;  tanh(6d) returns 0.9999877116507956.", 
            "title": "tanh (Function)"
        }, 
        {
            "location": "/api/4.0.12/#todegrees-function", 
            "text": "Converts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function.  Syntax  DOUBLE  math:toDegrees( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The radians value that should be converted to degrees \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;  toDegrees(6d) returns 343.77467707849394.", 
            "title": "toDegrees (Function)"
        }, 
        {
            "location": "/api/4.0.12/#toradians-function", 
            "text": "Converts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function.  Syntax  DOUBLE  math:toRadians( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The degrees value that should be converted to radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;  toRadians(6d) returns 0.10471975511965977.", 
            "title": "toRadians (Function)"
        }, 
        {
            "location": "/api/4.0.11/", 
            "text": "API Docs - v4.0.11\n\n\nMath\n\n\npercentile \n(Aggregate Function)\n\n\nReturns the pth percentile value of the arg values.\n\n\n\nSyntax\n\n\nDOUBLE\n math:percentile(\nINT|LONG|FLOAT|DOUBLE\n arg, \nDOUBLE\n p)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe values of which the percentile should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np\n\n        \nEstimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;\n\n\n\n\nmath:percentile(temperature, 97.0)\n\n\n\nabs \n(Function)\n\n\nReturns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:abs(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the absolute value should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;\n\n\n\n\nBoth abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.\n\n\n\nacos \n(Function)\n\n\nIf -1 \n= p1 \n= 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:acos(\nFLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-cosine (inverse cosine) should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;\n\n\n\n\nacos(0.5) returns 1.0471975511965979.\n\n\n\nasin \n(Function)\n\n\nIf -1 \n= p1 \n= 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:asin(\nFLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-sin (inverse sine) should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;\n\n\n\n\nasin(0.5) returns 0.5235987755982989.\n\n\n\natan \n(Function)\n\n\n1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function.\n2. Returns the arc-tangent (inverse tangent) of  p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:atan(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np1\n\n        \nThis optional parameter represents the y coordinate of the (x,y) coordinate pair\n\n        \n0D\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\natan(12d, 5d) returns 1.1760052070951352.\n\n\n\nbin \n(Function)\n\n\nReturns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods.\n\n\n\nSyntax\n\n\nSTRING\n math:bin(\nINT|LONG\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to an unsigned integer of base 2\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;\n\n\n\n\nbin(9) returns \"1001\".\n\n\n\ncbrt \n(Function)\n\n\nReturns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cbrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose cube-root should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;\n\n\n\n\ncbrt(17d) returns 2.5712815906582356.\n\n\n\nceil \n(Function)\n\n\nReturns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ceil(\nFLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose ceiling value should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;\n\n\n\n\nceil(423.187d) returns 424.0.\n\n\n\nconv \n(Function)\n\n\nConverts a from the fromBase base to the toBase base.\n\n\n\nSyntax\n\n\nSTRING\n math:conv(\nSTRING\n a, \nINT\n from.base, \nINT\n to.base)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \na\n\n        \nThe value whose base should be changed. Input should be as a String\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfrom.base\n\n        \nThe source base of the input parameter 'a'\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.base\n\n        \nThe target base that input parameter 'a' should be converted to\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\nconv(\"7f\", 16, 10) returns \"127\".\n\n\n\ncopySign \n(Function)\n\n\nReturns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:copySign(\nINT|LONG|FLOAT|DOUBLE\n magnitude, \nINT|LONG|FLOAT|DOUBLE\n sign)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmagnitude\n\n        \nThis parameters magnitude will be used for output attribute\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsign\n\n        \nThis parameters sign will be used for output attribute\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;\n\n\n\n\ncopySign(5.6d, -3.0d) returns -5.6.\n\n\n\ncos \n(Function)\n\n\nReturns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cos(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose cosine value should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\ncos(6d) returns 0.9601702866503661.\n\n\n\ncosh \n(Function)\n\n\nReturns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cosh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic cosine should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\ncosh (6d) returns 201.7156361224559.\n\n\n\ne \n(Function)\n\n\nReturns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms).\n\n\n\nSyntax\n\n\nDOUBLE\n math:e()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;\n\n\n\n\ne() returns 2.7182818284590452354.\n\n\n\nexp \n(Function)\n\n\nReturns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:exp(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe power that the Euler's number e should be raised to\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\nexp(10.23) returns 27722.51006805505.\n\n\n\nfloor \n(Function)\n\n\nThis function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer.\n\n\n\nSyntax\n\n\nDOUBLE\n math:floor(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose floor value should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;\n\n\n\n\nfloor(10.23) returns 10.0.\n\n\n\ngetExponent \n(Function)\n\n\nReturns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function.\n\n\n\nSyntax\n\n\nINT\n math:getExponent(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose unbiased exponent representation should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\ngetExponent(60984.1) returns 15.\n\n\n\nhex \n(Function)\n\n\nThis function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1.\n\n\n\nSyntax\n\n\nSTRING\n math:hex(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hexadecimal representation should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;\n\n\n\n\nhex(200) returns \"c8\".\n\n\n\nisInfinite \n(Function)\n\n\nThis function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isInfinite(\nFLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if infinite\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;\n\n\n\n\nisInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.\n\n\n\nisNan \n(Function)\n\n\nThis function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isNan(\nFLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if it is a number\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;\n\n\n\n\nisNan(java.lang.Math.log(-12d)) returns true.\n\n\n\nln \n(Function)\n\n\nReturns the natural logarithm (base e) of p1.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ln(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose natural logarithm (base e) should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\nln(11.453) returns 2.438251704415579.\n\n\n\nlog \n(Function)\n\n\nReturns the logarithm (base=base) of number.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log(\nINT|LONG|FLOAT|DOUBLE\n number, \nINT|LONG|FLOAT|DOUBLE\n base)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nnumber\n\n        \nThe value of whose base should be changed\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbase\n\n        \nThe base value of the ouput\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;\n\n\n\n\nlog(34, 2f) returns 5.08746284125034.\n\n\n\nlog10 \n(Function)\n\n\nReturns the base 10 logarithm of p1.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log10(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose base 10 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\nlog10(19.234) returns 1.2840696117100832.\n\n\n\nlog2 \n(Function)\n\n\nReturns the base 2 logarithm of p1.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log2(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose base 2 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\nlog2(91d) returns 6.507794640198696.\n\n\n\nmax \n(Function)\n\n\nReturns the greater value out of p1 and p2.\n\n\n\nSyntax\n\n\nDOUBLE\n math:max(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nValue one to be compared in finding largest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nValue two to be compared in finding largest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;\n\n\n\n\nmax(123.67d, 91) returns 123.67.\n\n\n\nmin \n(Function)\n\n\nReturns the smaller value out of p1 and p2.\n\n\n\nSyntax\n\n\nDOUBLE\n math:min(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nValue one to be compared in finding smallest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nValue two to be compared in finding smallest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;\n\n\n\n\nmin(123.67d, 91) returns 91.\n\n\n\noct \n(Function)\n\n\nConverts p1 to octal.\n\n\n\nSyntax\n\n\nSTRING\n math:oct(\nINT|LONG\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose octal representation should be found.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\noct(99l) returns \"143\".\n\n\n\nparseDouble \n(Function)\n\n\nReturns str as a double.\n\n\n\nSyntax\n\n\nDOUBLE\n math:parseDouble(\nSTRING\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a double\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\nparseDouble(\"123\") returns 123.0.\n\n\n\nparseFloat \n(Function)\n\n\nReturns str as a float.\n\n\n\nSyntax\n\n\nFLOAT\n math:parseFloat(\nSTRING\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a float\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\nparseFloat(\"123\") returns 123.0.\n\n\n\nparseInt \n(Function)\n\n\nReturns str as a int.\n\n\n\nSyntax\n\n\nINT\n math:parseInt(\nSTRING\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a int\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\nparseInt(\"123\") returns 123.\n\n\n\nparseLong \n(Function)\n\n\nReturns str as a long.\n\n\n\nSyntax\n\n\nLONG\n math:parseLong(\nSTRING\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a long\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\nparseLong(\"123\") returns 123.\n\n\n\npi \n(Function)\n\n\nReturns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter). \n\n\n\nSyntax\n\n\nDOUBLE\n math:pi()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;\n\n\n\n\npi() always returns 3.141592653589793.\n\n\n\npower \n(Function)\n\n\nReturns value raised to the power of toPower.\n\n\n\nSyntax\n\n\nDOUBLE\n math:power(\nINT|LONG|FLOAT|DOUBLE\n value, \nINT|LONG|FLOAT|DOUBLE\n to.power)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value that should be raised to the power of 'to.power' input parameter\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.power\n\n        \nThe power that 'value' input parameter should be raised to\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;\n\n\n\n\npower(5.6d, 3.0d) returns 175.61599999999996.\n\n\n\nrand \n(Function)\n\n\n1.  A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally.\n2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. \n\n\n\nSyntax\n\n\nDOUBLE\n math:rand(\nINT|LONG\n seed)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nseed\n\n        \nAn optional seed value that will be used to generate the random number sequence\n\n        \ndefaultSeed\n\n        \nINT\nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\nA random double value between 0 and 1 will be generated using math:rand()\n\n\n\nround \n(Function)\n\n\nReturns the closest integer/long (depending on the input) value to the argument.\n\n\n\nSyntax\n\n\nINT|LONG\n math:round(\nFLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be rounded to the closest integer/long.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;\n\n\n\n\nround(3252.353) returns 3252.\n\n\n\nsignum \n(Function)\n\n\nIf a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function.\n\n\n\nSyntax\n\n\nINT\n math:signum(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if positive or negative or otherwise\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;\n\n\n\n\nsignum(-6.32d) returns -1.\n\n\n\nsin \n(Function)\n\n\nReturns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sin(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose sine value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;\n\n\n\n\nsin(6d) returns -0.27941549819892586.\n\n\n\nsinh \n(Function)\n\n\nReturns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function. \n\n\n\nSyntax\n\n\nDOUBLE\n math:sinh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic sine value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;\n\n\n\n\nsinh(6d) returns 201.71315737027922.\n\n\n\nsqrt \n(Function)\n\n\nReturns the square-root of p1. This function wraps the java.lang.Math.sqrt() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sqrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose square-root value should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;\n\n\n\n\nsqrt(4d) returns 2.\n\n\n\ntan \n(Function)\n\n\nReturns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tan(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose tan value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;\n\n\n\n\ntan(6d) returns -0.29100619138474915.\n\n\n\ntanh \n(Function)\n\n\nReturns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tanh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic tangent value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;\n\n\n\n\ntanh(6d) returns 0.9999877116507956.\n\n\n\ntoDegrees \n(Function)\n\n\nConverts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toDegrees(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe radians value that should be converted to degrees\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;\n\n\n\n\ntoDegrees(6d) returns 343.77467707849394.\n\n\n\ntoRadians \n(Function)\n\n\nConverts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toRadians(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe degrees value that should be converted to radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;\n\n\n\n\ntoRadians(6d) returns 0.10471975511965977.", 
            "title": "4.0.11"
        }, 
        {
            "location": "/api/4.0.11/#api-docs-v4011", 
            "text": "", 
            "title": "API Docs - v4.0.11"
        }, 
        {
            "location": "/api/4.0.11/#math", 
            "text": "", 
            "title": "Math"
        }, 
        {
            "location": "/api/4.0.11/#percentile-aggregate-function", 
            "text": "Returns the pth percentile value of the arg values.  Syntax  DOUBLE  math:percentile( INT|LONG|FLOAT|DOUBLE  arg,  DOUBLE  p)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The values of which the percentile should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p \n         Estimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100 \n         \n         DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;  math:percentile(temperature, 97.0)", 
            "title": "percentile (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.11/#abs-function", 
            "text": "Returns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function.  Syntax  DOUBLE  math:abs( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the absolute value should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;  Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.", 
            "title": "abs (Function)"
        }, 
        {
            "location": "/api/4.0.11/#acos-function", 
            "text": "If -1  = p1  = 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function.  Syntax  DOUBLE  math:acos( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-cosine (inverse cosine) should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;  acos(0.5) returns 1.0471975511965979.", 
            "title": "acos (Function)"
        }, 
        {
            "location": "/api/4.0.11/#asin-function", 
            "text": "If -1  = p1  = 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function.  Syntax  DOUBLE  math:asin( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-sin (inverse sine) should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;  asin(0.5) returns 0.5235987755982989.", 
            "title": "asin (Function)"
        }, 
        {
            "location": "/api/4.0.11/#atan-function", 
            "text": "1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function. 2. Returns the arc-tangent (inverse tangent) of  p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function.  Syntax  DOUBLE  math:atan( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p1 \n         This optional parameter represents the y coordinate of the (x,y) coordinate pair \n         0D \n         INT LONG FLOAT DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;  atan(12d, 5d) returns 1.1760052070951352.", 
            "title": "atan (Function)"
        }, 
        {
            "location": "/api/4.0.11/#bin-function", 
            "text": "Returns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods.  Syntax  STRING  math:bin( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to an unsigned integer of base 2 \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;  bin(9) returns \"1001\".", 
            "title": "bin (Function)"
        }, 
        {
            "location": "/api/4.0.11/#cbrt-function", 
            "text": "Returns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function.  Syntax  DOUBLE  math:cbrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose cube-root should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;  cbrt(17d) returns 2.5712815906582356.", 
            "title": "cbrt (Function)"
        }, 
        {
            "location": "/api/4.0.11/#ceil-function", 
            "text": "Returns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method.  Syntax  DOUBLE  math:ceil( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose ceiling value should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;  ceil(423.187d) returns 424.0.", 
            "title": "ceil (Function)"
        }, 
        {
            "location": "/api/4.0.11/#conv-function", 
            "text": "Converts a from the fromBase base to the toBase base.  Syntax  STRING  math:conv( STRING  a,  INT  from.base,  INT  to.base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         a \n         The value whose base should be changed. Input should be as a String \n         \n         STRING \n         No \n         No \n     \n     \n         from.base \n         The source base of the input parameter 'a' \n         \n         INT \n         No \n         No \n     \n     \n         to.base \n         The target base that input parameter 'a' should be converted to \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;  conv(\"7f\", 16, 10) returns \"127\".", 
            "title": "conv (Function)"
        }, 
        {
            "location": "/api/4.0.11/#copysign-function", 
            "text": "Returns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function.  Syntax  DOUBLE  math:copySign( INT|LONG|FLOAT|DOUBLE  magnitude,  INT|LONG|FLOAT|DOUBLE  sign)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         magnitude \n         This parameters magnitude will be used for output attribute \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         sign \n         This parameters sign will be used for output attribute \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;  copySign(5.6d, -3.0d) returns -5.6.", 
            "title": "copySign (Function)"
        }, 
        {
            "location": "/api/4.0.11/#cos-function", 
            "text": "Returns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function.  Syntax  DOUBLE  math:cos( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose cosine value should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;  cos(6d) returns 0.9601702866503661.", 
            "title": "cos (Function)"
        }, 
        {
            "location": "/api/4.0.11/#cosh-function", 
            "text": "Returns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function.  Syntax  DOUBLE  math:cosh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic cosine should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;  cosh (6d) returns 201.7156361224559.", 
            "title": "cosh (Function)"
        }, 
        {
            "location": "/api/4.0.11/#e-function", 
            "text": "Returns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms).  Syntax  DOUBLE  math:e()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;  e() returns 2.7182818284590452354.", 
            "title": "e (Function)"
        }, 
        {
            "location": "/api/4.0.11/#exp-function", 
            "text": "Returns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function.  Syntax  DOUBLE  math:exp( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The power that the Euler's number e should be raised to \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;  exp(10.23) returns 27722.51006805505.", 
            "title": "exp (Function)"
        }, 
        {
            "location": "/api/4.0.11/#floor-function", 
            "text": "This function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer.  Syntax  DOUBLE  math:floor( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose floor value should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;  floor(10.23) returns 10.0.", 
            "title": "floor (Function)"
        }, 
        {
            "location": "/api/4.0.11/#getexponent-function", 
            "text": "Returns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function.  Syntax  INT  math:getExponent( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose unbiased exponent representation should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;  getExponent(60984.1) returns 15.", 
            "title": "getExponent (Function)"
        }, 
        {
            "location": "/api/4.0.11/#hex-function", 
            "text": "This function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1.  Syntax  STRING  math:hex( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hexadecimal representation should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;  hex(200) returns \"c8\".", 
            "title": "hex (Function)"
        }, 
        {
            "location": "/api/4.0.11/#isinfinite-function", 
            "text": "This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise.  Syntax  BOOL  math:isInfinite( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if infinite \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;  isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.", 
            "title": "isInfinite (Function)"
        }, 
        {
            "location": "/api/4.0.11/#isnan-function", 
            "text": "This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise.  Syntax  BOOL  math:isNan( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if it is a number \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;  isNan(java.lang.Math.log(-12d)) returns true.", 
            "title": "isNan (Function)"
        }, 
        {
            "location": "/api/4.0.11/#ln-function", 
            "text": "Returns the natural logarithm (base e) of p1.  Syntax  DOUBLE  math:ln( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose natural logarithm (base e) should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;  ln(11.453) returns 2.438251704415579.", 
            "title": "ln (Function)"
        }, 
        {
            "location": "/api/4.0.11/#log-function", 
            "text": "Returns the logarithm (base=base) of number.  Syntax  DOUBLE  math:log( INT|LONG|FLOAT|DOUBLE  number,  INT|LONG|FLOAT|DOUBLE  base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         number \n         The value of whose base should be changed \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         base \n         The base value of the ouput \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;  log(34, 2f) returns 5.08746284125034.", 
            "title": "log (Function)"
        }, 
        {
            "location": "/api/4.0.11/#log10-function", 
            "text": "Returns the base 10 logarithm of p1.  Syntax  DOUBLE  math:log10( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose base 10 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;  log10(19.234) returns 1.2840696117100832.", 
            "title": "log10 (Function)"
        }, 
        {
            "location": "/api/4.0.11/#log2-function", 
            "text": "Returns the base 2 logarithm of p1.  Syntax  DOUBLE  math:log2( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose base 2 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;  log2(91d) returns 6.507794640198696.", 
            "title": "log2 (Function)"
        }, 
        {
            "location": "/api/4.0.11/#max-function", 
            "text": "Returns the greater value out of p1 and p2.  Syntax  DOUBLE  math:max( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         Value one to be compared in finding largest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         Value two to be compared in finding largest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;  max(123.67d, 91) returns 123.67.", 
            "title": "max (Function)"
        }, 
        {
            "location": "/api/4.0.11/#min-function", 
            "text": "Returns the smaller value out of p1 and p2.  Syntax  DOUBLE  math:min( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         Value one to be compared in finding smallest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         Value two to be compared in finding smallest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;  min(123.67d, 91) returns 91.", 
            "title": "min (Function)"
        }, 
        {
            "location": "/api/4.0.11/#oct-function", 
            "text": "Converts p1 to octal.  Syntax  STRING  math:oct( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose octal representation should be found. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  oct(99l) returns \"143\".", 
            "title": "oct (Function)"
        }, 
        {
            "location": "/api/4.0.11/#parsedouble-function", 
            "text": "Returns str as a double.  Syntax  DOUBLE  math:parseDouble( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a double \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;  parseDouble(\"123\") returns 123.0.", 
            "title": "parseDouble (Function)"
        }, 
        {
            "location": "/api/4.0.11/#parsefloat-function", 
            "text": "Returns str as a float.  Syntax  FLOAT  math:parseFloat( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a float \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;  parseFloat(\"123\") returns 123.0.", 
            "title": "parseFloat (Function)"
        }, 
        {
            "location": "/api/4.0.11/#parseint-function", 
            "text": "Returns str as a int.  Syntax  INT  math:parseInt( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a int \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;  parseInt(\"123\") returns 123.", 
            "title": "parseInt (Function)"
        }, 
        {
            "location": "/api/4.0.11/#parselong-function", 
            "text": "Returns str as a long.  Syntax  LONG  math:parseLong( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a long \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;  parseLong(\"123\") returns 123.", 
            "title": "parseLong (Function)"
        }, 
        {
            "location": "/api/4.0.11/#pi-function", 
            "text": "Returns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter).   Syntax  DOUBLE  math:pi()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;  pi() always returns 3.141592653589793.", 
            "title": "pi (Function)"
        }, 
        {
            "location": "/api/4.0.11/#power-function", 
            "text": "Returns value raised to the power of toPower.  Syntax  DOUBLE  math:power( INT|LONG|FLOAT|DOUBLE  value,  INT|LONG|FLOAT|DOUBLE  to.power)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value that should be raised to the power of 'to.power' input parameter \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         to.power \n         The power that 'value' input parameter should be raised to \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;  power(5.6d, 3.0d) returns 175.61599999999996.", 
            "title": "power (Function)"
        }, 
        {
            "location": "/api/4.0.11/#rand-function", 
            "text": "1.  A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. 2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally.   Syntax  DOUBLE  math:rand( INT|LONG  seed)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         seed \n         An optional seed value that will be used to generate the random number sequence \n         defaultSeed \n         INT LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  A random double value between 0 and 1 will be generated using math:rand()", 
            "title": "rand (Function)"
        }, 
        {
            "location": "/api/4.0.11/#round-function", 
            "text": "Returns the closest integer/long (depending on the input) value to the argument.  Syntax  INT|LONG  math:round( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be rounded to the closest integer/long. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;  round(3252.353) returns 3252.", 
            "title": "round (Function)"
        }, 
        {
            "location": "/api/4.0.11/#signum-function", 
            "text": "If a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function.  Syntax  INT  math:signum( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if positive or negative or otherwise \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;  signum(-6.32d) returns -1.", 
            "title": "signum (Function)"
        }, 
        {
            "location": "/api/4.0.11/#sin-function", 
            "text": "Returns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function.  Syntax  DOUBLE  math:sin( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose sine value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;  sin(6d) returns -0.27941549819892586.", 
            "title": "sin (Function)"
        }, 
        {
            "location": "/api/4.0.11/#sinh-function", 
            "text": "Returns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function.   Syntax  DOUBLE  math:sinh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic sine value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;  sinh(6d) returns 201.71315737027922.", 
            "title": "sinh (Function)"
        }, 
        {
            "location": "/api/4.0.11/#sqrt-function", 
            "text": "Returns the square-root of p1. This function wraps the java.lang.Math.sqrt() function.  Syntax  DOUBLE  math:sqrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose square-root value should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;  sqrt(4d) returns 2.", 
            "title": "sqrt (Function)"
        }, 
        {
            "location": "/api/4.0.11/#tan-function", 
            "text": "Returns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function.  Syntax  DOUBLE  math:tan( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose tan value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;  tan(6d) returns -0.29100619138474915.", 
            "title": "tan (Function)"
        }, 
        {
            "location": "/api/4.0.11/#tanh-function", 
            "text": "Returns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function.  Syntax  DOUBLE  math:tanh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic tangent value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;  tanh(6d) returns 0.9999877116507956.", 
            "title": "tanh (Function)"
        }, 
        {
            "location": "/api/4.0.11/#todegrees-function", 
            "text": "Converts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function.  Syntax  DOUBLE  math:toDegrees( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The radians value that should be converted to degrees \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;  toDegrees(6d) returns 343.77467707849394.", 
            "title": "toDegrees (Function)"
        }, 
        {
            "location": "/api/4.0.11/#toradians-function", 
            "text": "Converts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function.  Syntax  DOUBLE  math:toRadians( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The degrees value that should be converted to radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;  toRadians(6d) returns 0.10471975511965977.", 
            "title": "toRadians (Function)"
        }, 
        {
            "location": "/api/4.0.10/", 
            "text": "API Docs - v4.0.10\n\n\nMath\n\n\npercentile \n(Aggregate Function)\n\n\nReturns the pth percentile value of the arg values.\n\n\n\nSyntax\n\n\nDOUBLE\n math:percentile(\nINT|LONG|FLOAT|DOUBLE\n arg, \nDOUBLE\n p)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe values of which the percentile should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np\n\n        \nEstimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;\n\n\n\n\nmath:percentile(temperature, 97.0)\n\n\n\nabs \n(Function)\n\n\nReturns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:abs(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the absolute value should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;\n\n\n\n\nBoth abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.\n\n\n\nacos \n(Function)\n\n\nIf -1 \n= p1 \n= 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:acos(\nFLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-cosine (inverse cosine) should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;\n\n\n\n\nacos(0.5) returns 1.0471975511965979.\n\n\n\nasin \n(Function)\n\n\nIf -1 \n= p1 \n= 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:asin(\nFLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-sin (inverse sine) should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;\n\n\n\n\nasin(0.5) returns 0.5235987755982989.\n\n\n\natan \n(Function)\n\n\n1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function.\n2. Returns the arc-tangent (inverse tangent) of  p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:atan(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np1\n\n        \nThis optional parameter represents the y coordinate of the (x,y) coordinate pair\n\n        \n0D\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\natan(12d, 5d) returns 1.1760052070951352.\n\n\n\nbin \n(Function)\n\n\nReturns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods.\n\n\n\nSyntax\n\n\nSTRING\n math:bin(\nINT|LONG\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to an unsigned integer of base 2\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;\n\n\n\n\nbin(9) returns \"1001\".\n\n\n\ncbrt \n(Function)\n\n\nReturns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cbrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose cube-root should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;\n\n\n\n\ncbrt(17d) returns 2.5712815906582356.\n\n\n\nceil \n(Function)\n\n\nReturns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ceil(\nFLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose ceiling value should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;\n\n\n\n\nceil(423.187d) returns 424.0.\n\n\n\nconv \n(Function)\n\n\nConverts a from the fromBase base to the toBase base.\n\n\n\nSyntax\n\n\nSTRING\n math:conv(\nSTRING\n a, \nINT\n from.base, \nINT\n to.base)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \na\n\n        \nThe value whose base should be changed. Input should be as a String\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfrom.base\n\n        \nThe source base of the input parameter 'a'\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.base\n\n        \nThe target base that input parameter 'a' should be converted to\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\nconv(\"7f\", 16, 10) returns \"127\".\n\n\n\ncopySign \n(Function)\n\n\nReturns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:copySign(\nINT|LONG|FLOAT|DOUBLE\n magnitude, \nINT|LONG|FLOAT|DOUBLE\n sign)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmagnitude\n\n        \nThis parameters magnitude will be used for output attribute\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsign\n\n        \nThis parameters sign will be used for output attribute\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;\n\n\n\n\ncopySign(5.6d, -3.0d) returns -5.6.\n\n\n\ncos \n(Function)\n\n\nReturns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cos(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose cosine value should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\ncos(6d) returns 0.9601702866503661.\n\n\n\ncosh \n(Function)\n\n\nReturns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cosh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic cosine should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\ncosh (6d) returns 201.7156361224559.\n\n\n\ne \n(Function)\n\n\nReturns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms).\n\n\n\nSyntax\n\n\nDOUBLE\n math:e()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;\n\n\n\n\ne() returns 2.7182818284590452354.\n\n\n\nexp \n(Function)\n\n\nReturns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:exp(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe power that the Euler's number e should be raised to\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\nexp(10.23) returns 27722.51006805505.\n\n\n\nfloor \n(Function)\n\n\nThis function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer.\n\n\n\nSyntax\n\n\nDOUBLE\n math:floor(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose floor value should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;\n\n\n\n\nfloor(10.23) returns 10.0.\n\n\n\ngetExponent \n(Function)\n\n\nReturns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function.\n\n\n\nSyntax\n\n\nINT\n math:getExponent(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose unbiased exponent representation should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\ngetExponent(60984.1) returns 15.\n\n\n\nhex \n(Function)\n\n\nThis function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1.\n\n\n\nSyntax\n\n\nSTRING\n math:hex(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hexadecimal representation should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;\n\n\n\n\nhex(200) returns \"c8\".\n\n\n\nisInfinite \n(Function)\n\n\nThis function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isInfinite(\nFLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if infinite\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;\n\n\n\n\nisInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.\n\n\n\nisNan \n(Function)\n\n\nThis function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isNan(\nFLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if it is a number\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;\n\n\n\n\nisNan(java.lang.Math.log(-12d)) returns true.\n\n\n\nln \n(Function)\n\n\nReturns the natural logarithm (base e) of p1.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ln(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose natural logarithm (base e) should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\nln(11.453) returns 2.438251704415579.\n\n\n\nlog \n(Function)\n\n\nReturns the logarithm (base=base) of number.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log(\nINT|LONG|FLOAT|DOUBLE\n number, \nINT|LONG|FLOAT|DOUBLE\n base)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nnumber\n\n        \nThe value of whose base should be changed\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbase\n\n        \nThe base value of the ouput\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;\n\n\n\n\nlog(34, 2f) returns 5.08746284125034.\n\n\n\nlog10 \n(Function)\n\n\nReturns the base 10 logarithm of p1.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log10(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose base 10 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\nlog10(19.234) returns 1.2840696117100832.\n\n\n\nlog2 \n(Function)\n\n\nReturns the base 2 logarithm of p1.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log2(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose base 2 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\nlog2(91d) returns 6.507794640198696.\n\n\n\nmax \n(Function)\n\n\nReturns the greater value out of p1 and p2.\n\n\n\nSyntax\n\n\nDOUBLE\n math:max(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nValue one to be compared in finding largest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nValue two to be compared in finding largest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;\n\n\n\n\nmax(123.67d, 91) returns 123.67.\n\n\n\nmin \n(Function)\n\n\nReturns the smaller value out of p1 and p2.\n\n\n\nSyntax\n\n\nDOUBLE\n math:min(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nValue one to be compared in finding smallest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nValue two to be compared in finding smallest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;\n\n\n\n\nmin(123.67d, 91) returns 91.\n\n\n\noct \n(Function)\n\n\nConverts p1 to octal.\n\n\n\nSyntax\n\n\nSTRING\n math:oct(\nINT|LONG\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose octal representation should be found.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\noct(99l) returns \"143\".\n\n\n\nparseDouble \n(Function)\n\n\nReturns str as a double.\n\n\n\nSyntax\n\n\nDOUBLE\n math:parseDouble(\nSTRING\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a double\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\nparseDouble(\"123\") returns 123.0.\n\n\n\nparseFloat \n(Function)\n\n\nReturns str as a float.\n\n\n\nSyntax\n\n\nFLOAT\n math:parseFloat(\nSTRING\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a float\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\nparseFloat(\"123\") returns 123.0.\n\n\n\nparseInt \n(Function)\n\n\nReturns str as a int.\n\n\n\nSyntax\n\n\nINT\n math:parseInt(\nSTRING\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a int\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\nparseInt(\"123\") returns 123.\n\n\n\nparseLong \n(Function)\n\n\nReturns str as a long.\n\n\n\nSyntax\n\n\nLONG\n math:parseLong(\nSTRING\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a long\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\nparseLong(\"123\") returns 123.\n\n\n\npi \n(Function)\n\n\nReturns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter). \n\n\n\nSyntax\n\n\nDOUBLE\n math:pi()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;\n\n\n\n\npi() always returns 3.141592653589793.\n\n\n\npower \n(Function)\n\n\nReturns value raised to the power of toPower.\n\n\n\nSyntax\n\n\nDOUBLE\n math:power(\nINT|LONG|FLOAT|DOUBLE\n value, \nINT|LONG|FLOAT|DOUBLE\n to.power)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value that should be raised to the power of 'to.power' input parameter\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.power\n\n        \nThe power that 'value' input parameter should be raised to\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;\n\n\n\n\npower(5.6d, 3.0d) returns 175.61599999999996.\n\n\n\nrand \n(Function)\n\n\n1.  A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally.\n2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. \n\n\n\nSyntax\n\n\nDOUBLE\n math:rand(\nINT|LONG\n seed)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nseed\n\n        \nAn optional seed value that will be used to generate the random number sequence\n\n        \ndefaultSeed\n\n        \nINT\nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\nA random double value between 0 and 1 will be generated using math:rand()\n\n\n\nround \n(Function)\n\n\nReturns the closest integer/long (depending on the input) value to the argument.\n\n\n\nSyntax\n\n\nINT|LONG\n math:round(\nFLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be rounded to the closest integer/long.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;\n\n\n\n\nround(3252.353) returns 3252.\n\n\n\nsignum \n(Function)\n\n\nIf a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function.\n\n\n\nSyntax\n\n\nINT\n math:signum(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if positive or negative or otherwise\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;\n\n\n\n\nsignum(-6.32d) returns -1.\n\n\n\nsin \n(Function)\n\n\nReturns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sin(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose sine value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;\n\n\n\n\nsin(6d) returns -0.27941549819892586.\n\n\n\nsinh \n(Function)\n\n\nReturns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function. \n\n\n\nSyntax\n\n\nDOUBLE\n math:sinh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic sine value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;\n\n\n\n\nsinh(6d) returns 201.71315737027922.\n\n\n\nsqrt \n(Function)\n\n\nReturns the square-root of p1. This function wraps the java.lang.Math.sqrt() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sqrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose square-root value should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;\n\n\n\n\nsqrt(4d) returns 2.\n\n\n\ntan \n(Function)\n\n\nReturns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tan(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose tan value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;\n\n\n\n\ntan(6d) returns -0.29100619138474915.\n\n\n\ntanh \n(Function)\n\n\nReturns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tanh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic tangent value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;\n\n\n\n\ntanh(6d) returns 0.9999877116507956.\n\n\n\ntoDegrees \n(Function)\n\n\nConverts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toDegrees(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe radians value that should be converted to degrees\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;\n\n\n\n\ntoDegrees(6d) returns 343.77467707849394.\n\n\n\ntoRadians \n(Function)\n\n\nConverts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toRadians(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe degrees value that should be converted to radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;\n\n\n\n\ntoRadians(6d) returns 0.10471975511965977.", 
            "title": "4.0.10"
        }, 
        {
            "location": "/api/4.0.10/#api-docs-v4010", 
            "text": "", 
            "title": "API Docs - v4.0.10"
        }, 
        {
            "location": "/api/4.0.10/#math", 
            "text": "", 
            "title": "Math"
        }, 
        {
            "location": "/api/4.0.10/#percentile-aggregate-function", 
            "text": "Returns the pth percentile value of the arg values.  Syntax  DOUBLE  math:percentile( INT|LONG|FLOAT|DOUBLE  arg,  DOUBLE  p)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The values of which the percentile should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p \n         Estimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100 \n         \n         DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;  math:percentile(temperature, 97.0)", 
            "title": "percentile (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.10/#abs-function", 
            "text": "Returns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function.  Syntax  DOUBLE  math:abs( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the absolute value should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;  Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.", 
            "title": "abs (Function)"
        }, 
        {
            "location": "/api/4.0.10/#acos-function", 
            "text": "If -1  = p1  = 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function.  Syntax  DOUBLE  math:acos( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-cosine (inverse cosine) should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;  acos(0.5) returns 1.0471975511965979.", 
            "title": "acos (Function)"
        }, 
        {
            "location": "/api/4.0.10/#asin-function", 
            "text": "If -1  = p1  = 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function.  Syntax  DOUBLE  math:asin( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-sin (inverse sine) should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;  asin(0.5) returns 0.5235987755982989.", 
            "title": "asin (Function)"
        }, 
        {
            "location": "/api/4.0.10/#atan-function", 
            "text": "1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function. 2. Returns the arc-tangent (inverse tangent) of  p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function.  Syntax  DOUBLE  math:atan( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p1 \n         This optional parameter represents the y coordinate of the (x,y) coordinate pair \n         0D \n         INT LONG FLOAT DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;  atan(12d, 5d) returns 1.1760052070951352.", 
            "title": "atan (Function)"
        }, 
        {
            "location": "/api/4.0.10/#bin-function", 
            "text": "Returns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods.  Syntax  STRING  math:bin( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to an unsigned integer of base 2 \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;  bin(9) returns \"1001\".", 
            "title": "bin (Function)"
        }, 
        {
            "location": "/api/4.0.10/#cbrt-function", 
            "text": "Returns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function.  Syntax  DOUBLE  math:cbrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose cube-root should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;  cbrt(17d) returns 2.5712815906582356.", 
            "title": "cbrt (Function)"
        }, 
        {
            "location": "/api/4.0.10/#ceil-function", 
            "text": "Returns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method.  Syntax  DOUBLE  math:ceil( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose ceiling value should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;  ceil(423.187d) returns 424.0.", 
            "title": "ceil (Function)"
        }, 
        {
            "location": "/api/4.0.10/#conv-function", 
            "text": "Converts a from the fromBase base to the toBase base.  Syntax  STRING  math:conv( STRING  a,  INT  from.base,  INT  to.base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         a \n         The value whose base should be changed. Input should be as a String \n         \n         STRING \n         No \n         No \n     \n     \n         from.base \n         The source base of the input parameter 'a' \n         \n         INT \n         No \n         No \n     \n     \n         to.base \n         The target base that input parameter 'a' should be converted to \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;  conv(\"7f\", 16, 10) returns \"127\".", 
            "title": "conv (Function)"
        }, 
        {
            "location": "/api/4.0.10/#copysign-function", 
            "text": "Returns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function.  Syntax  DOUBLE  math:copySign( INT|LONG|FLOAT|DOUBLE  magnitude,  INT|LONG|FLOAT|DOUBLE  sign)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         magnitude \n         This parameters magnitude will be used for output attribute \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         sign \n         This parameters sign will be used for output attribute \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;  copySign(5.6d, -3.0d) returns -5.6.", 
            "title": "copySign (Function)"
        }, 
        {
            "location": "/api/4.0.10/#cos-function", 
            "text": "Returns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function.  Syntax  DOUBLE  math:cos( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose cosine value should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;  cos(6d) returns 0.9601702866503661.", 
            "title": "cos (Function)"
        }, 
        {
            "location": "/api/4.0.10/#cosh-function", 
            "text": "Returns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function.  Syntax  DOUBLE  math:cosh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic cosine should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;  cosh (6d) returns 201.7156361224559.", 
            "title": "cosh (Function)"
        }, 
        {
            "location": "/api/4.0.10/#e-function", 
            "text": "Returns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms).  Syntax  DOUBLE  math:e()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;  e() returns 2.7182818284590452354.", 
            "title": "e (Function)"
        }, 
        {
            "location": "/api/4.0.10/#exp-function", 
            "text": "Returns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function.  Syntax  DOUBLE  math:exp( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The power that the Euler's number e should be raised to \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;  exp(10.23) returns 27722.51006805505.", 
            "title": "exp (Function)"
        }, 
        {
            "location": "/api/4.0.10/#floor-function", 
            "text": "This function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer.  Syntax  DOUBLE  math:floor( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose floor value should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;  floor(10.23) returns 10.0.", 
            "title": "floor (Function)"
        }, 
        {
            "location": "/api/4.0.10/#getexponent-function", 
            "text": "Returns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function.  Syntax  INT  math:getExponent( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose unbiased exponent representation should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;  getExponent(60984.1) returns 15.", 
            "title": "getExponent (Function)"
        }, 
        {
            "location": "/api/4.0.10/#hex-function", 
            "text": "This function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1.  Syntax  STRING  math:hex( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hexadecimal representation should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;  hex(200) returns \"c8\".", 
            "title": "hex (Function)"
        }, 
        {
            "location": "/api/4.0.10/#isinfinite-function", 
            "text": "This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise.  Syntax  BOOL  math:isInfinite( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if infinite \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;  isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.", 
            "title": "isInfinite (Function)"
        }, 
        {
            "location": "/api/4.0.10/#isnan-function", 
            "text": "This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise.  Syntax  BOOL  math:isNan( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if it is a number \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;  isNan(java.lang.Math.log(-12d)) returns true.", 
            "title": "isNan (Function)"
        }, 
        {
            "location": "/api/4.0.10/#ln-function", 
            "text": "Returns the natural logarithm (base e) of p1.  Syntax  DOUBLE  math:ln( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose natural logarithm (base e) should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;  ln(11.453) returns 2.438251704415579.", 
            "title": "ln (Function)"
        }, 
        {
            "location": "/api/4.0.10/#log-function", 
            "text": "Returns the logarithm (base=base) of number.  Syntax  DOUBLE  math:log( INT|LONG|FLOAT|DOUBLE  number,  INT|LONG|FLOAT|DOUBLE  base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         number \n         The value of whose base should be changed \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         base \n         The base value of the ouput \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;  log(34, 2f) returns 5.08746284125034.", 
            "title": "log (Function)"
        }, 
        {
            "location": "/api/4.0.10/#log10-function", 
            "text": "Returns the base 10 logarithm of p1.  Syntax  DOUBLE  math:log10( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose base 10 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;  log10(19.234) returns 1.2840696117100832.", 
            "title": "log10 (Function)"
        }, 
        {
            "location": "/api/4.0.10/#log2-function", 
            "text": "Returns the base 2 logarithm of p1.  Syntax  DOUBLE  math:log2( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose base 2 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;  log2(91d) returns 6.507794640198696.", 
            "title": "log2 (Function)"
        }, 
        {
            "location": "/api/4.0.10/#max-function", 
            "text": "Returns the greater value out of p1 and p2.  Syntax  DOUBLE  math:max( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         Value one to be compared in finding largest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         Value two to be compared in finding largest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;  max(123.67d, 91) returns 123.67.", 
            "title": "max (Function)"
        }, 
        {
            "location": "/api/4.0.10/#min-function", 
            "text": "Returns the smaller value out of p1 and p2.  Syntax  DOUBLE  math:min( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         Value one to be compared in finding smallest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         Value two to be compared in finding smallest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;  min(123.67d, 91) returns 91.", 
            "title": "min (Function)"
        }, 
        {
            "location": "/api/4.0.10/#oct-function", 
            "text": "Converts p1 to octal.  Syntax  STRING  math:oct( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose octal representation should be found. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  oct(99l) returns \"143\".", 
            "title": "oct (Function)"
        }, 
        {
            "location": "/api/4.0.10/#parsedouble-function", 
            "text": "Returns str as a double.  Syntax  DOUBLE  math:parseDouble( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a double \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;  parseDouble(\"123\") returns 123.0.", 
            "title": "parseDouble (Function)"
        }, 
        {
            "location": "/api/4.0.10/#parsefloat-function", 
            "text": "Returns str as a float.  Syntax  FLOAT  math:parseFloat( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a float \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;  parseFloat(\"123\") returns 123.0.", 
            "title": "parseFloat (Function)"
        }, 
        {
            "location": "/api/4.0.10/#parseint-function", 
            "text": "Returns str as a int.  Syntax  INT  math:parseInt( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a int \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;  parseInt(\"123\") returns 123.", 
            "title": "parseInt (Function)"
        }, 
        {
            "location": "/api/4.0.10/#parselong-function", 
            "text": "Returns str as a long.  Syntax  LONG  math:parseLong( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a long \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;  parseLong(\"123\") returns 123.", 
            "title": "parseLong (Function)"
        }, 
        {
            "location": "/api/4.0.10/#pi-function", 
            "text": "Returns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter).   Syntax  DOUBLE  math:pi()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;  pi() always returns 3.141592653589793.", 
            "title": "pi (Function)"
        }, 
        {
            "location": "/api/4.0.10/#power-function", 
            "text": "Returns value raised to the power of toPower.  Syntax  DOUBLE  math:power( INT|LONG|FLOAT|DOUBLE  value,  INT|LONG|FLOAT|DOUBLE  to.power)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value that should be raised to the power of 'to.power' input parameter \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         to.power \n         The power that 'value' input parameter should be raised to \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;  power(5.6d, 3.0d) returns 175.61599999999996.", 
            "title": "power (Function)"
        }, 
        {
            "location": "/api/4.0.10/#rand-function", 
            "text": "1.  A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. 2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally.   Syntax  DOUBLE  math:rand( INT|LONG  seed)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         seed \n         An optional seed value that will be used to generate the random number sequence \n         defaultSeed \n         INT LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  A random double value between 0 and 1 will be generated using math:rand()", 
            "title": "rand (Function)"
        }, 
        {
            "location": "/api/4.0.10/#round-function", 
            "text": "Returns the closest integer/long (depending on the input) value to the argument.  Syntax  INT|LONG  math:round( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be rounded to the closest integer/long. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;  round(3252.353) returns 3252.", 
            "title": "round (Function)"
        }, 
        {
            "location": "/api/4.0.10/#signum-function", 
            "text": "If a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function.  Syntax  INT  math:signum( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if positive or negative or otherwise \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;  signum(-6.32d) returns -1.", 
            "title": "signum (Function)"
        }, 
        {
            "location": "/api/4.0.10/#sin-function", 
            "text": "Returns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function.  Syntax  DOUBLE  math:sin( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose sine value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;  sin(6d) returns -0.27941549819892586.", 
            "title": "sin (Function)"
        }, 
        {
            "location": "/api/4.0.10/#sinh-function", 
            "text": "Returns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function.   Syntax  DOUBLE  math:sinh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic sine value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;  sinh(6d) returns 201.71315737027922.", 
            "title": "sinh (Function)"
        }, 
        {
            "location": "/api/4.0.10/#sqrt-function", 
            "text": "Returns the square-root of p1. This function wraps the java.lang.Math.sqrt() function.  Syntax  DOUBLE  math:sqrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose square-root value should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;  sqrt(4d) returns 2.", 
            "title": "sqrt (Function)"
        }, 
        {
            "location": "/api/4.0.10/#tan-function", 
            "text": "Returns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function.  Syntax  DOUBLE  math:tan( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose tan value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;  tan(6d) returns -0.29100619138474915.", 
            "title": "tan (Function)"
        }, 
        {
            "location": "/api/4.0.10/#tanh-function", 
            "text": "Returns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function.  Syntax  DOUBLE  math:tanh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic tangent value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;  tanh(6d) returns 0.9999877116507956.", 
            "title": "tanh (Function)"
        }, 
        {
            "location": "/api/4.0.10/#todegrees-function", 
            "text": "Converts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function.  Syntax  DOUBLE  math:toDegrees( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The radians value that should be converted to degrees \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;  toDegrees(6d) returns 343.77467707849394.", 
            "title": "toDegrees (Function)"
        }, 
        {
            "location": "/api/4.0.10/#toradians-function", 
            "text": "Converts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function.  Syntax  DOUBLE  math:toRadians( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The degrees value that should be converted to radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;  toRadians(6d) returns 0.10471975511965977.", 
            "title": "toRadians (Function)"
        }, 
        {
            "location": "/api/4.0.9/", 
            "text": "API Docs - v4.0.9\n\n\nMath\n\n\npercentile \n(Aggregate Function)\n\n\nReturns the pth percentile value of the arg values.\n\n\n\nSyntax\n\n\nDOUBLE\n math:percentile(\nINT|LONG|FLOAT|DOUBLE\n arg, \nDOUBLE\n p)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe values of which the percentile should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np\n\n        \nEstimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;\n\n\n\n\nmath:percentile(temperature, 97.0)\n\n\n\nabs \n(Function)\n\n\nReturns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:abs(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the absolute value should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;\n\n\n\n\nBoth abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.\n\n\n\nacos \n(Function)\n\n\nIf -1 \n= p1 \n= 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:acos(\nFLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-cosine (inverse cosine) should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;\n\n\n\n\nacos(0.5) returns 1.0471975511965979.\n\n\n\nasin \n(Function)\n\n\nIf -1 \n= p1 \n= 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:asin(\nFLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-sin (inverse sine) should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;\n\n\n\n\nasin(0.5) returns 0.5235987755982989.\n\n\n\natan \n(Function)\n\n\n1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function.\n2. Returns the arc-tangent (inverse tangent) of  p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:atan(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np1\n\n        \nThis optional parameter represents the y coordinate of the (x,y) coordinate pair\n\n        \n0D\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\natan(12d, 5d) returns 1.1760052070951352.\n\n\n\nbin \n(Function)\n\n\nReturns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods.\n\n\n\nSyntax\n\n\nSTRING\n math:bin(\nINT|LONG\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to an unsigned integer of base 2\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;\n\n\n\n\nbin(9) returns \"1001\".\n\n\n\ncbrt \n(Function)\n\n\nReturns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cbrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose cube-root should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;\n\n\n\n\ncbrt(17d) returns 2.5712815906582356.\n\n\n\nceil \n(Function)\n\n\nReturns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ceil(\nFLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose ceiling value should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;\n\n\n\n\nceil(423.187d) returns 424.0.\n\n\n\nconv \n(Function)\n\n\nConverts a from the fromBase base to the toBase base.\n\n\n\nSyntax\n\n\nSTRING\n math:conv(\nSTRING\n a, \nINT\n from.base, \nINT\n to.base)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \na\n\n        \nThe value whose base should be changed. Input should be as a String\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfrom.base\n\n        \nThe source base of the input parameter 'a'\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.base\n\n        \nThe target base that input parameter 'a' should be converted to\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\nconv(\"7f\", 16, 10) returns \"127\".\n\n\n\ncopySign \n(Function)\n\n\nReturns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:copySign(\nINT|LONG|FLOAT|DOUBLE\n magnitude, \nINT|LONG|FLOAT|DOUBLE\n sign)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmagnitude\n\n        \nThis parameters magnitude will be used for output attribute\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsign\n\n        \nThis parameters sign will be used for output attribute\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;\n\n\n\n\ncopySign(5.6d, -3.0d) returns -5.6.\n\n\n\ncos \n(Function)\n\n\nReturns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cos(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose cosine value should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\ncos(6d) returns 0.9601702866503661.\n\n\n\ncosh \n(Function)\n\n\nReturns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cosh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic cosine should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\ncosh (6d) returns 201.7156361224559.\n\n\n\ne \n(Function)\n\n\nReturns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms).\n\n\n\nSyntax\n\n\nDOUBLE\n math:e()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;\n\n\n\n\ne() returns 2.7182818284590452354.\n\n\n\nexp \n(Function)\n\n\nReturns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:exp(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe power that the Euler's number e should be raised to\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\nexp(10.23) returns 27722.51006805505.\n\n\n\nfloor \n(Function)\n\n\nThis function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer.\n\n\n\nSyntax\n\n\nDOUBLE\n math:floor(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose floor value should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;\n\n\n\n\nfloor(10.23) returns 10.0.\n\n\n\ngetExponent \n(Function)\n\n\nReturns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function.\n\n\n\nSyntax\n\n\nINT\n math:getExponent(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose unbiased exponent representation should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\ngetExponent(60984.1) returns 15.\n\n\n\nhex \n(Function)\n\n\nThis function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1.\n\n\n\nSyntax\n\n\nSTRING\n math:hex(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hexadecimal representation should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;\n\n\n\n\nhex(200) returns \"c8\".\n\n\n\nisInfinite \n(Function)\n\n\nThis function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isInfinite(\nFLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if infinite\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;\n\n\n\n\nisInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.\n\n\n\nisNan \n(Function)\n\n\nThis function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isNan(\nFLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if it is a number\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;\n\n\n\n\nisNan(java.lang.Math.log(-12d)) returns true.\n\n\n\nln \n(Function)\n\n\nReturns the natural logarithm (base e) of p1.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ln(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose natural logarithm (base e) should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\nln(11.453) returns 2.438251704415579.\n\n\n\nlog \n(Function)\n\n\nReturns the logarithm (base=base) of number.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log(\nINT|LONG|FLOAT|DOUBLE\n number, \nINT|LONG|FLOAT|DOUBLE\n base)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nnumber\n\n        \nThe value of whose base should be changed\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbase\n\n        \nThe base value of the ouput\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;\n\n\n\n\nlog(34, 2f) returns 5.08746284125034.\n\n\n\nlog10 \n(Function)\n\n\nReturns the base 10 logarithm of p1.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log10(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose base 10 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\nlog10(19.234) returns 1.2840696117100832.\n\n\n\nlog2 \n(Function)\n\n\nReturns the base 2 logarithm of p1.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log2(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose base 2 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\nlog2(91d) returns 6.507794640198696.\n\n\n\nmax \n(Function)\n\n\nReturns the greater value out of p1 and p2.\n\n\n\nSyntax\n\n\nDOUBLE\n math:max(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nValue one to be compared in finding largest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nValue two to be compared in finding largest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;\n\n\n\n\nmax(123.67d, 91) returns 123.67.\n\n\n\nmin \n(Function)\n\n\nReturns the smaller value out of p1 and p2.\n\n\n\nSyntax\n\n\nDOUBLE\n math:min(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nValue one to be compared in finding smallest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nValue two to be compared in finding smallest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;\n\n\n\n\nmin(123.67d, 91) returns 91.\n\n\n\noct \n(Function)\n\n\nConverts p1 to octal.\n\n\n\nSyntax\n\n\nSTRING\n math:oct(\nINT|LONG\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose octal representation should be found.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\noct(99l) returns \"143\".\n\n\n\nparseDouble \n(Function)\n\n\nReturns str as a double.\n\n\n\nSyntax\n\n\nDOUBLE\n math:parseDouble(\nSTRING\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a double\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\nparseDouble(\"123\") returns 123.0.\n\n\n\nparseFloat \n(Function)\n\n\nReturns str as a float.\n\n\n\nSyntax\n\n\nFLOAT\n math:parseFloat(\nSTRING\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a float\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\nparseFloat(\"123\") returns 123.0.\n\n\n\nparseInt \n(Function)\n\n\nReturns str as a int.\n\n\n\nSyntax\n\n\nINT\n math:parseInt(\nSTRING\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a int\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\nparseInt(\"123\") returns 123.\n\n\n\nparseLong \n(Function)\n\n\nReturns str as a long.\n\n\n\nSyntax\n\n\nLONG\n math:parseLong(\nSTRING\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a long\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\nparseLong(\"123\") returns 123.\n\n\n\npi \n(Function)\n\n\nReturns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter). \n\n\n\nSyntax\n\n\nDOUBLE\n math:pi()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;\n\n\n\n\npi() always returns 3.141592653589793.\n\n\n\npower \n(Function)\n\n\nReturns value raised to the power of toPower.\n\n\n\nSyntax\n\n\nDOUBLE\n math:power(\nINT|LONG|FLOAT|DOUBLE\n value, \nINT|LONG|FLOAT|DOUBLE\n to.power)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value that should be raised to the power of 'to.power' input parameter\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.power\n\n        \nThe power that 'value' input parameter should be raised to\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;\n\n\n\n\npower(5.6d, 3.0d) returns 175.61599999999996.\n\n\n\nrand \n(Function)\n\n\n1.  A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally.\n2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. \n\n\n\nSyntax\n\n\nDOUBLE\n math:rand(\nINT|LONG\n seed)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nseed\n\n        \nAn optional seed value that will be used to generate the random number sequence\n\n        \ndefaultSeed\n\n        \nINT\nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\nA random double value between 0 and 1 will be generated using math:rand()\n\n\n\nround \n(Function)\n\n\nReturns the closest integer/long (depending on the input) value to the argument.\n\n\n\nSyntax\n\n\nINT|LONG\n math:round(\nFLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be rounded to the closest integer/long.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;\n\n\n\n\nround(3252.353) returns 3252.\n\n\n\nsignum \n(Function)\n\n\nIf a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function.\n\n\n\nSyntax\n\n\nINT\n math:signum(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if positive or negative or otherwise\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;\n\n\n\n\nsignum(-6.32d) returns -1.\n\n\n\nsin \n(Function)\n\n\nReturns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sin(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose sine value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;\n\n\n\n\nsin(6d) returns -0.27941549819892586.\n\n\n\nsinh \n(Function)\n\n\nReturns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function. \n\n\n\nSyntax\n\n\nDOUBLE\n math:sinh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic sine value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;\n\n\n\n\nsinh(6d) returns 201.71315737027922.\n\n\n\nsqrt \n(Function)\n\n\nReturns the square-root of p1. This function wraps the java.lang.Math.sqrt() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sqrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose square-root value should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;\n\n\n\n\nsqrt(4d) returns 2.\n\n\n\ntan \n(Function)\n\n\nReturns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tan(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose tan value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;\n\n\n\n\ntan(6d) returns -0.29100619138474915.\n\n\n\ntanh \n(Function)\n\n\nReturns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tanh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic tangent value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;\n\n\n\n\ntanh(6d) returns 0.9999877116507956.\n\n\n\ntoDegrees \n(Function)\n\n\nConverts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toDegrees(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe radians value that should be converted to degrees\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;\n\n\n\n\ntoDegrees(6d) returns 343.77467707849394.\n\n\n\ntoRadians \n(Function)\n\n\nConverts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toRadians(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe degrees value that should be converted to radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;\n\n\n\n\ntoRadians(6d) returns 0.10471975511965977.", 
            "title": "4.0.9"
        }, 
        {
            "location": "/api/4.0.9/#api-docs-v409", 
            "text": "", 
            "title": "API Docs - v4.0.9"
        }, 
        {
            "location": "/api/4.0.9/#math", 
            "text": "", 
            "title": "Math"
        }, 
        {
            "location": "/api/4.0.9/#percentile-aggregate-function", 
            "text": "Returns the pth percentile value of the arg values.  Syntax  DOUBLE  math:percentile( INT|LONG|FLOAT|DOUBLE  arg,  DOUBLE  p)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The values of which the percentile should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p \n         Estimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100 \n         \n         DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;  math:percentile(temperature, 97.0)", 
            "title": "percentile (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.9/#abs-function", 
            "text": "Returns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function.  Syntax  DOUBLE  math:abs( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the absolute value should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;  Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.", 
            "title": "abs (Function)"
        }, 
        {
            "location": "/api/4.0.9/#acos-function", 
            "text": "If -1  = p1  = 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function.  Syntax  DOUBLE  math:acos( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-cosine (inverse cosine) should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;  acos(0.5) returns 1.0471975511965979.", 
            "title": "acos (Function)"
        }, 
        {
            "location": "/api/4.0.9/#asin-function", 
            "text": "If -1  = p1  = 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function.  Syntax  DOUBLE  math:asin( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-sin (inverse sine) should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;  asin(0.5) returns 0.5235987755982989.", 
            "title": "asin (Function)"
        }, 
        {
            "location": "/api/4.0.9/#atan-function", 
            "text": "1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function. 2. Returns the arc-tangent (inverse tangent) of  p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function.  Syntax  DOUBLE  math:atan( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p1 \n         This optional parameter represents the y coordinate of the (x,y) coordinate pair \n         0D \n         INT LONG FLOAT DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;  atan(12d, 5d) returns 1.1760052070951352.", 
            "title": "atan (Function)"
        }, 
        {
            "location": "/api/4.0.9/#bin-function", 
            "text": "Returns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods.  Syntax  STRING  math:bin( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to an unsigned integer of base 2 \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;  bin(9) returns \"1001\".", 
            "title": "bin (Function)"
        }, 
        {
            "location": "/api/4.0.9/#cbrt-function", 
            "text": "Returns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function.  Syntax  DOUBLE  math:cbrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose cube-root should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;  cbrt(17d) returns 2.5712815906582356.", 
            "title": "cbrt (Function)"
        }, 
        {
            "location": "/api/4.0.9/#ceil-function", 
            "text": "Returns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method.  Syntax  DOUBLE  math:ceil( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose ceiling value should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;  ceil(423.187d) returns 424.0.", 
            "title": "ceil (Function)"
        }, 
        {
            "location": "/api/4.0.9/#conv-function", 
            "text": "Converts a from the fromBase base to the toBase base.  Syntax  STRING  math:conv( STRING  a,  INT  from.base,  INT  to.base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         a \n         The value whose base should be changed. Input should be as a String \n         \n         STRING \n         No \n         No \n     \n     \n         from.base \n         The source base of the input parameter 'a' \n         \n         INT \n         No \n         No \n     \n     \n         to.base \n         The target base that input parameter 'a' should be converted to \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;  conv(\"7f\", 16, 10) returns \"127\".", 
            "title": "conv (Function)"
        }, 
        {
            "location": "/api/4.0.9/#copysign-function", 
            "text": "Returns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function.  Syntax  DOUBLE  math:copySign( INT|LONG|FLOAT|DOUBLE  magnitude,  INT|LONG|FLOAT|DOUBLE  sign)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         magnitude \n         This parameters magnitude will be used for output attribute \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         sign \n         This parameters sign will be used for output attribute \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;  copySign(5.6d, -3.0d) returns -5.6.", 
            "title": "copySign (Function)"
        }, 
        {
            "location": "/api/4.0.9/#cos-function", 
            "text": "Returns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function.  Syntax  DOUBLE  math:cos( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose cosine value should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;  cos(6d) returns 0.9601702866503661.", 
            "title": "cos (Function)"
        }, 
        {
            "location": "/api/4.0.9/#cosh-function", 
            "text": "Returns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function.  Syntax  DOUBLE  math:cosh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic cosine should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;  cosh (6d) returns 201.7156361224559.", 
            "title": "cosh (Function)"
        }, 
        {
            "location": "/api/4.0.9/#e-function", 
            "text": "Returns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms).  Syntax  DOUBLE  math:e()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;  e() returns 2.7182818284590452354.", 
            "title": "e (Function)"
        }, 
        {
            "location": "/api/4.0.9/#exp-function", 
            "text": "Returns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function.  Syntax  DOUBLE  math:exp( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The power that the Euler's number e should be raised to \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;  exp(10.23) returns 27722.51006805505.", 
            "title": "exp (Function)"
        }, 
        {
            "location": "/api/4.0.9/#floor-function", 
            "text": "This function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer.  Syntax  DOUBLE  math:floor( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose floor value should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;  floor(10.23) returns 10.0.", 
            "title": "floor (Function)"
        }, 
        {
            "location": "/api/4.0.9/#getexponent-function", 
            "text": "Returns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function.  Syntax  INT  math:getExponent( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose unbiased exponent representation should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;  getExponent(60984.1) returns 15.", 
            "title": "getExponent (Function)"
        }, 
        {
            "location": "/api/4.0.9/#hex-function", 
            "text": "This function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1.  Syntax  STRING  math:hex( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hexadecimal representation should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;  hex(200) returns \"c8\".", 
            "title": "hex (Function)"
        }, 
        {
            "location": "/api/4.0.9/#isinfinite-function", 
            "text": "This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise.  Syntax  BOOL  math:isInfinite( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if infinite \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;  isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.", 
            "title": "isInfinite (Function)"
        }, 
        {
            "location": "/api/4.0.9/#isnan-function", 
            "text": "This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise.  Syntax  BOOL  math:isNan( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if it is a number \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;  isNan(java.lang.Math.log(-12d)) returns true.", 
            "title": "isNan (Function)"
        }, 
        {
            "location": "/api/4.0.9/#ln-function", 
            "text": "Returns the natural logarithm (base e) of p1.  Syntax  DOUBLE  math:ln( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose natural logarithm (base e) should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;  ln(11.453) returns 2.438251704415579.", 
            "title": "ln (Function)"
        }, 
        {
            "location": "/api/4.0.9/#log-function", 
            "text": "Returns the logarithm (base=base) of number.  Syntax  DOUBLE  math:log( INT|LONG|FLOAT|DOUBLE  number,  INT|LONG|FLOAT|DOUBLE  base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         number \n         The value of whose base should be changed \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         base \n         The base value of the ouput \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;  log(34, 2f) returns 5.08746284125034.", 
            "title": "log (Function)"
        }, 
        {
            "location": "/api/4.0.9/#log10-function", 
            "text": "Returns the base 10 logarithm of p1.  Syntax  DOUBLE  math:log10( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose base 10 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;  log10(19.234) returns 1.2840696117100832.", 
            "title": "log10 (Function)"
        }, 
        {
            "location": "/api/4.0.9/#log2-function", 
            "text": "Returns the base 2 logarithm of p1.  Syntax  DOUBLE  math:log2( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose base 2 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;  log2(91d) returns 6.507794640198696.", 
            "title": "log2 (Function)"
        }, 
        {
            "location": "/api/4.0.9/#max-function", 
            "text": "Returns the greater value out of p1 and p2.  Syntax  DOUBLE  math:max( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         Value one to be compared in finding largest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         Value two to be compared in finding largest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;  max(123.67d, 91) returns 123.67.", 
            "title": "max (Function)"
        }, 
        {
            "location": "/api/4.0.9/#min-function", 
            "text": "Returns the smaller value out of p1 and p2.  Syntax  DOUBLE  math:min( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         Value one to be compared in finding smallest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         Value two to be compared in finding smallest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;  min(123.67d, 91) returns 91.", 
            "title": "min (Function)"
        }, 
        {
            "location": "/api/4.0.9/#oct-function", 
            "text": "Converts p1 to octal.  Syntax  STRING  math:oct( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose octal representation should be found. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  oct(99l) returns \"143\".", 
            "title": "oct (Function)"
        }, 
        {
            "location": "/api/4.0.9/#parsedouble-function", 
            "text": "Returns str as a double.  Syntax  DOUBLE  math:parseDouble( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a double \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;  parseDouble(\"123\") returns 123.0.", 
            "title": "parseDouble (Function)"
        }, 
        {
            "location": "/api/4.0.9/#parsefloat-function", 
            "text": "Returns str as a float.  Syntax  FLOAT  math:parseFloat( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a float \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;  parseFloat(\"123\") returns 123.0.", 
            "title": "parseFloat (Function)"
        }, 
        {
            "location": "/api/4.0.9/#parseint-function", 
            "text": "Returns str as a int.  Syntax  INT  math:parseInt( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a int \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;  parseInt(\"123\") returns 123.", 
            "title": "parseInt (Function)"
        }, 
        {
            "location": "/api/4.0.9/#parselong-function", 
            "text": "Returns str as a long.  Syntax  LONG  math:parseLong( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a long \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;  parseLong(\"123\") returns 123.", 
            "title": "parseLong (Function)"
        }, 
        {
            "location": "/api/4.0.9/#pi-function", 
            "text": "Returns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter).   Syntax  DOUBLE  math:pi()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;  pi() always returns 3.141592653589793.", 
            "title": "pi (Function)"
        }, 
        {
            "location": "/api/4.0.9/#power-function", 
            "text": "Returns value raised to the power of toPower.  Syntax  DOUBLE  math:power( INT|LONG|FLOAT|DOUBLE  value,  INT|LONG|FLOAT|DOUBLE  to.power)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value that should be raised to the power of 'to.power' input parameter \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         to.power \n         The power that 'value' input parameter should be raised to \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;  power(5.6d, 3.0d) returns 175.61599999999996.", 
            "title": "power (Function)"
        }, 
        {
            "location": "/api/4.0.9/#rand-function", 
            "text": "1.  A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. 2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally.   Syntax  DOUBLE  math:rand( INT|LONG  seed)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         seed \n         An optional seed value that will be used to generate the random number sequence \n         defaultSeed \n         INT LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  A random double value between 0 and 1 will be generated using math:rand()", 
            "title": "rand (Function)"
        }, 
        {
            "location": "/api/4.0.9/#round-function", 
            "text": "Returns the closest integer/long (depending on the input) value to the argument.  Syntax  INT|LONG  math:round( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be rounded to the closest integer/long. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;  round(3252.353) returns 3252.", 
            "title": "round (Function)"
        }, 
        {
            "location": "/api/4.0.9/#signum-function", 
            "text": "If a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function.  Syntax  INT  math:signum( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if positive or negative or otherwise \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;  signum(-6.32d) returns -1.", 
            "title": "signum (Function)"
        }, 
        {
            "location": "/api/4.0.9/#sin-function", 
            "text": "Returns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function.  Syntax  DOUBLE  math:sin( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose sine value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;  sin(6d) returns -0.27941549819892586.", 
            "title": "sin (Function)"
        }, 
        {
            "location": "/api/4.0.9/#sinh-function", 
            "text": "Returns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function.   Syntax  DOUBLE  math:sinh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic sine value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;  sinh(6d) returns 201.71315737027922.", 
            "title": "sinh (Function)"
        }, 
        {
            "location": "/api/4.0.9/#sqrt-function", 
            "text": "Returns the square-root of p1. This function wraps the java.lang.Math.sqrt() function.  Syntax  DOUBLE  math:sqrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose square-root value should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;  sqrt(4d) returns 2.", 
            "title": "sqrt (Function)"
        }, 
        {
            "location": "/api/4.0.9/#tan-function", 
            "text": "Returns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function.  Syntax  DOUBLE  math:tan( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose tan value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;  tan(6d) returns -0.29100619138474915.", 
            "title": "tan (Function)"
        }, 
        {
            "location": "/api/4.0.9/#tanh-function", 
            "text": "Returns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function.  Syntax  DOUBLE  math:tanh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic tangent value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;  tanh(6d) returns 0.9999877116507956.", 
            "title": "tanh (Function)"
        }, 
        {
            "location": "/api/4.0.9/#todegrees-function", 
            "text": "Converts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function.  Syntax  DOUBLE  math:toDegrees( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The radians value that should be converted to degrees \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;  toDegrees(6d) returns 343.77467707849394.", 
            "title": "toDegrees (Function)"
        }, 
        {
            "location": "/api/4.0.9/#toradians-function", 
            "text": "Converts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function.  Syntax  DOUBLE  math:toRadians( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The degrees value that should be converted to radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;  toRadians(6d) returns 0.10471975511965977.", 
            "title": "toRadians (Function)"
        }, 
        {
            "location": "/api/latest/", 
            "text": "API Docs - v4.0.12\n\n\nMath\n\n\npercentile \n(Aggregate Function)\n\n\nReturns the pth percentile value of the arg values.\n\n\n\nSyntax\n\n\nDOUBLE\n math:percentile(\nINT|LONG|FLOAT|DOUBLE\n arg, \nDOUBLE\n p)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe values of which the percentile should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np\n\n        \nEstimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;\n\n\n\n\nmath:percentile(temperature, 97.0)\n\n\n\nabs \n(Function)\n\n\nReturns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:abs(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the absolute value should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;\n\n\n\n\nBoth abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.\n\n\n\nacos \n(Function)\n\n\nIf -1 \n= p1 \n= 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:acos(\nFLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-cosine (inverse cosine) should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;\n\n\n\n\nacos(0.5) returns 1.0471975511965979.\n\n\n\nasin \n(Function)\n\n\nIf -1 \n= p1 \n= 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:asin(\nFLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-sin (inverse sine) should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;\n\n\n\n\nasin(0.5) returns 0.5235987755982989.\n\n\n\natan \n(Function)\n\n\n1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function.\n2. Returns the arc-tangent (inverse tangent) of  p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:atan(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np1\n\n        \nThis optional parameter represents the y coordinate of the (x,y) coordinate pair\n\n        \n0D\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\natan(12d, 5d) returns 1.1760052070951352.\n\n\n\nbin \n(Function)\n\n\nReturns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods.\n\n\n\nSyntax\n\n\nSTRING\n math:bin(\nINT|LONG\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to an unsigned integer of base 2\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;\n\n\n\n\nbin(9) returns \"1001\".\n\n\n\ncbrt \n(Function)\n\n\nReturns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cbrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose cube-root should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;\n\n\n\n\ncbrt(17d) returns 2.5712815906582356.\n\n\n\nceil \n(Function)\n\n\nReturns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ceil(\nFLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose ceiling value should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;\n\n\n\n\nceil(423.187d) returns 424.0.\n\n\n\nconv \n(Function)\n\n\nConverts a from the fromBase base to the toBase base.\n\n\n\nSyntax\n\n\nSTRING\n math:conv(\nSTRING\n a, \nINT\n from.base, \nINT\n to.base)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \na\n\n        \nThe value whose base should be changed. Input should be as a String\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfrom.base\n\n        \nThe source base of the input parameter 'a'\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.base\n\n        \nThe target base that input parameter 'a' should be converted to\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\nconv(\"7f\", 16, 10) returns \"127\".\n\n\n\ncopySign \n(Function)\n\n\nReturns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:copySign(\nINT|LONG|FLOAT|DOUBLE\n magnitude, \nINT|LONG|FLOAT|DOUBLE\n sign)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmagnitude\n\n        \nThis parameters magnitude will be used for output attribute\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsign\n\n        \nThis parameters sign will be used for output attribute\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;\n\n\n\n\ncopySign(5.6d, -3.0d) returns -5.6.\n\n\n\ncos \n(Function)\n\n\nReturns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cos(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose cosine value should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\ncos(6d) returns 0.9601702866503661.\n\n\n\ncosh \n(Function)\n\n\nReturns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cosh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic cosine should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\ncosh (6d) returns 201.7156361224559.\n\n\n\ne \n(Function)\n\n\nReturns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms).\n\n\n\nSyntax\n\n\nDOUBLE\n math:e()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;\n\n\n\n\ne() returns 2.7182818284590452354.\n\n\n\nexp \n(Function)\n\n\nReturns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:exp(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe power that the Euler's number e should be raised to\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\nexp(10.23) returns 27722.51006805505.\n\n\n\nfloor \n(Function)\n\n\nThis function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer.\n\n\n\nSyntax\n\n\nDOUBLE\n math:floor(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose floor value should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;\n\n\n\n\nfloor(10.23) returns 10.0.\n\n\n\ngetExponent \n(Function)\n\n\nReturns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function.\n\n\n\nSyntax\n\n\nINT\n math:getExponent(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose unbiased exponent representation should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\ngetExponent(60984.1) returns 15.\n\n\n\nhex \n(Function)\n\n\nThis function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1.\n\n\n\nSyntax\n\n\nSTRING\n math:hex(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hexadecimal representation should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;\n\n\n\n\nhex(200) returns \"c8\".\n\n\n\nisInfinite \n(Function)\n\n\nThis function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isInfinite(\nFLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if infinite\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;\n\n\n\n\nisInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.\n\n\n\nisNan \n(Function)\n\n\nThis function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isNan(\nFLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if it is a number\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;\n\n\n\n\nisNan(java.lang.Math.log(-12d)) returns true.\n\n\n\nln \n(Function)\n\n\nReturns the natural logarithm (base e) of p1.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ln(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose natural logarithm (base e) should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\nln(11.453) returns 2.438251704415579.\n\n\n\nlog \n(Function)\n\n\nReturns the logarithm (base=base) of number.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log(\nINT|LONG|FLOAT|DOUBLE\n number, \nINT|LONG|FLOAT|DOUBLE\n base)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nnumber\n\n        \nThe value of whose base should be changed\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbase\n\n        \nThe base value of the ouput\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;\n\n\n\n\nlog(34, 2f) returns 5.08746284125034.\n\n\n\nlog10 \n(Function)\n\n\nReturns the base 10 logarithm of p1.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log10(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose base 10 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\nlog10(19.234) returns 1.2840696117100832.\n\n\n\nlog2 \n(Function)\n\n\nReturns the base 2 logarithm of p1.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log2(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose base 2 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\nlog2(91d) returns 6.507794640198696.\n\n\n\nmax \n(Function)\n\n\nReturns the greater value out of p1 and p2.\n\n\n\nSyntax\n\n\nDOUBLE\n math:max(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nValue one to be compared in finding largest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nValue two to be compared in finding largest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;\n\n\n\n\nmax(123.67d, 91) returns 123.67.\n\n\n\nmin \n(Function)\n\n\nReturns the smaller value out of p1 and p2.\n\n\n\nSyntax\n\n\nDOUBLE\n math:min(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nValue one to be compared in finding smallest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nValue two to be compared in finding smallest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;\n\n\n\n\nmin(123.67d, 91) returns 91.\n\n\n\noct \n(Function)\n\n\nConverts p1 to octal.\n\n\n\nSyntax\n\n\nSTRING\n math:oct(\nINT|LONG\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose octal representation should be found.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\noct(99l) returns \"143\".\n\n\n\nparseDouble \n(Function)\n\n\nReturns str as a double.\n\n\n\nSyntax\n\n\nDOUBLE\n math:parseDouble(\nSTRING\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a double\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\nparseDouble(\"123\") returns 123.0.\n\n\n\nparseFloat \n(Function)\n\n\nReturns str as a float.\n\n\n\nSyntax\n\n\nFLOAT\n math:parseFloat(\nSTRING\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a float\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\nparseFloat(\"123\") returns 123.0.\n\n\n\nparseInt \n(Function)\n\n\nReturns str as a int.\n\n\n\nSyntax\n\n\nINT\n math:parseInt(\nSTRING\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a int\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\nparseInt(\"123\") returns 123.\n\n\n\nparseLong \n(Function)\n\n\nReturns str as a long.\n\n\n\nSyntax\n\n\nLONG\n math:parseLong(\nSTRING\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a long\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\nparseLong(\"123\") returns 123.\n\n\n\npi \n(Function)\n\n\nReturns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter). \n\n\n\nSyntax\n\n\nDOUBLE\n math:pi()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;\n\n\n\n\npi() always returns 3.141592653589793.\n\n\n\npower \n(Function)\n\n\nReturns value raised to the power of toPower.\n\n\n\nSyntax\n\n\nDOUBLE\n math:power(\nINT|LONG|FLOAT|DOUBLE\n value, \nINT|LONG|FLOAT|DOUBLE\n to.power)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value that should be raised to the power of 'to.power' input parameter\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.power\n\n        \nThe power that 'value' input parameter should be raised to\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;\n\n\n\n\npower(5.6d, 3.0d) returns 175.61599999999996.\n\n\n\nrand \n(Function)\n\n\n1.  A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally.\n2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. \n\n\n\nSyntax\n\n\nDOUBLE\n math:rand(\nINT|LONG\n seed)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nseed\n\n        \nAn optional seed value that will be used to generate the random number sequence\n\n        \ndefaultSeed\n\n        \nINT\nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\nA random double value between 0 and 1 will be generated using math:rand()\n\n\n\nround \n(Function)\n\n\nReturns the closest integer/long (depending on the input) value to the argument.\n\n\n\nSyntax\n\n\nINT|LONG\n math:round(\nFLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be rounded to the closest integer/long.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;\n\n\n\n\nround(3252.353) returns 3252.\n\n\n\nsignum \n(Function)\n\n\nIf a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function.\n\n\n\nSyntax\n\n\nINT\n math:signum(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if positive or negative or otherwise\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;\n\n\n\n\nsignum(-6.32d) returns -1.\n\n\n\nsin \n(Function)\n\n\nReturns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sin(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose sine value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;\n\n\n\n\nsin(6d) returns -0.27941549819892586.\n\n\n\nsinh \n(Function)\n\n\nReturns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function. \n\n\n\nSyntax\n\n\nDOUBLE\n math:sinh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic sine value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;\n\n\n\n\nsinh(6d) returns 201.71315737027922.\n\n\n\nsqrt \n(Function)\n\n\nReturns the square-root of p1. This function wraps the java.lang.Math.sqrt() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sqrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose square-root value should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;\n\n\n\n\nsqrt(4d) returns 2.\n\n\n\ntan \n(Function)\n\n\nReturns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tan(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose tan value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;\n\n\n\n\ntan(6d) returns -0.29100619138474915.\n\n\n\ntanh \n(Function)\n\n\nReturns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tanh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic tangent value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;\n\n\n\n\ntanh(6d) returns 0.9999877116507956.\n\n\n\ntoDegrees \n(Function)\n\n\nConverts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toDegrees(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe radians value that should be converted to degrees\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;\n\n\n\n\ntoDegrees(6d) returns 343.77467707849394.\n\n\n\ntoRadians \n(Function)\n\n\nConverts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toRadians(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe degrees value that should be converted to radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;\n\n\n\n\ntoRadians(6d) returns 0.10471975511965977.", 
            "title": "latest"
        }, 
        {
            "location": "/api/latest/#api-docs-v4012", 
            "text": "", 
            "title": "API Docs - v4.0.12"
        }, 
        {
            "location": "/api/latest/#math", 
            "text": "", 
            "title": "Math"
        }, 
        {
            "location": "/api/latest/#percentile-aggregate-function", 
            "text": "Returns the pth percentile value of the arg values.  Syntax  DOUBLE  math:percentile( INT|LONG|FLOAT|DOUBLE  arg,  DOUBLE  p)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The values of which the percentile should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p \n         Estimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100 \n         \n         DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;  math:percentile(temperature, 97.0)", 
            "title": "percentile (Aggregate Function)"
        }, 
        {
            "location": "/api/latest/#abs-function", 
            "text": "Returns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function.  Syntax  DOUBLE  math:abs( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the absolute value should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;  Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.", 
            "title": "abs (Function)"
        }, 
        {
            "location": "/api/latest/#acos-function", 
            "text": "If -1  = p1  = 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function.  Syntax  DOUBLE  math:acos( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-cosine (inverse cosine) should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;  acos(0.5) returns 1.0471975511965979.", 
            "title": "acos (Function)"
        }, 
        {
            "location": "/api/latest/#asin-function", 
            "text": "If -1  = p1  = 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function.  Syntax  DOUBLE  math:asin( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-sin (inverse sine) should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;  asin(0.5) returns 0.5235987755982989.", 
            "title": "asin (Function)"
        }, 
        {
            "location": "/api/latest/#atan-function", 
            "text": "1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function. 2. Returns the arc-tangent (inverse tangent) of  p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function.  Syntax  DOUBLE  math:atan( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p1 \n         This optional parameter represents the y coordinate of the (x,y) coordinate pair \n         0D \n         INT LONG FLOAT DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;  atan(12d, 5d) returns 1.1760052070951352.", 
            "title": "atan (Function)"
        }, 
        {
            "location": "/api/latest/#bin-function", 
            "text": "Returns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods.  Syntax  STRING  math:bin( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to an unsigned integer of base 2 \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;  bin(9) returns \"1001\".", 
            "title": "bin (Function)"
        }, 
        {
            "location": "/api/latest/#cbrt-function", 
            "text": "Returns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function.  Syntax  DOUBLE  math:cbrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose cube-root should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;  cbrt(17d) returns 2.5712815906582356.", 
            "title": "cbrt (Function)"
        }, 
        {
            "location": "/api/latest/#ceil-function", 
            "text": "Returns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method.  Syntax  DOUBLE  math:ceil( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose ceiling value should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;  ceil(423.187d) returns 424.0.", 
            "title": "ceil (Function)"
        }, 
        {
            "location": "/api/latest/#conv-function", 
            "text": "Converts a from the fromBase base to the toBase base.  Syntax  STRING  math:conv( STRING  a,  INT  from.base,  INT  to.base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         a \n         The value whose base should be changed. Input should be as a String \n         \n         STRING \n         No \n         No \n     \n     \n         from.base \n         The source base of the input parameter 'a' \n         \n         INT \n         No \n         No \n     \n     \n         to.base \n         The target base that input parameter 'a' should be converted to \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;  conv(\"7f\", 16, 10) returns \"127\".", 
            "title": "conv (Function)"
        }, 
        {
            "location": "/api/latest/#copysign-function", 
            "text": "Returns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function.  Syntax  DOUBLE  math:copySign( INT|LONG|FLOAT|DOUBLE  magnitude,  INT|LONG|FLOAT|DOUBLE  sign)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         magnitude \n         This parameters magnitude will be used for output attribute \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         sign \n         This parameters sign will be used for output attribute \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;  copySign(5.6d, -3.0d) returns -5.6.", 
            "title": "copySign (Function)"
        }, 
        {
            "location": "/api/latest/#cos-function", 
            "text": "Returns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function.  Syntax  DOUBLE  math:cos( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose cosine value should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;  cos(6d) returns 0.9601702866503661.", 
            "title": "cos (Function)"
        }, 
        {
            "location": "/api/latest/#cosh-function", 
            "text": "Returns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function.  Syntax  DOUBLE  math:cosh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic cosine should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;  cosh (6d) returns 201.7156361224559.", 
            "title": "cosh (Function)"
        }, 
        {
            "location": "/api/latest/#e-function", 
            "text": "Returns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms).  Syntax  DOUBLE  math:e()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;  e() returns 2.7182818284590452354.", 
            "title": "e (Function)"
        }, 
        {
            "location": "/api/latest/#exp-function", 
            "text": "Returns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function.  Syntax  DOUBLE  math:exp( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The power that the Euler's number e should be raised to \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;  exp(10.23) returns 27722.51006805505.", 
            "title": "exp (Function)"
        }, 
        {
            "location": "/api/latest/#floor-function", 
            "text": "This function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer.  Syntax  DOUBLE  math:floor( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose floor value should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;  floor(10.23) returns 10.0.", 
            "title": "floor (Function)"
        }, 
        {
            "location": "/api/latest/#getexponent-function", 
            "text": "Returns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function.  Syntax  INT  math:getExponent( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose unbiased exponent representation should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;  getExponent(60984.1) returns 15.", 
            "title": "getExponent (Function)"
        }, 
        {
            "location": "/api/latest/#hex-function", 
            "text": "This function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1.  Syntax  STRING  math:hex( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hexadecimal representation should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;  hex(200) returns \"c8\".", 
            "title": "hex (Function)"
        }, 
        {
            "location": "/api/latest/#isinfinite-function", 
            "text": "This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise.  Syntax  BOOL  math:isInfinite( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if infinite \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;  isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.", 
            "title": "isInfinite (Function)"
        }, 
        {
            "location": "/api/latest/#isnan-function", 
            "text": "This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise.  Syntax  BOOL  math:isNan( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if it is a number \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;  isNan(java.lang.Math.log(-12d)) returns true.", 
            "title": "isNan (Function)"
        }, 
        {
            "location": "/api/latest/#ln-function", 
            "text": "Returns the natural logarithm (base e) of p1.  Syntax  DOUBLE  math:ln( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose natural logarithm (base e) should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;  ln(11.453) returns 2.438251704415579.", 
            "title": "ln (Function)"
        }, 
        {
            "location": "/api/latest/#log-function", 
            "text": "Returns the logarithm (base=base) of number.  Syntax  DOUBLE  math:log( INT|LONG|FLOAT|DOUBLE  number,  INT|LONG|FLOAT|DOUBLE  base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         number \n         The value of whose base should be changed \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         base \n         The base value of the ouput \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;  log(34, 2f) returns 5.08746284125034.", 
            "title": "log (Function)"
        }, 
        {
            "location": "/api/latest/#log10-function", 
            "text": "Returns the base 10 logarithm of p1.  Syntax  DOUBLE  math:log10( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose base 10 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;  log10(19.234) returns 1.2840696117100832.", 
            "title": "log10 (Function)"
        }, 
        {
            "location": "/api/latest/#log2-function", 
            "text": "Returns the base 2 logarithm of p1.  Syntax  DOUBLE  math:log2( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose base 2 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;  log2(91d) returns 6.507794640198696.", 
            "title": "log2 (Function)"
        }, 
        {
            "location": "/api/latest/#max-function", 
            "text": "Returns the greater value out of p1 and p2.  Syntax  DOUBLE  math:max( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         Value one to be compared in finding largest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         Value two to be compared in finding largest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;  max(123.67d, 91) returns 123.67.", 
            "title": "max (Function)"
        }, 
        {
            "location": "/api/latest/#min-function", 
            "text": "Returns the smaller value out of p1 and p2.  Syntax  DOUBLE  math:min( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         Value one to be compared in finding smallest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         Value two to be compared in finding smallest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;  min(123.67d, 91) returns 91.", 
            "title": "min (Function)"
        }, 
        {
            "location": "/api/latest/#oct-function", 
            "text": "Converts p1 to octal.  Syntax  STRING  math:oct( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose octal representation should be found. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  oct(99l) returns \"143\".", 
            "title": "oct (Function)"
        }, 
        {
            "location": "/api/latest/#parsedouble-function", 
            "text": "Returns str as a double.  Syntax  DOUBLE  math:parseDouble( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a double \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;  parseDouble(\"123\") returns 123.0.", 
            "title": "parseDouble (Function)"
        }, 
        {
            "location": "/api/latest/#parsefloat-function", 
            "text": "Returns str as a float.  Syntax  FLOAT  math:parseFloat( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a float \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;  parseFloat(\"123\") returns 123.0.", 
            "title": "parseFloat (Function)"
        }, 
        {
            "location": "/api/latest/#parseint-function", 
            "text": "Returns str as a int.  Syntax  INT  math:parseInt( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a int \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;  parseInt(\"123\") returns 123.", 
            "title": "parseInt (Function)"
        }, 
        {
            "location": "/api/latest/#parselong-function", 
            "text": "Returns str as a long.  Syntax  LONG  math:parseLong( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a long \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;  parseLong(\"123\") returns 123.", 
            "title": "parseLong (Function)"
        }, 
        {
            "location": "/api/latest/#pi-function", 
            "text": "Returns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter).   Syntax  DOUBLE  math:pi()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;  pi() always returns 3.141592653589793.", 
            "title": "pi (Function)"
        }, 
        {
            "location": "/api/latest/#power-function", 
            "text": "Returns value raised to the power of toPower.  Syntax  DOUBLE  math:power( INT|LONG|FLOAT|DOUBLE  value,  INT|LONG|FLOAT|DOUBLE  to.power)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value that should be raised to the power of 'to.power' input parameter \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         to.power \n         The power that 'value' input parameter should be raised to \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;  power(5.6d, 3.0d) returns 175.61599999999996.", 
            "title": "power (Function)"
        }, 
        {
            "location": "/api/latest/#rand-function", 
            "text": "1.  A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. 2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally.   Syntax  DOUBLE  math:rand( INT|LONG  seed)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         seed \n         An optional seed value that will be used to generate the random number sequence \n         defaultSeed \n         INT LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  A random double value between 0 and 1 will be generated using math:rand()", 
            "title": "rand (Function)"
        }, 
        {
            "location": "/api/latest/#round-function", 
            "text": "Returns the closest integer/long (depending on the input) value to the argument.  Syntax  INT|LONG  math:round( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be rounded to the closest integer/long. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;  round(3252.353) returns 3252.", 
            "title": "round (Function)"
        }, 
        {
            "location": "/api/latest/#signum-function", 
            "text": "If a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function.  Syntax  INT  math:signum( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if positive or negative or otherwise \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;  signum(-6.32d) returns -1.", 
            "title": "signum (Function)"
        }, 
        {
            "location": "/api/latest/#sin-function", 
            "text": "Returns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function.  Syntax  DOUBLE  math:sin( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose sine value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;  sin(6d) returns -0.27941549819892586.", 
            "title": "sin (Function)"
        }, 
        {
            "location": "/api/latest/#sinh-function", 
            "text": "Returns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function.   Syntax  DOUBLE  math:sinh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic sine value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;  sinh(6d) returns 201.71315737027922.", 
            "title": "sinh (Function)"
        }, 
        {
            "location": "/api/latest/#sqrt-function", 
            "text": "Returns the square-root of p1. This function wraps the java.lang.Math.sqrt() function.  Syntax  DOUBLE  math:sqrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose square-root value should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;  sqrt(4d) returns 2.", 
            "title": "sqrt (Function)"
        }, 
        {
            "location": "/api/latest/#tan-function", 
            "text": "Returns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function.  Syntax  DOUBLE  math:tan( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose tan value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;  tan(6d) returns -0.29100619138474915.", 
            "title": "tan (Function)"
        }, 
        {
            "location": "/api/latest/#tanh-function", 
            "text": "Returns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function.  Syntax  DOUBLE  math:tanh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic tangent value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;  tanh(6d) returns 0.9999877116507956.", 
            "title": "tanh (Function)"
        }, 
        {
            "location": "/api/latest/#todegrees-function", 
            "text": "Converts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function.  Syntax  DOUBLE  math:toDegrees( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The radians value that should be converted to degrees \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;  toDegrees(6d) returns 343.77467707849394.", 
            "title": "toDegrees (Function)"
        }, 
        {
            "location": "/api/latest/#toradians-function", 
            "text": "Converts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function.  Syntax  DOUBLE  math:toRadians( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The degrees value that should be converted to radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;  toRadians(6d) returns 0.10471975511965977.", 
            "title": "toRadians (Function)"
        }, 
        {
            "location": "/license/", 
            "text": "Copyright (c) 2017 WSO2 Inc. (\nhttp://www.wso2.org\n) All Rights Reserved.\n\n\nWSO2 Inc. licenses this file to you under the Apache License,\nVersion 2.0 (the \"License\"); you may not use this file except\nin compliance with the License.\nYou may obtain a copy of the License at\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\n\n-------------------------------------------------------------------------\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \nLicense\n shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \nLicensor\n shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \nLegal Entity\n shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \ncontrol\n means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \nYou\n (or \nYour\n) shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \nSource\n form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \nObject\n form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \nWork\n shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \nDerivative Works\n shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \nContribution\n shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \nsubmitted\n\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \nNot a Contribution.\n\n\n   \nContributor\n shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \nNOTICE\n text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \nAS IS\n BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS", 
            "title": "License"
        }
    ]
}