{
    "docs": [
        {
            "location": "/", 
            "text": "siddhi-execution-math\n\n\nThe \nsiddhi-execution-math\n is an extension to \nSiddhi\n, which provides useful mathematical functions that can make your siddhi queries more \nflexible.\n\n\nFor more information, see:\n\n\n\n\nSource code\n\n\nReleases\n\n\nIssue tracker\n\n\n\n\nLatest API Docs\n\n\nLatest API Docs is \n4.1.1\n.\n\n\nHow to use\n\n\nUsing the extension with \nWSO2 Stream Processor\n\n\n\n\n\n\nYou can use this extension with the latest \nWSO2 Stream Processor\n offering, which supports an\n\neditor, debugger, and simulator. \n\n\n\n\n\n\nBy default, the latest version of this extension is shipped with WSO2 Stream Processor. If you wish to use\n an alternative version of this extension, replace the component \njar\n that is available at the \n \nSTREAM_PROCESSOR_HOME\n/lib\n directory.\n\n\n\n\n\n\nUsing the extension as a \njava library\n\n\n\n\nThis extension can be added as a maven dependency to your project along with other Siddhi dependencies.\n\n\n\n\n     \ndependency\n\n        \ngroupId\norg.wso2.extension.siddhi.execution.math\n/groupId\n\n        \nartifactId\nsiddhi-execution-math\n/artifactId\n\n        \nversion\nx.x.x\n/version\n\n     \n/dependency\n\n\n\n\n\n\nJenkins Build Status\n\n\n\n\n\n\n\n\n\n\nBranch\n\n\nBuild Status\n\n\n\n\n\n\n\n\n\n\nmaster\n\n\n\n\n\n\n\n\n\n\n\n\nFeatures\n\n\n\n\npercentile\n \n(Aggregate Function)\nThis functions returns the pth percentile value of a given argument.\n\n\nabs\n \n(Function)\nThis function returns the absolute value of the given parameter. It wraps the \njava.lang.Math.abs()\n function.\n\n\nacos\n \n(Function)\nIf -1 \n= p1 \n= 1, this function returns the arc-cosine (inverse cosine) value of p1.If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.acos() function.\n\n\nasin\n \n(Function)\nIf -1 \n= p1 \n= 1, this function returns the arc-sin (inverse sine) value of p1. If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.asin() function.\n\n\natan\n \n(Function)\n1. If a single \np1\n is received, this function returns the arc-tangent (inverse tangent) value of \np1\n. \n2. If \np1\n is received along with an optional \np1\n, it considers them as x and y coordinates and returns the arc-tangent (inverse tangent) value. \nThe returned value is in radian scale. This function wraps the \njava.lang.Math.atan()\n function.\n\n\nbin\n \n(Function)\nThis function returns a string representation of the p1 argument, that is of either 'integer' or 'long' data type, as an unsigned integer in base 2. It wraps the \njava.lang.Integer.toBinaryString\n and java.lang.Long.toBinaryString` methods.\n\n\ncbrt\n \n(Function)\nThis function returns the cube-root of 'p1' which is in radians. It wraps the \njava.lang.Math.cbrt()\n function.\n\n\nceil\n \n(Function)\nThis function returns the smallest double value, i.e., the closest to the negative infinity, that is greater than or equal to the \np1\n argument, and is equal to a mathematical integer. It wraps the \njava.lang.Math.ceil()\n method.\n\n\nconv\n \n(Function)\nThis function converts \na\n from the \nfromBase\n base to the \ntoBase\n base.\n\n\ncopySign\n \n(Function)\nThis function returns a value of an input with the received \nmagnitude\n and \nsign\n of another input. It wraps the \njava.lang.Math.copySign()\n function.\n\n\ncos\n \n(Function)\nThis function returns the cosine of \np1\n which is in radians. It wraps the \njava.lang.Math.cos()\n function.\n\n\ncosh\n \n(Function)\nThis function returns the hyperbolic cosine of \np1\n which is in radians. It wraps the \njava.lang.Math.cosh()\n function.\n\n\ne\n \n(Function)\nThis function returns the \njava.lang.Math.E\n constant, which is the closest double value to e, where e is the base of the natural logarithms. \n\n\nexp\n \n(Function)\nThis function returns the Euler's number \ne\n raised to the power of \np1\n. It wraps the \njava.lang.Math.exp()\n function.\n\n\nfloor\n \n(Function)\nThis function wraps the \njava.lang.Math.floor()\n function and returns the largest value, i.e., closest to the positive infinity, that is less than or equal to \np1\n, and is equal to a mathematical integer.\n\n\ngetExponent\n \n(Function)\nThis function returns the unbiased exponent that is used in the representation of \np1\n. This function wraps the \njava.lang.Math.getExponent()\n function.\n\n\nhex\n \n(Function)\nThis function wraps the \njava.lang.Double.toHexString() function. It returns a hexadecimal string representation of the input, \np1`.\n\n\nisInfinite\n \n(Function)\nThis function wraps the \njava.lang.Float.isInfinite()\n and \njava.lang.Double.isInfinite()\n and returns \ntrue\n if \np1\n is infinitely large in magnitude and \nfalse\n if otherwise.\n\n\nisNan\n \n(Function)\nThis function wraps the \njava.lang.Float.isNaN()\n and \njava.lang.Double.isNaN()\n functions and returns \ntrue\n if \np1\n is NaN (Not-a-Number), and returns \nfalse\n if otherwise.\n\n\nln\n \n(Function)\nThis function returns the natural logarithm (base e) of \np1\n.\n\n\nlog\n \n(Function)\nThis function returns the logarithm of the received \nnumber\n as per the given \nbase\n.\n\n\nlog10\n \n(Function)\nThis function returns the base 10 logarithm of \np1\n.\n\n\nlog2\n \n(Function)\nThis function returns the base 2 logarithm of \np1\n.\n\n\nmax\n \n(Function)\nThis function returns the greater value of \np1\n and \np2\n.\n\n\nmin\n \n(Function)\nThis function returns the smaller value of \np1\n and \np2\n.\n\n\noct\n \n(Function)\nThis function converts the input parameter \np1\n to octal.\n\n\nparseDouble\n \n(Function)\nThis function returns the double value of the string received.\n\n\nparseFloat\n \n(Function)\nThis function returns the float value of the received string.\n\n\nparseInt\n \n(Function)\nThis function returns the integer value of the received string.\n\n\nparseLong\n \n(Function)\nThis function returns the long value of the string received.\n\n\npi\n \n(Function)\nThis function returns the \njava.lang.Math.PI\n constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter. \n\n\npower\n \n(Function)\nThis function raises the given value to a given power.\n\n\nrand\n \n(Function)\nThis returns a stream of pseudo-random numbers when a sequence of calls are sent to the \nrand()\n. Optionally, it is possible to define a seed, i.e., \nrand(seed)\n using which the pseudo-random numbers are generated. These functions internally use the \njava.util.Random\n class.\n\n\nround\n \n(Function)\nThis function returns the value of the input argument rounded off to the closest integer/long value.\n\n\nsignum\n \n(Function)\nThis returns +1, 0, or -1 for the given positive, zero and negative values respectively. This function wraps the \njava.lang.Math.signum()\n function.\n\n\nsin\n \n(Function)\nThis returns the sine of the value given in radians. This function wraps the \njava.lang.Math.sin()\n function.\n\n\nsinh\n \n(Function)\nThis returns the hyperbolic sine of the value given in radians. This function wraps the \njava.lang.Math.sinh()\n function. \n\n\nsqrt\n \n(Function)\nThis function returns the square-root of the given value. It wraps the \njava.lang.Math.sqrt()\ns function.\n\n\ntan\n \n(Function)\nThis function returns the tan of the given value in radians. It wraps the \njava.lang.Math.tan()\n function.\n\n\ntanh\n \n(Function)\nThis function returns the hyperbolic tangent of the value given in radians. It wraps the \njava.lang.Math.tanh()\n function.\n\n\ntoDegrees\n \n(Function)\nThis function converts the value given in radians to degrees. It wraps the \njava.lang.Math.toDegrees()\n function.\n\n\ntoRadians\n \n(Function)\nThis function converts the value given in degrees to radians. It wraps the \njava.lang.Math.toRadians()\n function.\n\n\n\n\nHow to Contribute\n\n\n\n\n\n\nPlease report issues at \nGitHub Issue Tracker\n.\n\n\n\n\n\n\nSend your contributions as pull requests to \nmaster branch\n. \n\n\n\n\n\n\nContact us\n\n\n\n\n\n\nPost your questions with the \n\"Siddhi\"\n tag in \nStackoverflow\n. \n\n\n\n\n\n\nSiddhi developers can be contacted via the mailing lists:\n\n\nDevelopers List   : \ndev@wso2.org\n\n\nArchitecture List : \narchitecture@wso2.org\n\n\n\n\n\n\nSupport\n\n\n\n\n\n\nWe are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology. \n\n\n\n\n\n\nFor more details and to take advantage of this unique opportunity contact us via \nhttp://wso2.com/support/\n.", 
            "title": "Welcome"
        }, 
        {
            "location": "/#siddhi-execution-math", 
            "text": "The  siddhi-execution-math  is an extension to  Siddhi , which provides useful mathematical functions that can make your siddhi queries more \nflexible.  For more information, see:   Source code  Releases  Issue tracker", 
            "title": "siddhi-execution-math"
        }, 
        {
            "location": "/#latest-api-docs", 
            "text": "Latest API Docs is  4.1.1 .", 
            "title": "Latest API Docs"
        }, 
        {
            "location": "/#how-to-use", 
            "text": "Using the extension with  WSO2 Stream Processor    You can use this extension with the latest  WSO2 Stream Processor  offering, which supports an \neditor, debugger, and simulator.     By default, the latest version of this extension is shipped with WSO2 Stream Processor. If you wish to use\n an alternative version of this extension, replace the component  jar  that is available at the \n  STREAM_PROCESSOR_HOME /lib  directory.    Using the extension as a  java library   This extension can be added as a maven dependency to your project along with other Siddhi dependencies.         dependency \n         groupId org.wso2.extension.siddhi.execution.math /groupId \n         artifactId siddhi-execution-math /artifactId \n         version x.x.x /version \n      /dependency", 
            "title": "How to use"
        }, 
        {
            "location": "/#jenkins-build-status", 
            "text": "Branch  Build Status      master", 
            "title": "Jenkins Build Status"
        }, 
        {
            "location": "/#features", 
            "text": "percentile   (Aggregate Function) This functions returns the pth percentile value of a given argument.  abs   (Function) This function returns the absolute value of the given parameter. It wraps the  java.lang.Math.abs()  function.  acos   (Function) If -1  = p1  = 1, this function returns the arc-cosine (inverse cosine) value of p1.If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.acos() function.  asin   (Function) If -1  = p1  = 1, this function returns the arc-sin (inverse sine) value of p1. If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.asin() function.  atan   (Function) 1. If a single  p1  is received, this function returns the arc-tangent (inverse tangent) value of  p1 .  2. If  p1  is received along with an optional  p1 , it considers them as x and y coordinates and returns the arc-tangent (inverse tangent) value.  The returned value is in radian scale. This function wraps the  java.lang.Math.atan()  function.  bin   (Function) This function returns a string representation of the p1 argument, that is of either 'integer' or 'long' data type, as an unsigned integer in base 2. It wraps the  java.lang.Integer.toBinaryString  and java.lang.Long.toBinaryString` methods.  cbrt   (Function) This function returns the cube-root of 'p1' which is in radians. It wraps the  java.lang.Math.cbrt()  function.  ceil   (Function) This function returns the smallest double value, i.e., the closest to the negative infinity, that is greater than or equal to the  p1  argument, and is equal to a mathematical integer. It wraps the  java.lang.Math.ceil()  method.  conv   (Function) This function converts  a  from the  fromBase  base to the  toBase  base.  copySign   (Function) This function returns a value of an input with the received  magnitude  and  sign  of another input. It wraps the  java.lang.Math.copySign()  function.  cos   (Function) This function returns the cosine of  p1  which is in radians. It wraps the  java.lang.Math.cos()  function.  cosh   (Function) This function returns the hyperbolic cosine of  p1  which is in radians. It wraps the  java.lang.Math.cosh()  function.  e   (Function) This function returns the  java.lang.Math.E  constant, which is the closest double value to e, where e is the base of the natural logarithms.   exp   (Function) This function returns the Euler's number  e  raised to the power of  p1 . It wraps the  java.lang.Math.exp()  function.  floor   (Function) This function wraps the  java.lang.Math.floor()  function and returns the largest value, i.e., closest to the positive infinity, that is less than or equal to  p1 , and is equal to a mathematical integer.  getExponent   (Function) This function returns the unbiased exponent that is used in the representation of  p1 . This function wraps the  java.lang.Math.getExponent()  function.  hex   (Function) This function wraps the  java.lang.Double.toHexString() function. It returns a hexadecimal string representation of the input,  p1`.  isInfinite   (Function) This function wraps the  java.lang.Float.isInfinite()  and  java.lang.Double.isInfinite()  and returns  true  if  p1  is infinitely large in magnitude and  false  if otherwise.  isNan   (Function) This function wraps the  java.lang.Float.isNaN()  and  java.lang.Double.isNaN()  functions and returns  true  if  p1  is NaN (Not-a-Number), and returns  false  if otherwise.  ln   (Function) This function returns the natural logarithm (base e) of  p1 .  log   (Function) This function returns the logarithm of the received  number  as per the given  base .  log10   (Function) This function returns the base 10 logarithm of  p1 .  log2   (Function) This function returns the base 2 logarithm of  p1 .  max   (Function) This function returns the greater value of  p1  and  p2 .  min   (Function) This function returns the smaller value of  p1  and  p2 .  oct   (Function) This function converts the input parameter  p1  to octal.  parseDouble   (Function) This function returns the double value of the string received.  parseFloat   (Function) This function returns the float value of the received string.  parseInt   (Function) This function returns the integer value of the received string.  parseLong   (Function) This function returns the long value of the string received.  pi   (Function) This function returns the  java.lang.Math.PI  constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter.   power   (Function) This function raises the given value to a given power.  rand   (Function) This returns a stream of pseudo-random numbers when a sequence of calls are sent to the  rand() . Optionally, it is possible to define a seed, i.e.,  rand(seed)  using which the pseudo-random numbers are generated. These functions internally use the  java.util.Random  class.  round   (Function) This function returns the value of the input argument rounded off to the closest integer/long value.  signum   (Function) This returns +1, 0, or -1 for the given positive, zero and negative values respectively. This function wraps the  java.lang.Math.signum()  function.  sin   (Function) This returns the sine of the value given in radians. This function wraps the  java.lang.Math.sin()  function.  sinh   (Function) This returns the hyperbolic sine of the value given in radians. This function wraps the  java.lang.Math.sinh()  function.   sqrt   (Function) This function returns the square-root of the given value. It wraps the  java.lang.Math.sqrt() s function.  tan   (Function) This function returns the tan of the given value in radians. It wraps the  java.lang.Math.tan()  function.  tanh   (Function) This function returns the hyperbolic tangent of the value given in radians. It wraps the  java.lang.Math.tanh()  function.  toDegrees   (Function) This function converts the value given in radians to degrees. It wraps the  java.lang.Math.toDegrees()  function.  toRadians   (Function) This function converts the value given in degrees to radians. It wraps the  java.lang.Math.toRadians()  function.", 
            "title": "Features"
        }, 
        {
            "location": "/#how-to-contribute", 
            "text": "Please report issues at  GitHub Issue Tracker .    Send your contributions as pull requests to  master branch .", 
            "title": "How to Contribute"
        }, 
        {
            "location": "/#contact-us", 
            "text": "Post your questions with the  \"Siddhi\"  tag in  Stackoverflow .     Siddhi developers can be contacted via the mailing lists:  Developers List   :  dev@wso2.org  Architecture List :  architecture@wso2.org", 
            "title": "Contact us"
        }, 
        {
            "location": "/#support", 
            "text": "We are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology.     For more details and to take advantage of this unique opportunity contact us via  http://wso2.com/support/ .", 
            "title": "Support"
        }, 
        {
            "location": "/api/4.1.1/", 
            "text": "API Docs - v4.1.1\n\n\nMath\n\n\npercentile \n(Aggregate Function)\n\n\nThis functions returns the pth percentile value of a given argument.\n\n\n\nSyntax\n\n\nDOUBLE\n math:percentile(\nINT|LONG|FLOAT|DOUBLE\n arg, \nDOUBLE\n p)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value of the parameter whose percentile should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np\n\n        \nEstimate of the percentile to be found (pth percentile) where p is any number greater than 0 or lesser than or equal to 100.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;\n\n\n\n\n\nThis function returns the percentile value based on the argument given. For example, math:percentile(temperature, 97.0) returns the 97th percentile value of all the temperature events.\n\n\n\nabs \n(Function)\n\n\nThis function returns the absolute value of the given parameter. It wraps the \njava.lang.Math.abs()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:abs(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe parameter whose absolute value is found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;\n\n\n\n\n\nIrrespective of whether the 'invalue' in the input stream holds a value of abs(3) or abs(-3),the function returns 3 since the absolute value of both 3 and -3 is 3. The result directed to OutMediationStream stream.\n\n\n\nacos \n(Function)\n\n\nIf -1 \n= p1 \n= 1, this function returns the arc-cosine (inverse cosine) value of p1.If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.acos() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:acos(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose arc-cosine (inverse cosine) value is found.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the input stream is given, the function calculates the arc-cosine value of it and returns the arc-cosine value to the output stream, OutMediationStream. For example, acos(0.5) returns 1.0471975511965979.\n\n\n\nasin \n(Function)\n\n\nIf -1 \n= p1 \n= 1, this function returns the arc-sin (inverse sine) value of p1. If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.asin() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:asin(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose arc-sin (inverse sine) value is found.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the input stream is given, the function calculates the arc-sin value of it and returns the arc-sin value to the output stream, OutMediationStream. For example, asin(0.5) returns 0.5235987755982989.\n\n\n\natan \n(Function)\n\n\n1. If a single \np1\n is received, this function returns the arc-tangent (inverse tangent) value of \np1\n. \n2. If \np1\n is received along with an optional \np1\n, it considers them as x and y coordinates and returns the arc-tangent (inverse tangent) value. \nThe returned value is in radian scale. This function wraps the \njava.lang.Math.atan()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:atan(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose arc-tangent (inverse tangent) is found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np1\n\n        \nThis optional parameter represents the y coordinate of the (x,y) coordinate pair.\n\n        \n0D\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue1' in the input stream is given, the function calculates the arc-tangent value of it and returns the arc-tangent value to the output stream, OutMediationStream. If both the 'inValue1' and 'inValue2' are given, then the function considers them to be x and y coordinates respectively and returns the calculated arc-tangent value to the output stream, OutMediationStream. For example, atan(12d, 5d) returns 1.1760052070951352.\n\n\n\nbin \n(Function)\n\n\nThis function returns a string representation of the p1 argument, that is of either 'integer' or 'long' data type, as an unsigned integer in base 2. It wraps the \njava.lang.Integer.toBinaryString\n and java.lang.Long.toBinaryString` methods.\n\n\n\nSyntax\n\n\nSTRING\n math:bin(\nINT|LONG\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value in either 'integer' or 'long', that should be converted into an unsigned integer of base 2.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the input stream is given, the function converts it into an unsigned integer in base 2 and directs the output to the output stream, OutMediationStream. For example, bin(9) returns '1001'.\n\n\n\ncbrt \n(Function)\n\n\nThis function returns the cube-root of 'p1' which is in radians. It wraps the \njava.lang.Math.cbrt()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cbrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose cube-root should be found. Input is required to be in radians.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' is given, the function calculates the cube-root value for the same and directs the output to the output stream, OutMediationStream. For example, cbrt(17d) returns 2.5712815906582356.\n\n\n\nceil \n(Function)\n\n\nThis function returns the smallest double value, i.e., the closest to the negative infinity, that is greater than or equal to the \np1\n argument, and is equal to a mathematical integer. It wraps the \njava.lang.Math.ceil()\n method.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ceil(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose ceiling value is found.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;\n\n\n\n\n\nThis function calculates the ceiling value of the given 'inValue' and directs the result to 'OutMediationStream' output stream. For example, ceil(423.187d) returns 424.0.\n\n\n\nconv \n(Function)\n\n\nThis function converts \na\n from the \nfromBase\n base to the \ntoBase\n base.\n\n\n\nSyntax\n\n\nSTRING\n math:conv(\nSTRING\n a, \nINT\n from.base, \nINT\n to.base)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \na\n\n        \nThe value whose base should be changed. Input should be given as a 'String'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfrom.base\n\n        \nThe source base of the input parameter 'a'.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.base\n\n        \nThe target base that the input parameter 'a' should be converted into.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the input stream is given, and the base in which it currently resides in and the base to which it should be converted to is specified, the function converts it into a string in the target base and directs it to the output stream, OutMediationStream. For example, conv(\"7f\", 16, 10) returns \"127\".\n\n\n\ncopySign \n(Function)\n\n\nThis function returns a value of an input with the received \nmagnitude\n and \nsign\n of another input. It wraps the \njava.lang.Math.copySign()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:copySign(\nINT|LONG|FLOAT|DOUBLE\n magnitude, \nINT|LONG|FLOAT|DOUBLE\n sign)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmagnitude\n\n        \nThe magnitude of this parameter is used in the output attribute.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsign\n\n        \nThe sign of this parameter is used in the output attribute.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf two values are provided as 'inValue1' and 'inValue2', the function copies the magnitude and sign of the second argument into the first one and directs the result to the output stream, OutMediatonStream. For example, copySign(5.6d, -3.0d) returns -5.6.\n\n\n\ncos \n(Function)\n\n\nThis function returns the cosine of \np1\n which is in radians. It wraps the \njava.lang.Math.cos()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cos(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose cosine value should be found.The input is required to be in radians.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' is given, the function calculates the cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cos(6d) returns 0.9601702866503661.\n\n\n\ncosh \n(Function)\n\n\nThis function returns the hyperbolic cosine of \np1\n which is in radians. It wraps the \njava.lang.Math.cosh()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cosh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose hyperbolic cosine should be found. The input is required to be in radians.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' is given, the function calculates the hyperbolic cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cosh (6d) returns 201.7156361224559.\n\n\n\ne \n(Function)\n\n\nThis function returns the \njava.lang.Math.E\n constant, which is the closest double value to e, where e is the base of the natural logarithms. \n\n\n\nSyntax\n\n\nDOUBLE\n math:e()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;\n\n\n\n\n\nThis function returns the constant, 2.7182818284590452354 which is the closest double value to e and directs the output to 'OutMediationStream' output stream.\n\n\n\nexp \n(Function)\n\n\nThis function returns the Euler's number \ne\n raised to the power of \np1\n. It wraps the \njava.lang.Math.exp()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:exp(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe power that the Euler's number e is raised to.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the inputstream holds a value, this function calculates the corresponding Euler's number 'e' and directs it to the output stream, OutMediationStream. For example, exp(10.23) returns 27722.51006805505.\n\n\n\nfloor \n(Function)\n\n\nThis function wraps the \njava.lang.Math.floor()\n function and returns the largest value, i.e., closest to the positive infinity, that is less than or equal to \np1\n, and is equal to a mathematical integer.\n\n\n\nSyntax\n\n\nDOUBLE\n math:floor(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose floor value should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;\n\n\n\n\n\nThis function calculates the floor value of the given 'inValue' input and directs the output to the 'OutMediationStream' output stream. For example, (10.23) returns 10.0.\n\n\n\ngetExponent \n(Function)\n\n\nThis function returns the unbiased exponent that is used in the representation of \np1\n. This function wraps the \njava.lang.Math.getExponent()\n function.\n\n\n\nSyntax\n\n\nINT\n math:getExponent(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose unbiased exponent representation should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\n\nThis function calculates the unbiased exponent of a given input, 'inValue' and directs the result to the 'OutMediationStream' output stream. For example, getExponent(60984.1) returns 15.\n\n\n\nhex \n(Function)\n\n\nThis function wraps the \njava.lang.Double.toHexString() function. It returns a hexadecimal string representation of the input, \np1`.\n\n\n\nSyntax\n\n\nSTRING\n math:hex(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose hexadecimal value should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the input stream is provided, the function converts this into its corresponding hexadecimal format and directs the output to the output stream, OutMediationStream. For example, hex(200) returns \"c8\".\n\n\n\nisInfinite \n(Function)\n\n\nThis function wraps the \njava.lang.Float.isInfinite()\n and \njava.lang.Double.isInfinite()\n and returns \ntrue\n if \np1\n is infinitely large in magnitude and \nfalse\n if otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isInfinite(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThis is the value of the parameter that the function determines to be either infinite or finite.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;\n\n\n\n\n\nIf the value given in the 'inValue' in the input stream is of infinitely large magnitude, the function returns the value, 'true' and directs the result to the output stream, OutMediationStream'. For example, isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.\n\n\n\nisNan \n(Function)\n\n\nThis function wraps the \njava.lang.Float.isNaN()\n and \njava.lang.Double.isNaN()\n functions and returns \ntrue\n if \np1\n is NaN (Not-a-Number), and returns \nfalse\n if otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isNan(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter which the function determines to be either NaN or a number.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue1' in the input stream has a value that is undefined, then the function considers it as an 'NaN' value and directs 'True' to the output stream, OutMediationStream. For example, isNan(java.lang.Math.log(-12d)) returns true.\n\n\n\nln \n(Function)\n\n\nThis function returns the natural logarithm (base e) of \np1\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ln(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose natural logarithm (base e) should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the input stream is given, the function calculates its natural logarithm (base e) and directs the results to the output stream, 'OutMeditionStream'. For example, ln(11.453) returns 2.438251704415579.\n\n\n\nlog \n(Function)\n\n\nThis function returns the logarithm of the received \nnumber\n as per the given \nbase\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log(\nINT|LONG|FLOAT|DOUBLE\n number, \nINT|LONG|FLOAT|DOUBLE\n base)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nnumber\n\n        \nThe value of the parameter whose base should be changed.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbase\n\n        \nThe base value of the ouput.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the number and the base to which it has to be converted into is given in the input stream, the function calculates the number to the base specified and directs the result to the output stream, OutMediationStream. For example, log(34, 2f) returns 5.08746284125034.\n\n\n\nlog10 \n(Function)\n\n\nThis function returns the base 10 logarithm of \np1\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log10(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose base 10 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the input stream is given, the function calculates the base 10 logarithm of the same and directs the result to the output stream, OutMediatioStream. For example, log10(19.234) returns 1.2840696117100832.\n\n\n\nlog2 \n(Function)\n\n\nThis function returns the base 2 logarithm of \np1\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log2(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose base 2 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the input stream is given, the function calculates the base 2 logarithm of the same and returns the value to the output stream, OutMediationStream. For example log2(91d) returns 6.507794640198696.\n\n\n\nmax \n(Function)\n\n\nThis function returns the greater value of \np1\n and \np2\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:max(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nOne of the input values to be compared in order to find the larger value of the two\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nThe input value to be compared with 'p1' in order to find the larger value of the two.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf two input values 'inValue1, and 'inValue2' are given, the function compares them and directs the larger value to the output stream, OutMediationStream. For example, max(123.67d, 91) returns 123.67.\n\n\n\nmin \n(Function)\n\n\nThis function returns the smaller value of \np1\n and \np2\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:min(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nOne of the input values that are to be compared in order to find the smaller value.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nThe input value that is to be compared with 'p1' in order to find the smaller value.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf two input values, 'inValue1' and 'inValue2' are given, the function compares them and directs the smaller value of the two to the output stream, OutMediationStream. For example, min(123.67d, 91) returns 91.\n\n\n\noct \n(Function)\n\n\nThis function converts the input parameter \np1\n to octal.\n\n\n\nSyntax\n\n\nSTRING\n math:oct(\nINT|LONG\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose octal representation should be found.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the input stream is given, this function calculates the octal value corresponding to the same and directs it to the output stream, OutMediationStream. For example, oct(99l) returns \"143\".\n\n\n\nparseDouble \n(Function)\n\n\nThis function returns the double value of the string received.\n\n\n\nSyntax\n\n\nDOUBLE\n math:parseDouble(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted into a double value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the input stream holds a value, this function converts it into the corresponding double value and directs it to the output stream, OutMediationStream. For example, parseDouble(\"123\") returns 123.0.\n\n\n\nparseFloat \n(Function)\n\n\nThis function returns the float value of the received string.\n\n\n\nSyntax\n\n\nFLOAT\n math:parseFloat(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted into a float value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nThe function converts the input value given in 'inValue',into its corresponding float value and directs the result into the output stream, OutMediationStream. For example, parseFloat(\"123\") returns 123.0.\n\n\n\nparseInt \n(Function)\n\n\nThis function returns the integer value of the received string.\n\n\n\nSyntax\n\n\nINT\n math:parseInt(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to an integer.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nThe  function converts the 'inValue' into its corresponding integer value and directs the output to the output stream, OutMediationStream. For example, parseInt(\"123\") returns 123.\n\n\n\nparseLong \n(Function)\n\n\nThis function returns the long value of the string received.\n\n\n\nSyntax\n\n\nLONG\n math:parseLong(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a long value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nThe function converts the 'inValue' to its corresponding long value and directs the result to the output stream, OutMediationStream. For example, parseLong(\"123\") returns 123.\n\n\n\npi \n(Function)\n\n\nThis function returns the \njava.lang.Math.PI\n constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter. \n\n\n\nSyntax\n\n\nDOUBLE\n math:pi()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;\n\n\n\n\n\npi() always returns 3.141592653589793.\n\n\n\npower \n(Function)\n\n\nThis function raises the given value to a given power.\n\n\n\nSyntax\n\n\nDOUBLE\n math:power(\nINT|LONG|FLOAT|DOUBLE\n value, \nINT|LONG|FLOAT|DOUBLE\n to.power)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value that should be raised to the power of 'to.power' input parameter.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.power\n\n        \nThe power to which the 'value' input parameter should be raised.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;\n\n\n\n\n\nThis function raises the 'inValue1' to the power of 'inValue2' and directs the output to the output stream, 'OutMediationStream. For example, (5.6d, 3.0d) returns 175.61599999999996.\n\n\n\nrand \n(Function)\n\n\nThis returns a stream of pseudo-random numbers when a sequence of calls are sent to the \nrand()\n. Optionally, it is possible to define a seed, i.e., \nrand(seed)\n using which the pseudo-random numbers are generated. These functions internally use the \njava.util.Random\n class.\n\n\n\nSyntax\n\n\nDOUBLE\n math:rand(\nINT|LONG\n seed)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nseed\n\n        \nAn optional seed value that will be used to generate the random number sequence.\n\n        \ndefaultSeed\n\n        \nINT\nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\n\nIn the example given above, a random double value between 0 and 1 will be generated using math:rand().\n\n\n\nround \n(Function)\n\n\nThis function returns the value of the input argument rounded off to the closest integer/long value.\n\n\n\nSyntax\n\n\nINT|LONG\n math:round(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be rounded off to the closest integer/long value.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;\n\n\n\n\n\nThe function rounds off 'inValue1' to the closest int/long value and directs the output to the output stream, 'OutMediationStream'. For example, round(3252.353) returns 3252.\n\n\n\nsignum \n(Function)\n\n\nThis returns +1, 0, or -1 for the given positive, zero and negative values respectively. This function wraps the \njava.lang.Math.signum()\n function.\n\n\n\nSyntax\n\n\nINT\n math:signum(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked to be positive, negative or zero.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;\n\n\n\n\n\nThe function evaluates the 'inValue' given to be positive, negative or zero and directs the result to the output stream, 'OutMediationStream'. For example, signum(-6.32d) returns -1.\n\n\n\nsin \n(Function)\n\n\nThis returns the sine of the value given in radians. This function wraps the \njava.lang.Math.sin()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sin(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose sine value should be found. Input is required to be in radians.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;\n\n\n\n\n\nThe function calculates the sine value of the given 'inValue' and directs the output to the output stream, 'OutMediationStream. For example, sin(6d) returns -0.27941549819892586.\n\n\n\nsinh \n(Function)\n\n\nThis returns the hyperbolic sine of the value given in radians. This function wraps the \njava.lang.Math.sinh()\n function. \n\n\n\nSyntax\n\n\nDOUBLE\n math:sinh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose hyperbolic sine value should be found. Input is required to be in radians.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;\n\n\n\n\n\nThis function calculates the hyperbolic sine value of 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sinh(6d) returns 201.71315737027922.\n\n\n\nsqrt \n(Function)\n\n\nThis function returns the square-root of the given value. It wraps the \njava.lang.Math.sqrt()\ns function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sqrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose square-root value should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;\n\n\n\n\n\nThe function calculates the square-root value of the 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sqrt(4d) returns 2.\n\n\n\ntan \n(Function)\n\n\nThis function returns the tan of the given value in radians. It wraps the \njava.lang.Math.tan()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tan(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose tan value should be found. Input is required to be in radians.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;\n\n\n\n\n\nThis function calculates the tan value of the 'inValue' given and directs the output to the output stream, 'OutMediationStream'. For example, tan(6d) returns -0.29100619138474915.\n\n\n\ntanh \n(Function)\n\n\nThis function returns the hyperbolic tangent of the value given in radians. It wraps the \njava.lang.Math.tanh()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tanh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose hyperbolic tangent value should be found. Input is required to be in radians.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inVaue' in the input stream is given, this function calculates the hyperbolic tangent value of the same and directs the output to 'OutMediationStream' stream. For example, tanh(6d) returns 0.9999877116507956.\n\n\n\ntoDegrees \n(Function)\n\n\nThis function converts the value given in radians to degrees. It wraps the \njava.lang.Math.toDegrees()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toDegrees(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe input value in radians that should be converted to degrees.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;\n\n\n\n\n\nThe function converts the 'inValue' in the input stream from radians to degrees and directs the output to 'OutMediationStream' output stream. For example, toDegrees(6d) returns 343.77467707849394.\n\n\n\ntoRadians \n(Function)\n\n\nThis function converts the value given in degrees to radians. It wraps the \njava.lang.Math.toRadians()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toRadians(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe input value in degrees that should be converted to radians.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;\n\n\n\n\n\nThis function converts the input, from degrees to radians and directs the result to 'OutMediationStream' output stream. For example, toRadians(6d) returns 0.10471975511965977.", 
            "title": "4.1.1"
        }, 
        {
            "location": "/api/4.1.1/#api-docs-v411", 
            "text": "", 
            "title": "API Docs - v4.1.1"
        }, 
        {
            "location": "/api/4.1.1/#math", 
            "text": "", 
            "title": "Math"
        }, 
        {
            "location": "/api/4.1.1/#percentile-aggregate-function", 
            "text": "This functions returns the pth percentile value of a given argument.  Syntax  DOUBLE  math:percentile( INT|LONG|FLOAT|DOUBLE  arg,  DOUBLE  p)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value of the parameter whose percentile should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p \n         Estimate of the percentile to be found (pth percentile) where p is any number greater than 0 or lesser than or equal to 100. \n         \n         DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;  This function returns the percentile value based on the argument given. For example, math:percentile(temperature, 97.0) returns the 97th percentile value of all the temperature events.", 
            "title": "percentile (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.1/#abs-function", 
            "text": "This function returns the absolute value of the given parameter. It wraps the  java.lang.Math.abs()  function.  Syntax  DOUBLE  math:abs( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The parameter whose absolute value is found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;  Irrespective of whether the 'invalue' in the input stream holds a value of abs(3) or abs(-3),the function returns 3 since the absolute value of both 3 and -3 is 3. The result directed to OutMediationStream stream.", 
            "title": "abs (Function)"
        }, 
        {
            "location": "/api/4.1.1/#acos-function", 
            "text": "If -1  = p1  = 1, this function returns the arc-cosine (inverse cosine) value of p1.If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.acos() function.  Syntax  DOUBLE  math:acos( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose arc-cosine (inverse cosine) value is found. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;  If the 'inValue' in the input stream is given, the function calculates the arc-cosine value of it and returns the arc-cosine value to the output stream, OutMediationStream. For example, acos(0.5) returns 1.0471975511965979.", 
            "title": "acos (Function)"
        }, 
        {
            "location": "/api/4.1.1/#asin-function", 
            "text": "If -1  = p1  = 1, this function returns the arc-sin (inverse sine) value of p1. If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.asin() function.  Syntax  DOUBLE  math:asin( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose arc-sin (inverse sine) value is found. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;  If the 'inValue' in the input stream is given, the function calculates the arc-sin value of it and returns the arc-sin value to the output stream, OutMediationStream. For example, asin(0.5) returns 0.5235987755982989.", 
            "title": "asin (Function)"
        }, 
        {
            "location": "/api/4.1.1/#atan-function", 
            "text": "1. If a single  p1  is received, this function returns the arc-tangent (inverse tangent) value of  p1 .  2. If  p1  is received along with an optional  p1 , it considers them as x and y coordinates and returns the arc-tangent (inverse tangent) value.  The returned value is in radian scale. This function wraps the  java.lang.Math.atan()  function.  Syntax  DOUBLE  math:atan( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose arc-tangent (inverse tangent) is found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p1 \n         This optional parameter represents the y coordinate of the (x,y) coordinate pair. \n         0D \n         INT LONG FLOAT DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;  If the 'inValue1' in the input stream is given, the function calculates the arc-tangent value of it and returns the arc-tangent value to the output stream, OutMediationStream. If both the 'inValue1' and 'inValue2' are given, then the function considers them to be x and y coordinates respectively and returns the calculated arc-tangent value to the output stream, OutMediationStream. For example, atan(12d, 5d) returns 1.1760052070951352.", 
            "title": "atan (Function)"
        }, 
        {
            "location": "/api/4.1.1/#bin-function", 
            "text": "This function returns a string representation of the p1 argument, that is of either 'integer' or 'long' data type, as an unsigned integer in base 2. It wraps the  java.lang.Integer.toBinaryString  and java.lang.Long.toBinaryString` methods.  Syntax  STRING  math:bin( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value in either 'integer' or 'long', that should be converted into an unsigned integer of base 2. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;  If the 'inValue' in the input stream is given, the function converts it into an unsigned integer in base 2 and directs the output to the output stream, OutMediationStream. For example, bin(9) returns '1001'.", 
            "title": "bin (Function)"
        }, 
        {
            "location": "/api/4.1.1/#cbrt-function", 
            "text": "This function returns the cube-root of 'p1' which is in radians. It wraps the  java.lang.Math.cbrt()  function.  Syntax  DOUBLE  math:cbrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose cube-root should be found. Input is required to be in radians. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;  If the 'inValue' is given, the function calculates the cube-root value for the same and directs the output to the output stream, OutMediationStream. For example, cbrt(17d) returns 2.5712815906582356.", 
            "title": "cbrt (Function)"
        }, 
        {
            "location": "/api/4.1.1/#ceil-function", 
            "text": "This function returns the smallest double value, i.e., the closest to the negative infinity, that is greater than or equal to the  p1  argument, and is equal to a mathematical integer. It wraps the  java.lang.Math.ceil()  method.  Syntax  DOUBLE  math:ceil( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose ceiling value is found. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;  This function calculates the ceiling value of the given 'inValue' and directs the result to 'OutMediationStream' output stream. For example, ceil(423.187d) returns 424.0.", 
            "title": "ceil (Function)"
        }, 
        {
            "location": "/api/4.1.1/#conv-function", 
            "text": "This function converts  a  from the  fromBase  base to the  toBase  base.  Syntax  STRING  math:conv( STRING  a,  INT  from.base,  INT  to.base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         a \n         The value whose base should be changed. Input should be given as a 'String'. \n         \n         STRING \n         No \n         No \n     \n     \n         from.base \n         The source base of the input parameter 'a'. \n         \n         INT \n         No \n         No \n     \n     \n         to.base \n         The target base that the input parameter 'a' should be converted into. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;  If the 'inValue' in the input stream is given, and the base in which it currently resides in and the base to which it should be converted to is specified, the function converts it into a string in the target base and directs it to the output stream, OutMediationStream. For example, conv(\"7f\", 16, 10) returns \"127\".", 
            "title": "conv (Function)"
        }, 
        {
            "location": "/api/4.1.1/#copysign-function", 
            "text": "This function returns a value of an input with the received  magnitude  and  sign  of another input. It wraps the  java.lang.Math.copySign()  function.  Syntax  DOUBLE  math:copySign( INT|LONG|FLOAT|DOUBLE  magnitude,  INT|LONG|FLOAT|DOUBLE  sign)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         magnitude \n         The magnitude of this parameter is used in the output attribute. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         sign \n         The sign of this parameter is used in the output attribute. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;  If two values are provided as 'inValue1' and 'inValue2', the function copies the magnitude and sign of the second argument into the first one and directs the result to the output stream, OutMediatonStream. For example, copySign(5.6d, -3.0d) returns -5.6.", 
            "title": "copySign (Function)"
        }, 
        {
            "location": "/api/4.1.1/#cos-function", 
            "text": "This function returns the cosine of  p1  which is in radians. It wraps the  java.lang.Math.cos()  function.  Syntax  DOUBLE  math:cos( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose cosine value should be found.The input is required to be in radians. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;  If the 'inValue' is given, the function calculates the cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cos(6d) returns 0.9601702866503661.", 
            "title": "cos (Function)"
        }, 
        {
            "location": "/api/4.1.1/#cosh-function", 
            "text": "This function returns the hyperbolic cosine of  p1  which is in radians. It wraps the  java.lang.Math.cosh()  function.  Syntax  DOUBLE  math:cosh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose hyperbolic cosine should be found. The input is required to be in radians. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;  If the 'inValue' is given, the function calculates the hyperbolic cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cosh (6d) returns 201.7156361224559.", 
            "title": "cosh (Function)"
        }, 
        {
            "location": "/api/4.1.1/#e-function", 
            "text": "This function returns the  java.lang.Math.E  constant, which is the closest double value to e, where e is the base of the natural logarithms.   Syntax  DOUBLE  math:e()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;  This function returns the constant, 2.7182818284590452354 which is the closest double value to e and directs the output to 'OutMediationStream' output stream.", 
            "title": "e (Function)"
        }, 
        {
            "location": "/api/4.1.1/#exp-function", 
            "text": "This function returns the Euler's number  e  raised to the power of  p1 . It wraps the  java.lang.Math.exp()  function.  Syntax  DOUBLE  math:exp( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The power that the Euler's number e is raised to. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;  If the 'inValue' in the inputstream holds a value, this function calculates the corresponding Euler's number 'e' and directs it to the output stream, OutMediationStream. For example, exp(10.23) returns 27722.51006805505.", 
            "title": "exp (Function)"
        }, 
        {
            "location": "/api/4.1.1/#floor-function", 
            "text": "This function wraps the  java.lang.Math.floor()  function and returns the largest value, i.e., closest to the positive infinity, that is less than or equal to  p1 , and is equal to a mathematical integer.  Syntax  DOUBLE  math:floor( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose floor value should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;  This function calculates the floor value of the given 'inValue' input and directs the output to the 'OutMediationStream' output stream. For example, (10.23) returns 10.0.", 
            "title": "floor (Function)"
        }, 
        {
            "location": "/api/4.1.1/#getexponent-function", 
            "text": "This function returns the unbiased exponent that is used in the representation of  p1 . This function wraps the  java.lang.Math.getExponent()  function.  Syntax  INT  math:getExponent( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose unbiased exponent representation should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;  This function calculates the unbiased exponent of a given input, 'inValue' and directs the result to the 'OutMediationStream' output stream. For example, getExponent(60984.1) returns 15.", 
            "title": "getExponent (Function)"
        }, 
        {
            "location": "/api/4.1.1/#hex-function", 
            "text": "This function wraps the  java.lang.Double.toHexString() function. It returns a hexadecimal string representation of the input,  p1`.  Syntax  STRING  math:hex( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose hexadecimal value should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;  If the 'inValue' in the input stream is provided, the function converts this into its corresponding hexadecimal format and directs the output to the output stream, OutMediationStream. For example, hex(200) returns \"c8\".", 
            "title": "hex (Function)"
        }, 
        {
            "location": "/api/4.1.1/#isinfinite-function", 
            "text": "This function wraps the  java.lang.Float.isInfinite()  and  java.lang.Double.isInfinite()  and returns  true  if  p1  is infinitely large in magnitude and  false  if otherwise.  Syntax  BOOL  math:isInfinite( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         This is the value of the parameter that the function determines to be either infinite or finite. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;  If the value given in the 'inValue' in the input stream is of infinitely large magnitude, the function returns the value, 'true' and directs the result to the output stream, OutMediationStream'. For example, isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.", 
            "title": "isInfinite (Function)"
        }, 
        {
            "location": "/api/4.1.1/#isnan-function", 
            "text": "This function wraps the  java.lang.Float.isNaN()  and  java.lang.Double.isNaN()  functions and returns  true  if  p1  is NaN (Not-a-Number), and returns  false  if otherwise.  Syntax  BOOL  math:isNan( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter which the function determines to be either NaN or a number. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;  If the 'inValue1' in the input stream has a value that is undefined, then the function considers it as an 'NaN' value and directs 'True' to the output stream, OutMediationStream. For example, isNan(java.lang.Math.log(-12d)) returns true.", 
            "title": "isNan (Function)"
        }, 
        {
            "location": "/api/4.1.1/#ln-function", 
            "text": "This function returns the natural logarithm (base e) of  p1 .  Syntax  DOUBLE  math:ln( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose natural logarithm (base e) should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;  If the 'inValue' in the input stream is given, the function calculates its natural logarithm (base e) and directs the results to the output stream, 'OutMeditionStream'. For example, ln(11.453) returns 2.438251704415579.", 
            "title": "ln (Function)"
        }, 
        {
            "location": "/api/4.1.1/#log-function", 
            "text": "This function returns the logarithm of the received  number  as per the given  base .  Syntax  DOUBLE  math:log( INT|LONG|FLOAT|DOUBLE  number,  INT|LONG|FLOAT|DOUBLE  base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         number \n         The value of the parameter whose base should be changed. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         base \n         The base value of the ouput. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;  If the number and the base to which it has to be converted into is given in the input stream, the function calculates the number to the base specified and directs the result to the output stream, OutMediationStream. For example, log(34, 2f) returns 5.08746284125034.", 
            "title": "log (Function)"
        }, 
        {
            "location": "/api/4.1.1/#log10-function", 
            "text": "This function returns the base 10 logarithm of  p1 .  Syntax  DOUBLE  math:log10( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose base 10 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;  If the 'inValue' in the input stream is given, the function calculates the base 10 logarithm of the same and directs the result to the output stream, OutMediatioStream. For example, log10(19.234) returns 1.2840696117100832.", 
            "title": "log10 (Function)"
        }, 
        {
            "location": "/api/4.1.1/#log2-function", 
            "text": "This function returns the base 2 logarithm of  p1 .  Syntax  DOUBLE  math:log2( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose base 2 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;  If the 'inValue' in the input stream is given, the function calculates the base 2 logarithm of the same and returns the value to the output stream, OutMediationStream. For example log2(91d) returns 6.507794640198696.", 
            "title": "log2 (Function)"
        }, 
        {
            "location": "/api/4.1.1/#max-function", 
            "text": "This function returns the greater value of  p1  and  p2 .  Syntax  DOUBLE  math:max( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         One of the input values to be compared in order to find the larger value of the two \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         The input value to be compared with 'p1' in order to find the larger value of the two. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;  If two input values 'inValue1, and 'inValue2' are given, the function compares them and directs the larger value to the output stream, OutMediationStream. For example, max(123.67d, 91) returns 123.67.", 
            "title": "max (Function)"
        }, 
        {
            "location": "/api/4.1.1/#min-function", 
            "text": "This function returns the smaller value of  p1  and  p2 .  Syntax  DOUBLE  math:min( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         One of the input values that are to be compared in order to find the smaller value. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         The input value that is to be compared with 'p1' in order to find the smaller value. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;  If two input values, 'inValue1' and 'inValue2' are given, the function compares them and directs the smaller value of the two to the output stream, OutMediationStream. For example, min(123.67d, 91) returns 91.", 
            "title": "min (Function)"
        }, 
        {
            "location": "/api/4.1.1/#oct-function", 
            "text": "This function converts the input parameter  p1  to octal.  Syntax  STRING  math:oct( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose octal representation should be found. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  If the 'inValue' in the input stream is given, this function calculates the octal value corresponding to the same and directs it to the output stream, OutMediationStream. For example, oct(99l) returns \"143\".", 
            "title": "oct (Function)"
        }, 
        {
            "location": "/api/4.1.1/#parsedouble-function", 
            "text": "This function returns the double value of the string received.  Syntax  DOUBLE  math:parseDouble( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted into a double value. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;  If the 'inValue' in the input stream holds a value, this function converts it into the corresponding double value and directs it to the output stream, OutMediationStream. For example, parseDouble(\"123\") returns 123.0.", 
            "title": "parseDouble (Function)"
        }, 
        {
            "location": "/api/4.1.1/#parsefloat-function", 
            "text": "This function returns the float value of the received string.  Syntax  FLOAT  math:parseFloat( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted into a float value. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;  The function converts the input value given in 'inValue',into its corresponding float value and directs the result into the output stream, OutMediationStream. For example, parseFloat(\"123\") returns 123.0.", 
            "title": "parseFloat (Function)"
        }, 
        {
            "location": "/api/4.1.1/#parseint-function", 
            "text": "This function returns the integer value of the received string.  Syntax  INT  math:parseInt( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to an integer. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;  The  function converts the 'inValue' into its corresponding integer value and directs the output to the output stream, OutMediationStream. For example, parseInt(\"123\") returns 123.", 
            "title": "parseInt (Function)"
        }, 
        {
            "location": "/api/4.1.1/#parselong-function", 
            "text": "This function returns the long value of the string received.  Syntax  LONG  math:parseLong( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a long value. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;  The function converts the 'inValue' to its corresponding long value and directs the result to the output stream, OutMediationStream. For example, parseLong(\"123\") returns 123.", 
            "title": "parseLong (Function)"
        }, 
        {
            "location": "/api/4.1.1/#pi-function", 
            "text": "This function returns the  java.lang.Math.PI  constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter.   Syntax  DOUBLE  math:pi()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;  pi() always returns 3.141592653589793.", 
            "title": "pi (Function)"
        }, 
        {
            "location": "/api/4.1.1/#power-function", 
            "text": "This function raises the given value to a given power.  Syntax  DOUBLE  math:power( INT|LONG|FLOAT|DOUBLE  value,  INT|LONG|FLOAT|DOUBLE  to.power)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value that should be raised to the power of 'to.power' input parameter. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         to.power \n         The power to which the 'value' input parameter should be raised. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;  This function raises the 'inValue1' to the power of 'inValue2' and directs the output to the output stream, 'OutMediationStream. For example, (5.6d, 3.0d) returns 175.61599999999996.", 
            "title": "power (Function)"
        }, 
        {
            "location": "/api/4.1.1/#rand-function", 
            "text": "This returns a stream of pseudo-random numbers when a sequence of calls are sent to the  rand() . Optionally, it is possible to define a seed, i.e.,  rand(seed)  using which the pseudo-random numbers are generated. These functions internally use the  java.util.Random  class.  Syntax  DOUBLE  math:rand( INT|LONG  seed)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         seed \n         An optional seed value that will be used to generate the random number sequence. \n         defaultSeed \n         INT LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  In the example given above, a random double value between 0 and 1 will be generated using math:rand().", 
            "title": "rand (Function)"
        }, 
        {
            "location": "/api/4.1.1/#round-function", 
            "text": "This function returns the value of the input argument rounded off to the closest integer/long value.  Syntax  INT|LONG  math:round( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be rounded off to the closest integer/long value. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;  The function rounds off 'inValue1' to the closest int/long value and directs the output to the output stream, 'OutMediationStream'. For example, round(3252.353) returns 3252.", 
            "title": "round (Function)"
        }, 
        {
            "location": "/api/4.1.1/#signum-function", 
            "text": "This returns +1, 0, or -1 for the given positive, zero and negative values respectively. This function wraps the  java.lang.Math.signum()  function.  Syntax  INT  math:signum( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked to be positive, negative or zero. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;  The function evaluates the 'inValue' given to be positive, negative or zero and directs the result to the output stream, 'OutMediationStream'. For example, signum(-6.32d) returns -1.", 
            "title": "signum (Function)"
        }, 
        {
            "location": "/api/4.1.1/#sin-function", 
            "text": "This returns the sine of the value given in radians. This function wraps the  java.lang.Math.sin()  function.  Syntax  DOUBLE  math:sin( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose sine value should be found. Input is required to be in radians. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;  The function calculates the sine value of the given 'inValue' and directs the output to the output stream, 'OutMediationStream. For example, sin(6d) returns -0.27941549819892586.", 
            "title": "sin (Function)"
        }, 
        {
            "location": "/api/4.1.1/#sinh-function", 
            "text": "This returns the hyperbolic sine of the value given in radians. This function wraps the  java.lang.Math.sinh()  function.   Syntax  DOUBLE  math:sinh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose hyperbolic sine value should be found. Input is required to be in radians. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;  This function calculates the hyperbolic sine value of 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sinh(6d) returns 201.71315737027922.", 
            "title": "sinh (Function)"
        }, 
        {
            "location": "/api/4.1.1/#sqrt-function", 
            "text": "This function returns the square-root of the given value. It wraps the  java.lang.Math.sqrt() s function.  Syntax  DOUBLE  math:sqrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose square-root value should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;  The function calculates the square-root value of the 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sqrt(4d) returns 2.", 
            "title": "sqrt (Function)"
        }, 
        {
            "location": "/api/4.1.1/#tan-function", 
            "text": "This function returns the tan of the given value in radians. It wraps the  java.lang.Math.tan()  function.  Syntax  DOUBLE  math:tan( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose tan value should be found. Input is required to be in radians. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;  This function calculates the tan value of the 'inValue' given and directs the output to the output stream, 'OutMediationStream'. For example, tan(6d) returns -0.29100619138474915.", 
            "title": "tan (Function)"
        }, 
        {
            "location": "/api/4.1.1/#tanh-function", 
            "text": "This function returns the hyperbolic tangent of the value given in radians. It wraps the  java.lang.Math.tanh()  function.  Syntax  DOUBLE  math:tanh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose hyperbolic tangent value should be found. Input is required to be in radians. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;  If the 'inVaue' in the input stream is given, this function calculates the hyperbolic tangent value of the same and directs the output to 'OutMediationStream' stream. For example, tanh(6d) returns 0.9999877116507956.", 
            "title": "tanh (Function)"
        }, 
        {
            "location": "/api/4.1.1/#todegrees-function", 
            "text": "This function converts the value given in radians to degrees. It wraps the  java.lang.Math.toDegrees()  function.  Syntax  DOUBLE  math:toDegrees( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The input value in radians that should be converted to degrees. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;  The function converts the 'inValue' in the input stream from radians to degrees and directs the output to 'OutMediationStream' output stream. For example, toDegrees(6d) returns 343.77467707849394.", 
            "title": "toDegrees (Function)"
        }, 
        {
            "location": "/api/4.1.1/#toradians-function", 
            "text": "This function converts the value given in degrees to radians. It wraps the  java.lang.Math.toRadians()  function.  Syntax  DOUBLE  math:toRadians( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The input value in degrees that should be converted to radians. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;  This function converts the input, from degrees to radians and directs the result to 'OutMediationStream' output stream. For example, toRadians(6d) returns 0.10471975511965977.", 
            "title": "toRadians (Function)"
        }, 
        {
            "location": "/api/4.1.0/", 
            "text": "API Docs - v4.1.0\n\n\nMath\n\n\npercentile \n(Aggregate Function)\n\n\nThis functions returns the pth percentile value of a given argument.\n\n\n\nSyntax\n\n\nDOUBLE\n math:percentile(\nINT|LONG|FLOAT|DOUBLE\n arg, \nDOUBLE\n p)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value of the parameter whose percentile should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np\n\n        \nEstimate of the percentile to be found (pth percentile) where p is any number greater than 0 or lesser than or equal to 100.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;\n\n\n\n\n\nThis function returns the percentile value based on the argument given. For example, math:percentile(temperature, 97.0) returns the 97th percentile value of all the temperature events.\n\n\n\nabs \n(Function)\n\n\nThis function returns the absolute value of the given parameter. It wraps the \njava.lang.Math.abs()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:abs(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe parameter whose absolute value is found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;\n\n\n\n\n\nIrrespective of whether the 'invalue' in the input stream holds a value of abs(3) or abs(-3),the function returns 3 since the absolute value of both 3 and -3 is 3. The result directed to OutMediationStream stream.\n\n\n\nacos \n(Function)\n\n\nIf -1 \n= p1 \n= 1, this function returns the arc-cosine (inverse cosine) value of p1.If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.acos() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:acos(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose arc-cosine (inverse cosine) value is found.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the input stream is given, the function calculates the arc-cosine value of it and returns the arc-cosine value to the output stream, OutMediationStream. For example, acos(0.5) returns 1.0471975511965979.\n\n\n\nasin \n(Function)\n\n\nIf -1 \n= p1 \n= 1, this function returns the arc-sin (inverse sine) value of p1. If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.asin() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:asin(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose arc-sin (inverse sine) value is found.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the input stream is given, the function calculates the arc-sin value of it and returns the arc-sin value to the output stream, OutMediationStream. For example, asin(0.5) returns 0.5235987755982989.\n\n\n\natan \n(Function)\n\n\n1. If a single \np1\n is received, this function returns the arc-tangent (inverse tangent) value of \np1\n. \n2. If \np1\n is received along with an optional \np1\n, it considers them as x and y coordinates and returns the arc-tangent (inverse tangent) value. \nThe returned value is in radian scale. This function wraps the \njava.lang.Math.atan()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:atan(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose arc-tangent (inverse tangent) is found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np1\n\n        \nThis optional parameter represents the y coordinate of the (x,y) coordinate pair.\n\n        \n0D\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue1' in the input stream is given, the function calculates the arc-tangent value of it and returns the arc-tangent value to the output stream, OutMediationStream. If both the 'inValue1' and 'inValue2' are given, then the function considers them to be x and y coordinates respectively and returns the calculated arc-tangent value to the output stream, OutMediationStream. For example, atan(12d, 5d) returns 1.1760052070951352.\n\n\n\nbin \n(Function)\n\n\nThis function returns a string representation of the p1 argument, that is of either 'integer' or 'long' data type, as an unsigned integer in base 2. It wraps the \njava.lang.Integer.toBinaryString\n and java.lang.Long.toBinaryString` methods.\n\n\n\nSyntax\n\n\nSTRING\n math:bin(\nINT|LONG\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value in either 'integer' or 'long', that should be converted into an unsigned integer of base 2.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the input stream is given, the function converts it into an unsigned integer in base 2 and directs the output to the output stream, OutMediationStream. For example, bin(9) returns '1001'.\n\n\n\ncbrt \n(Function)\n\n\nThis function returns the cube-root of 'p1' which is in radians. It wraps the \njava.lang.Math.cbrt()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cbrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose cube-root should be found. Input is required to be in radians.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' is given, the function calculates the cube-root value for the same and directs the output to the output stream, OutMediationStream. For example, cbrt(17d) returns 2.5712815906582356.\n\n\n\nceil \n(Function)\n\n\nThis function returns the smallest double value, i.e., the closest to the negative infinity, that is greater than or equal to the \np1\n argument, and is equal to a mathematical integer. It wraps the \njava.lang.Math.ceil()\n method.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ceil(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose ceiling value is found.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;\n\n\n\n\n\nThis function calculates the ceiling value of the given 'inValue' and directs the result to 'OutMediationStream' output stream. For example, ceil(423.187d) returns 424.0.\n\n\n\nconv \n(Function)\n\n\nThis function converts \na\n from the \nfromBase\n base to the \ntoBase\n base.\n\n\n\nSyntax\n\n\nSTRING\n math:conv(\nSTRING\n a, \nINT\n from.base, \nINT\n to.base)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \na\n\n        \nThe value whose base should be changed. Input should be given as a 'String'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfrom.base\n\n        \nThe source base of the input parameter 'a'.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.base\n\n        \nThe target base that the input parameter 'a' should be converted into.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the input stream is given, and the base in which it currently resides in and the base to which it should be converted to is specified, the function converts it into a string in the target base and directs it to the output stream, OutMediationStream. For example, conv(\"7f\", 16, 10) returns \"127\".\n\n\n\ncopySign \n(Function)\n\n\nThis function returns a value of an input with the received \nmagnitude\n and \nsign\n of another input. It wraps the \njava.lang.Math.copySign()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:copySign(\nINT|LONG|FLOAT|DOUBLE\n magnitude, \nINT|LONG|FLOAT|DOUBLE\n sign)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmagnitude\n\n        \nThe magnitude of this parameter is used in the output attribute.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsign\n\n        \nThe sign of this parameter is used in the output attribute.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf two values are provided as 'inValue1' and 'inValue2', the function copies the magnitude and sign of the second argument into the first one and directs the result to the output stream, OutMediatonStream. For example, copySign(5.6d, -3.0d) returns -5.6.\n\n\n\ncos \n(Function)\n\n\nThis function returns the cosine of \np1\n which is in radians. It wraps the \njava.lang.Math.cos()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cos(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose cosine value should be found.The input is required to be in radians.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' is given, the function calculates the cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cos(6d) returns 0.9601702866503661.\n\n\n\ncosh \n(Function)\n\n\nThis function returns the hyperbolic cosine of \np1\n which is in radians. It wraps the \njava.lang.Math.cosh()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cosh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose hyperbolic cosine should be found. The input is required to be in radians.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' is given, the function calculates the hyperbolic cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cosh (6d) returns 201.7156361224559.\n\n\n\ne \n(Function)\n\n\nThis function returns the \njava.lang.Math.E\n constant, which is the closest double value to e, where e is the base of the natural logarithms. \n\n\n\nSyntax\n\n\nDOUBLE\n math:e()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;\n\n\n\n\n\nThis function returns the constant, 2.7182818284590452354 which is the closest double value to e and directs the output to 'OutMediationStream' output stream.\n\n\n\nexp \n(Function)\n\n\nThis function returns the Euler's number \ne\n raised to the power of \np1\n. It wraps the \njava.lang.Math.exp()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:exp(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe power that the Euler's number e is raised to.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the inputstream holds a value, this function calculates the corresponding Euler's number 'e' and directs it to the output stream, OutMediationStream. For example, exp(10.23) returns 27722.51006805505.\n\n\n\nfloor \n(Function)\n\n\nThis function wraps the \njava.lang.Math.floor()\n function and returns the largest value, i.e., closest to the positive infinity, that is less than or equal to \np1\n, and is equal to a mathematical integer.\n\n\n\nSyntax\n\n\nDOUBLE\n math:floor(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose floor value should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;\n\n\n\n\n\nThis function calculates the floor value of the given 'inValue' input and directs the output to the 'OutMediationStream' output stream. For example, (10.23) returns 10.0.\n\n\n\ngetExponent \n(Function)\n\n\nThis function returns the unbiased exponent that is used in the representation of \np1\n. This function wraps the \njava.lang.Math.getExponent()\n function.\n\n\n\nSyntax\n\n\nINT\n math:getExponent(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose unbiased exponent representation should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\n\nThis function calculates the unbiased exponent of a given input, 'inValue' and directs the result to the 'OutMediationStream' output stream. For example, getExponent(60984.1) returns 15.\n\n\n\nhex \n(Function)\n\n\nThis function wraps the \njava.lang.Double.toHexString() function. It returns a hexadecimal string representation of the input, \np1`.\n\n\n\nSyntax\n\n\nSTRING\n math:hex(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose hexadecimal value should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the input stream is provided, the function converts this into its corresponding hexadecimal format and directs the output to the output stream, OutMediationStream. For example, hex(200) returns \"c8\".\n\n\n\nisInfinite \n(Function)\n\n\nThis function wraps the \njava.lang.Float.isInfinite()\n and \njava.lang.Double.isInfinite()\n and returns \ntrue\n if \np1\n is infinitely large in magnitude and \nfalse\n if otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isInfinite(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThis is the value of the parameter that the function determines to be either infinite or finite.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;\n\n\n\n\n\nIf the value given in the 'inValue' in the input stream is of infinitely large magnitude, the function returns the value, 'true' and directs the result to the output stream, OutMediationStream'. For example, isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.\n\n\n\nisNan \n(Function)\n\n\nThis function wraps the \njava.lang.Float.isNaN()\n and \njava.lang.Double.isNaN()\n functions and returns \ntrue\n if \np1\n is NaN (Not-a-Number), and returns \nfalse\n if otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isNan(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter which the function determines to be either NaN or a number.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue1' in the input stream has a value that is undefined, then the function considers it as an 'NaN' value and directs 'True' to the output stream, OutMediationStream. For example, isNan(java.lang.Math.log(-12d)) returns true.\n\n\n\nln \n(Function)\n\n\nThis function returns the natural logarithm (base e) of \np1\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ln(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose natural logarithm (base e) should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the input stream is given, the function calculates its natural logarithm (base e) and directs the results to the output stream, 'OutMeditionStream'. For example, ln(11.453) returns 2.438251704415579.\n\n\n\nlog \n(Function)\n\n\nThis function returns the logarithm of the received \nnumber\n as per the given \nbase\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log(\nINT|LONG|FLOAT|DOUBLE\n number, \nINT|LONG|FLOAT|DOUBLE\n base)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nnumber\n\n        \nThe value of the parameter whose base should be changed.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbase\n\n        \nThe base value of the ouput.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the number and the base to which it has to be converted into is given in the input stream, the function calculates the number to the base specified and directs the result to the output stream, OutMediationStream. For example, log(34, 2f) returns 5.08746284125034.\n\n\n\nlog10 \n(Function)\n\n\nThis function returns the base 10 logarithm of \np1\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log10(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose base 10 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the input stream is given, the function calculates the base 10 logarithm of the same and directs the result to the output stream, OutMediatioStream. For example, log10(19.234) returns 1.2840696117100832.\n\n\n\nlog2 \n(Function)\n\n\nThis function returns the base 2 logarithm of \np1\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log2(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose base 2 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the input stream is given, the function calculates the base 2 logarithm of the same and returns the value to the output stream, OutMediationStream. For example log2(91d) returns 6.507794640198696.\n\n\n\nmax \n(Function)\n\n\nThis function returns the greater value of \np1\n and \np2\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:max(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nOne of the input values to be compared in order to find the larger value of the two\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nThe input value to be compared with 'p1' in order to find the larger value of the two.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf two input values 'inValue1, and 'inValue2' are given, the function compares them and directs the larger value to the output stream, OutMediationStream. For example, max(123.67d, 91) returns 123.67.\n\n\n\nmin \n(Function)\n\n\nThis function returns the smaller value of \np1\n and \np2\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:min(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nOne of the input values that are to be compared in order to find the smaller value.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nThe input value that is to be compared with 'p1' in order to find the smaller value.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf two input values, 'inValue1' and 'inValue2' are given, the function compares them and directs the smaller value of the two to the output stream, OutMediationStream. For example, min(123.67d, 91) returns 91.\n\n\n\noct \n(Function)\n\n\nThis function converts the input parameter \np1\n to octal.\n\n\n\nSyntax\n\n\nSTRING\n math:oct(\nINT|LONG\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose octal representation should be found.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the input stream is given, this function calculates the octal value corresponding to the same and directs it to the output stream, OutMediationStream. For example, oct(99l) returns \"143\".\n\n\n\nparseDouble \n(Function)\n\n\nThis function returns the double value of the string received.\n\n\n\nSyntax\n\n\nDOUBLE\n math:parseDouble(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted into a double value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the input stream holds a value, this function converts it into the corresponding double value and directs it to the output stream, OutMediationStream. For example, parseDouble(\"123\") returns 123.0.\n\n\n\nparseFloat \n(Function)\n\n\nThis function returns the float value of the received string.\n\n\n\nSyntax\n\n\nFLOAT\n math:parseFloat(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted into a float value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nThe function converts the input value given in 'inValue',into its corresponding float value and directs the result into the output stream, OutMediationStream. For example, parseFloat(\"123\") returns 123.0.\n\n\n\nparseInt \n(Function)\n\n\nThis function returns the integer value of the received string.\n\n\n\nSyntax\n\n\nINT\n math:parseInt(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to an integer.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nThe  function converts the 'inValue' into its corresponding integer value and directs the output to the output stream, OutMediationStream. For example, parseInt(\"123\") returns 123.\n\n\n\nparseLong \n(Function)\n\n\nThis function returns the long value of the string received.\n\n\n\nSyntax\n\n\nLONG\n math:parseLong(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a long value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nThe function converts the 'inValue' to its corresponding long value and directs the result to the output stream, OutMediationStream. For example, parseLong(\"123\") returns 123.\n\n\n\npi \n(Function)\n\n\nThis function returns the \njava.lang.Math.PI\n constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter. \n\n\n\nSyntax\n\n\nDOUBLE\n math:pi()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;\n\n\n\n\n\npi() always returns 3.141592653589793.\n\n\n\npower \n(Function)\n\n\nThis function raises the given value to a given power.\n\n\n\nSyntax\n\n\nDOUBLE\n math:power(\nINT|LONG|FLOAT|DOUBLE\n value, \nINT|LONG|FLOAT|DOUBLE\n to.power)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value that should be raised to the power of 'to.power' input parameter.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.power\n\n        \nThe power to which the 'value' input parameter should be raised.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;\n\n\n\n\n\nThis function raises the 'inValue1' to the power of 'inValue2' and directs the output to the output stream, 'OutMediationStream. For example, (5.6d, 3.0d) returns 175.61599999999996.\n\n\n\nrand \n(Function)\n\n\nThis returns a stream of pseudo-random numbers when a sequence of calls are sent to the \nrand()\n. Optionally, it is possible to define a seed, i.e., \nrand(seed)\n using which the pseudo-random numbers are generated. These functions internally use the \njava.util.Random\n class.\n\n\n\nSyntax\n\n\nDOUBLE\n math:rand(\nINT|LONG\n seed)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nseed\n\n        \nAn optional seed value that will be used to generate the random number sequence.\n\n        \ndefaultSeed\n\n        \nINT\nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\n\nIn the example given above, a random double value between 0 and 1 will be generated using math:rand().\n\n\n\nround \n(Function)\n\n\nThis function returns the value of the input argument rounded off to the closest integer/long value.\n\n\n\nSyntax\n\n\nINT|LONG\n math:round(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be rounded off to the closest integer/long value.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;\n\n\n\n\n\nThe function rounds off 'inValue1' to the closest int/long value and directs the output to the output stream, 'OutMediationStream'. For example, round(3252.353) returns 3252.\n\n\n\nsignum \n(Function)\n\n\nThis returns +1, 0, or -1 for the given positive, zero and negative values respectively. This function wraps the \njava.lang.Math.signum()\n function.\n\n\n\nSyntax\n\n\nINT\n math:signum(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked to be positive, negative or zero.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;\n\n\n\n\n\nThe function evaluates the 'inValue' given to be positive, negative or zero and directs the result to the output stream, 'OutMediationStream'. For example, signum(-6.32d) returns -1.\n\n\n\nsin \n(Function)\n\n\nThis returns the sine of the value given in radians. This function wraps the \njava.lang.Math.sin()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sin(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose sine value should be found. Input is required to be in radians.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;\n\n\n\n\n\nThe function calculates the sine value of the given 'inValue' and directs the output to the output stream, 'OutMediationStream. For example, sin(6d) returns -0.27941549819892586.\n\n\n\nsinh \n(Function)\n\n\nThis returns the hyperbolic sine of the value given in radians. This function wraps the \njava.lang.Math.sinh()\n function. \n\n\n\nSyntax\n\n\nDOUBLE\n math:sinh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose hyperbolic sine value should be found. Input is required to be in radians.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;\n\n\n\n\n\nThis function calculates the hyperbolic sine value of 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sinh(6d) returns 201.71315737027922.\n\n\n\nsqrt \n(Function)\n\n\nThis function returns the square-root of the given value. It wraps the \njava.lang.Math.sqrt()\ns function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sqrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose square-root value should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;\n\n\n\n\n\nThe function calculates the square-root value of the 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sqrt(4d) returns 2.\n\n\n\ntan \n(Function)\n\n\nThis function returns the tan of the given value in radians. It wraps the \njava.lang.Math.tan()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tan(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose tan value should be found. Input is required to be in radians.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;\n\n\n\n\n\nThis function calculates the tan value of the 'inValue' given and directs the output to the output stream, 'OutMediationStream'. For example, tan(6d) returns -0.29100619138474915.\n\n\n\ntanh \n(Function)\n\n\nThis function returns the hyperbolic tangent of the value given in radians. It wraps the \njava.lang.Math.tanh()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tanh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose hyperbolic tangent value should be found. Input is required to be in radians.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inVaue' in the input stream is given, this function calculates the hyperbolic tangent value of the same and directs the output to 'OutMediationStream' stream. For example, tanh(6d) returns 0.9999877116507956.\n\n\n\ntoDegrees \n(Function)\n\n\nThis function converts the value given in radians to degrees. It wraps the \njava.lang.Math.toDegrees()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toDegrees(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe input value in radians that should be converted to degrees.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;\n\n\n\n\n\nThe function converts the 'inValue' in the input stream from radians to degrees and directs the output to 'OutMediationStream' output stream. For example, toDegrees(6d) returns 343.77467707849394.\n\n\n\ntoRadians \n(Function)\n\n\nThis function converts the value given in degrees to radians. It wraps the \njava.lang.Math.toRadians()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toRadians(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe input value in degrees that should be converted to radians.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;\n\n\n\n\n\nThis function converts the input, from degrees to radians and directs the result to 'OutMediationStream' output stream. For example, toRadians(6d) returns 0.10471975511965977.", 
            "title": "4.1.0"
        }, 
        {
            "location": "/api/4.1.0/#api-docs-v410", 
            "text": "", 
            "title": "API Docs - v4.1.0"
        }, 
        {
            "location": "/api/4.1.0/#math", 
            "text": "", 
            "title": "Math"
        }, 
        {
            "location": "/api/4.1.0/#percentile-aggregate-function", 
            "text": "This functions returns the pth percentile value of a given argument.  Syntax  DOUBLE  math:percentile( INT|LONG|FLOAT|DOUBLE  arg,  DOUBLE  p)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value of the parameter whose percentile should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p \n         Estimate of the percentile to be found (pth percentile) where p is any number greater than 0 or lesser than or equal to 100. \n         \n         DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;  This function returns the percentile value based on the argument given. For example, math:percentile(temperature, 97.0) returns the 97th percentile value of all the temperature events.", 
            "title": "percentile (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.0/#abs-function", 
            "text": "This function returns the absolute value of the given parameter. It wraps the  java.lang.Math.abs()  function.  Syntax  DOUBLE  math:abs( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The parameter whose absolute value is found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;  Irrespective of whether the 'invalue' in the input stream holds a value of abs(3) or abs(-3),the function returns 3 since the absolute value of both 3 and -3 is 3. The result directed to OutMediationStream stream.", 
            "title": "abs (Function)"
        }, 
        {
            "location": "/api/4.1.0/#acos-function", 
            "text": "If -1  = p1  = 1, this function returns the arc-cosine (inverse cosine) value of p1.If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.acos() function.  Syntax  DOUBLE  math:acos( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose arc-cosine (inverse cosine) value is found. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;  If the 'inValue' in the input stream is given, the function calculates the arc-cosine value of it and returns the arc-cosine value to the output stream, OutMediationStream. For example, acos(0.5) returns 1.0471975511965979.", 
            "title": "acos (Function)"
        }, 
        {
            "location": "/api/4.1.0/#asin-function", 
            "text": "If -1  = p1  = 1, this function returns the arc-sin (inverse sine) value of p1. If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.asin() function.  Syntax  DOUBLE  math:asin( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose arc-sin (inverse sine) value is found. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;  If the 'inValue' in the input stream is given, the function calculates the arc-sin value of it and returns the arc-sin value to the output stream, OutMediationStream. For example, asin(0.5) returns 0.5235987755982989.", 
            "title": "asin (Function)"
        }, 
        {
            "location": "/api/4.1.0/#atan-function", 
            "text": "1. If a single  p1  is received, this function returns the arc-tangent (inverse tangent) value of  p1 .  2. If  p1  is received along with an optional  p1 , it considers them as x and y coordinates and returns the arc-tangent (inverse tangent) value.  The returned value is in radian scale. This function wraps the  java.lang.Math.atan()  function.  Syntax  DOUBLE  math:atan( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose arc-tangent (inverse tangent) is found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p1 \n         This optional parameter represents the y coordinate of the (x,y) coordinate pair. \n         0D \n         INT LONG FLOAT DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;  If the 'inValue1' in the input stream is given, the function calculates the arc-tangent value of it and returns the arc-tangent value to the output stream, OutMediationStream. If both the 'inValue1' and 'inValue2' are given, then the function considers them to be x and y coordinates respectively and returns the calculated arc-tangent value to the output stream, OutMediationStream. For example, atan(12d, 5d) returns 1.1760052070951352.", 
            "title": "atan (Function)"
        }, 
        {
            "location": "/api/4.1.0/#bin-function", 
            "text": "This function returns a string representation of the p1 argument, that is of either 'integer' or 'long' data type, as an unsigned integer in base 2. It wraps the  java.lang.Integer.toBinaryString  and java.lang.Long.toBinaryString` methods.  Syntax  STRING  math:bin( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value in either 'integer' or 'long', that should be converted into an unsigned integer of base 2. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;  If the 'inValue' in the input stream is given, the function converts it into an unsigned integer in base 2 and directs the output to the output stream, OutMediationStream. For example, bin(9) returns '1001'.", 
            "title": "bin (Function)"
        }, 
        {
            "location": "/api/4.1.0/#cbrt-function", 
            "text": "This function returns the cube-root of 'p1' which is in radians. It wraps the  java.lang.Math.cbrt()  function.  Syntax  DOUBLE  math:cbrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose cube-root should be found. Input is required to be in radians. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;  If the 'inValue' is given, the function calculates the cube-root value for the same and directs the output to the output stream, OutMediationStream. For example, cbrt(17d) returns 2.5712815906582356.", 
            "title": "cbrt (Function)"
        }, 
        {
            "location": "/api/4.1.0/#ceil-function", 
            "text": "This function returns the smallest double value, i.e., the closest to the negative infinity, that is greater than or equal to the  p1  argument, and is equal to a mathematical integer. It wraps the  java.lang.Math.ceil()  method.  Syntax  DOUBLE  math:ceil( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose ceiling value is found. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;  This function calculates the ceiling value of the given 'inValue' and directs the result to 'OutMediationStream' output stream. For example, ceil(423.187d) returns 424.0.", 
            "title": "ceil (Function)"
        }, 
        {
            "location": "/api/4.1.0/#conv-function", 
            "text": "This function converts  a  from the  fromBase  base to the  toBase  base.  Syntax  STRING  math:conv( STRING  a,  INT  from.base,  INT  to.base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         a \n         The value whose base should be changed. Input should be given as a 'String'. \n         \n         STRING \n         No \n         No \n     \n     \n         from.base \n         The source base of the input parameter 'a'. \n         \n         INT \n         No \n         No \n     \n     \n         to.base \n         The target base that the input parameter 'a' should be converted into. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;  If the 'inValue' in the input stream is given, and the base in which it currently resides in and the base to which it should be converted to is specified, the function converts it into a string in the target base and directs it to the output stream, OutMediationStream. For example, conv(\"7f\", 16, 10) returns \"127\".", 
            "title": "conv (Function)"
        }, 
        {
            "location": "/api/4.1.0/#copysign-function", 
            "text": "This function returns a value of an input with the received  magnitude  and  sign  of another input. It wraps the  java.lang.Math.copySign()  function.  Syntax  DOUBLE  math:copySign( INT|LONG|FLOAT|DOUBLE  magnitude,  INT|LONG|FLOAT|DOUBLE  sign)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         magnitude \n         The magnitude of this parameter is used in the output attribute. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         sign \n         The sign of this parameter is used in the output attribute. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;  If two values are provided as 'inValue1' and 'inValue2', the function copies the magnitude and sign of the second argument into the first one and directs the result to the output stream, OutMediatonStream. For example, copySign(5.6d, -3.0d) returns -5.6.", 
            "title": "copySign (Function)"
        }, 
        {
            "location": "/api/4.1.0/#cos-function", 
            "text": "This function returns the cosine of  p1  which is in radians. It wraps the  java.lang.Math.cos()  function.  Syntax  DOUBLE  math:cos( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose cosine value should be found.The input is required to be in radians. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;  If the 'inValue' is given, the function calculates the cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cos(6d) returns 0.9601702866503661.", 
            "title": "cos (Function)"
        }, 
        {
            "location": "/api/4.1.0/#cosh-function", 
            "text": "This function returns the hyperbolic cosine of  p1  which is in radians. It wraps the  java.lang.Math.cosh()  function.  Syntax  DOUBLE  math:cosh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose hyperbolic cosine should be found. The input is required to be in radians. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;  If the 'inValue' is given, the function calculates the hyperbolic cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cosh (6d) returns 201.7156361224559.", 
            "title": "cosh (Function)"
        }, 
        {
            "location": "/api/4.1.0/#e-function", 
            "text": "This function returns the  java.lang.Math.E  constant, which is the closest double value to e, where e is the base of the natural logarithms.   Syntax  DOUBLE  math:e()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;  This function returns the constant, 2.7182818284590452354 which is the closest double value to e and directs the output to 'OutMediationStream' output stream.", 
            "title": "e (Function)"
        }, 
        {
            "location": "/api/4.1.0/#exp-function", 
            "text": "This function returns the Euler's number  e  raised to the power of  p1 . It wraps the  java.lang.Math.exp()  function.  Syntax  DOUBLE  math:exp( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The power that the Euler's number e is raised to. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;  If the 'inValue' in the inputstream holds a value, this function calculates the corresponding Euler's number 'e' and directs it to the output stream, OutMediationStream. For example, exp(10.23) returns 27722.51006805505.", 
            "title": "exp (Function)"
        }, 
        {
            "location": "/api/4.1.0/#floor-function", 
            "text": "This function wraps the  java.lang.Math.floor()  function and returns the largest value, i.e., closest to the positive infinity, that is less than or equal to  p1 , and is equal to a mathematical integer.  Syntax  DOUBLE  math:floor( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose floor value should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;  This function calculates the floor value of the given 'inValue' input and directs the output to the 'OutMediationStream' output stream. For example, (10.23) returns 10.0.", 
            "title": "floor (Function)"
        }, 
        {
            "location": "/api/4.1.0/#getexponent-function", 
            "text": "This function returns the unbiased exponent that is used in the representation of  p1 . This function wraps the  java.lang.Math.getExponent()  function.  Syntax  INT  math:getExponent( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose unbiased exponent representation should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;  This function calculates the unbiased exponent of a given input, 'inValue' and directs the result to the 'OutMediationStream' output stream. For example, getExponent(60984.1) returns 15.", 
            "title": "getExponent (Function)"
        }, 
        {
            "location": "/api/4.1.0/#hex-function", 
            "text": "This function wraps the  java.lang.Double.toHexString() function. It returns a hexadecimal string representation of the input,  p1`.  Syntax  STRING  math:hex( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose hexadecimal value should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;  If the 'inValue' in the input stream is provided, the function converts this into its corresponding hexadecimal format and directs the output to the output stream, OutMediationStream. For example, hex(200) returns \"c8\".", 
            "title": "hex (Function)"
        }, 
        {
            "location": "/api/4.1.0/#isinfinite-function", 
            "text": "This function wraps the  java.lang.Float.isInfinite()  and  java.lang.Double.isInfinite()  and returns  true  if  p1  is infinitely large in magnitude and  false  if otherwise.  Syntax  BOOL  math:isInfinite( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         This is the value of the parameter that the function determines to be either infinite or finite. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;  If the value given in the 'inValue' in the input stream is of infinitely large magnitude, the function returns the value, 'true' and directs the result to the output stream, OutMediationStream'. For example, isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.", 
            "title": "isInfinite (Function)"
        }, 
        {
            "location": "/api/4.1.0/#isnan-function", 
            "text": "This function wraps the  java.lang.Float.isNaN()  and  java.lang.Double.isNaN()  functions and returns  true  if  p1  is NaN (Not-a-Number), and returns  false  if otherwise.  Syntax  BOOL  math:isNan( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter which the function determines to be either NaN or a number. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;  If the 'inValue1' in the input stream has a value that is undefined, then the function considers it as an 'NaN' value and directs 'True' to the output stream, OutMediationStream. For example, isNan(java.lang.Math.log(-12d)) returns true.", 
            "title": "isNan (Function)"
        }, 
        {
            "location": "/api/4.1.0/#ln-function", 
            "text": "This function returns the natural logarithm (base e) of  p1 .  Syntax  DOUBLE  math:ln( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose natural logarithm (base e) should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;  If the 'inValue' in the input stream is given, the function calculates its natural logarithm (base e) and directs the results to the output stream, 'OutMeditionStream'. For example, ln(11.453) returns 2.438251704415579.", 
            "title": "ln (Function)"
        }, 
        {
            "location": "/api/4.1.0/#log-function", 
            "text": "This function returns the logarithm of the received  number  as per the given  base .  Syntax  DOUBLE  math:log( INT|LONG|FLOAT|DOUBLE  number,  INT|LONG|FLOAT|DOUBLE  base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         number \n         The value of the parameter whose base should be changed. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         base \n         The base value of the ouput. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;  If the number and the base to which it has to be converted into is given in the input stream, the function calculates the number to the base specified and directs the result to the output stream, OutMediationStream. For example, log(34, 2f) returns 5.08746284125034.", 
            "title": "log (Function)"
        }, 
        {
            "location": "/api/4.1.0/#log10-function", 
            "text": "This function returns the base 10 logarithm of  p1 .  Syntax  DOUBLE  math:log10( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose base 10 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;  If the 'inValue' in the input stream is given, the function calculates the base 10 logarithm of the same and directs the result to the output stream, OutMediatioStream. For example, log10(19.234) returns 1.2840696117100832.", 
            "title": "log10 (Function)"
        }, 
        {
            "location": "/api/4.1.0/#log2-function", 
            "text": "This function returns the base 2 logarithm of  p1 .  Syntax  DOUBLE  math:log2( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose base 2 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;  If the 'inValue' in the input stream is given, the function calculates the base 2 logarithm of the same and returns the value to the output stream, OutMediationStream. For example log2(91d) returns 6.507794640198696.", 
            "title": "log2 (Function)"
        }, 
        {
            "location": "/api/4.1.0/#max-function", 
            "text": "This function returns the greater value of  p1  and  p2 .  Syntax  DOUBLE  math:max( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         One of the input values to be compared in order to find the larger value of the two \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         The input value to be compared with 'p1' in order to find the larger value of the two. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;  If two input values 'inValue1, and 'inValue2' are given, the function compares them and directs the larger value to the output stream, OutMediationStream. For example, max(123.67d, 91) returns 123.67.", 
            "title": "max (Function)"
        }, 
        {
            "location": "/api/4.1.0/#min-function", 
            "text": "This function returns the smaller value of  p1  and  p2 .  Syntax  DOUBLE  math:min( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         One of the input values that are to be compared in order to find the smaller value. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         The input value that is to be compared with 'p1' in order to find the smaller value. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;  If two input values, 'inValue1' and 'inValue2' are given, the function compares them and directs the smaller value of the two to the output stream, OutMediationStream. For example, min(123.67d, 91) returns 91.", 
            "title": "min (Function)"
        }, 
        {
            "location": "/api/4.1.0/#oct-function", 
            "text": "This function converts the input parameter  p1  to octal.  Syntax  STRING  math:oct( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose octal representation should be found. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  If the 'inValue' in the input stream is given, this function calculates the octal value corresponding to the same and directs it to the output stream, OutMediationStream. For example, oct(99l) returns \"143\".", 
            "title": "oct (Function)"
        }, 
        {
            "location": "/api/4.1.0/#parsedouble-function", 
            "text": "This function returns the double value of the string received.  Syntax  DOUBLE  math:parseDouble( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted into a double value. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;  If the 'inValue' in the input stream holds a value, this function converts it into the corresponding double value and directs it to the output stream, OutMediationStream. For example, parseDouble(\"123\") returns 123.0.", 
            "title": "parseDouble (Function)"
        }, 
        {
            "location": "/api/4.1.0/#parsefloat-function", 
            "text": "This function returns the float value of the received string.  Syntax  FLOAT  math:parseFloat( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted into a float value. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;  The function converts the input value given in 'inValue',into its corresponding float value and directs the result into the output stream, OutMediationStream. For example, parseFloat(\"123\") returns 123.0.", 
            "title": "parseFloat (Function)"
        }, 
        {
            "location": "/api/4.1.0/#parseint-function", 
            "text": "This function returns the integer value of the received string.  Syntax  INT  math:parseInt( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to an integer. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;  The  function converts the 'inValue' into its corresponding integer value and directs the output to the output stream, OutMediationStream. For example, parseInt(\"123\") returns 123.", 
            "title": "parseInt (Function)"
        }, 
        {
            "location": "/api/4.1.0/#parselong-function", 
            "text": "This function returns the long value of the string received.  Syntax  LONG  math:parseLong( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a long value. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;  The function converts the 'inValue' to its corresponding long value and directs the result to the output stream, OutMediationStream. For example, parseLong(\"123\") returns 123.", 
            "title": "parseLong (Function)"
        }, 
        {
            "location": "/api/4.1.0/#pi-function", 
            "text": "This function returns the  java.lang.Math.PI  constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter.   Syntax  DOUBLE  math:pi()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;  pi() always returns 3.141592653589793.", 
            "title": "pi (Function)"
        }, 
        {
            "location": "/api/4.1.0/#power-function", 
            "text": "This function raises the given value to a given power.  Syntax  DOUBLE  math:power( INT|LONG|FLOAT|DOUBLE  value,  INT|LONG|FLOAT|DOUBLE  to.power)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value that should be raised to the power of 'to.power' input parameter. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         to.power \n         The power to which the 'value' input parameter should be raised. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;  This function raises the 'inValue1' to the power of 'inValue2' and directs the output to the output stream, 'OutMediationStream. For example, (5.6d, 3.0d) returns 175.61599999999996.", 
            "title": "power (Function)"
        }, 
        {
            "location": "/api/4.1.0/#rand-function", 
            "text": "This returns a stream of pseudo-random numbers when a sequence of calls are sent to the  rand() . Optionally, it is possible to define a seed, i.e.,  rand(seed)  using which the pseudo-random numbers are generated. These functions internally use the  java.util.Random  class.  Syntax  DOUBLE  math:rand( INT|LONG  seed)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         seed \n         An optional seed value that will be used to generate the random number sequence. \n         defaultSeed \n         INT LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  In the example given above, a random double value between 0 and 1 will be generated using math:rand().", 
            "title": "rand (Function)"
        }, 
        {
            "location": "/api/4.1.0/#round-function", 
            "text": "This function returns the value of the input argument rounded off to the closest integer/long value.  Syntax  INT|LONG  math:round( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be rounded off to the closest integer/long value. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;  The function rounds off 'inValue1' to the closest int/long value and directs the output to the output stream, 'OutMediationStream'. For example, round(3252.353) returns 3252.", 
            "title": "round (Function)"
        }, 
        {
            "location": "/api/4.1.0/#signum-function", 
            "text": "This returns +1, 0, or -1 for the given positive, zero and negative values respectively. This function wraps the  java.lang.Math.signum()  function.  Syntax  INT  math:signum( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked to be positive, negative or zero. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;  The function evaluates the 'inValue' given to be positive, negative or zero and directs the result to the output stream, 'OutMediationStream'. For example, signum(-6.32d) returns -1.", 
            "title": "signum (Function)"
        }, 
        {
            "location": "/api/4.1.0/#sin-function", 
            "text": "This returns the sine of the value given in radians. This function wraps the  java.lang.Math.sin()  function.  Syntax  DOUBLE  math:sin( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose sine value should be found. Input is required to be in radians. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;  The function calculates the sine value of the given 'inValue' and directs the output to the output stream, 'OutMediationStream. For example, sin(6d) returns -0.27941549819892586.", 
            "title": "sin (Function)"
        }, 
        {
            "location": "/api/4.1.0/#sinh-function", 
            "text": "This returns the hyperbolic sine of the value given in radians. This function wraps the  java.lang.Math.sinh()  function.   Syntax  DOUBLE  math:sinh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose hyperbolic sine value should be found. Input is required to be in radians. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;  This function calculates the hyperbolic sine value of 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sinh(6d) returns 201.71315737027922.", 
            "title": "sinh (Function)"
        }, 
        {
            "location": "/api/4.1.0/#sqrt-function", 
            "text": "This function returns the square-root of the given value. It wraps the  java.lang.Math.sqrt() s function.  Syntax  DOUBLE  math:sqrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose square-root value should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;  The function calculates the square-root value of the 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sqrt(4d) returns 2.", 
            "title": "sqrt (Function)"
        }, 
        {
            "location": "/api/4.1.0/#tan-function", 
            "text": "This function returns the tan of the given value in radians. It wraps the  java.lang.Math.tan()  function.  Syntax  DOUBLE  math:tan( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose tan value should be found. Input is required to be in radians. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;  This function calculates the tan value of the 'inValue' given and directs the output to the output stream, 'OutMediationStream'. For example, tan(6d) returns -0.29100619138474915.", 
            "title": "tan (Function)"
        }, 
        {
            "location": "/api/4.1.0/#tanh-function", 
            "text": "This function returns the hyperbolic tangent of the value given in radians. It wraps the  java.lang.Math.tanh()  function.  Syntax  DOUBLE  math:tanh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose hyperbolic tangent value should be found. Input is required to be in radians. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;  If the 'inVaue' in the input stream is given, this function calculates the hyperbolic tangent value of the same and directs the output to 'OutMediationStream' stream. For example, tanh(6d) returns 0.9999877116507956.", 
            "title": "tanh (Function)"
        }, 
        {
            "location": "/api/4.1.0/#todegrees-function", 
            "text": "This function converts the value given in radians to degrees. It wraps the  java.lang.Math.toDegrees()  function.  Syntax  DOUBLE  math:toDegrees( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The input value in radians that should be converted to degrees. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;  The function converts the 'inValue' in the input stream from radians to degrees and directs the output to 'OutMediationStream' output stream. For example, toDegrees(6d) returns 343.77467707849394.", 
            "title": "toDegrees (Function)"
        }, 
        {
            "location": "/api/4.1.0/#toradians-function", 
            "text": "This function converts the value given in degrees to radians. It wraps the  java.lang.Math.toRadians()  function.  Syntax  DOUBLE  math:toRadians( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The input value in degrees that should be converted to radians. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;  This function converts the input, from degrees to radians and directs the result to 'OutMediationStream' output stream. For example, toRadians(6d) returns 0.10471975511965977.", 
            "title": "toRadians (Function)"
        }, 
        {
            "location": "/api/4.0.21/", 
            "text": "API Docs - v4.0.21\n\n\nMath\n\n\npercentile \n(Aggregate Function)\n\n\nThis functions returns the pth percentile value of a given argument.\n\n\n\nSyntax\n\n\nDOUBLE\n math:percentile(\nINT|LONG|FLOAT|DOUBLE\n arg, \nDOUBLE\n p)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value of the parameter whose percentile should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np\n\n        \nEstimate of the percentile to be found (pth percentile) where p is any number greater than 0 or lesser than or equal to 100.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;\n\n\n\n\n\nThis function returns the percentile value based on the argument given. For example, math:percentile(temperature, 97.0) returns the 97th percentile value of all the temperature events.\n\n\n\nabs \n(Function)\n\n\nThis function returns the absolute value of the given parameter. It wraps the \njava.lang.Math.abs()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:abs(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe parameter whose absolute value is found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;\n\n\n\n\n\nIrrespective of whether the 'invalue' in the input stream holds a value of abs(3) or abs(-3),the function returns 3 since the absolute value of both 3 and -3 is 3. The result directed to OutMediationStream stream.\n\n\n\nacos \n(Function)\n\n\nIf -1 \n= p1 \n= 1, this function returns the arc-cosine (inverse cosine) value of p1.If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.acos() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:acos(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose arc-cosine (inverse cosine) value is found.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the input stream is given, the function calculates the arc-cosine value of it and returns the arc-cosine value to the output stream, OutMediationStream. For example, acos(0.5) returns 1.0471975511965979.\n\n\n\nasin \n(Function)\n\n\nIf -1 \n= p1 \n= 1, this function returns the arc-sin (inverse sine) value of p1. If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.asin() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:asin(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose arc-sin (inverse sine) value is found.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the input stream is given, the function calculates the arc-sin value of it and returns the arc-sin value to the output stream, OutMediationStream. For example, asin(0.5) returns 0.5235987755982989.\n\n\n\natan \n(Function)\n\n\n1. If a single \np1\n is received, this function returns the arc-tangent (inverse tangent) value of \np1\n. \n2. If \np1\n is received along with an optional \np1\n, it considers them as x and y coordinates and returns the arc-tangent (inverse tangent) value. \nThe returned value is in radian scale. This function wraps the \njava.lang.Math.atan()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:atan(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose arc-tangent (inverse tangent) is found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np1\n\n        \nThis optional parameter represents the y coordinate of the (x,y) coordinate pair.\n\n        \n0D\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue1' in the input stream is given, the function calculates the arc-tangent value of it and returns the arc-tangent value to the output stream, OutMediationStream. If both the 'inValue1' and 'inValue2' are given, then the function considers them to be x and y coordinates respectively and returns the calculated arc-tangent value to the output stream, OutMediationStream. For example, atan(12d, 5d) returns 1.1760052070951352.\n\n\n\nbin \n(Function)\n\n\nThis function returns a string representation of the p1 argument, that is of either 'integer' or 'long' data type, as an unsigned integer in base 2. It wraps the \njava.lang.Integer.toBinaryString\n and java.lang.Long.toBinaryString` methods.\n\n\n\nSyntax\n\n\nSTRING\n math:bin(\nINT|LONG\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value in either 'integer' or 'long', that should be converted into an unsigned integer of base 2.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the input stream is given, the function converts it into an unsigned integer in base 2 and directs the output to the output stream, OutMediationStream. For example, bin(9) returns '1001'.\n\n\n\ncbrt \n(Function)\n\n\nThis function returns the cube-root of 'p1' which is in radians. It wraps the \njava.lang.Math.cbrt()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cbrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose cube-root should be found. Input is required to be in radians.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' is given, the function calculates the cube-root value for the same and directs the output to the output stream, OutMediationStream. For example, cbrt(17d) returns 2.5712815906582356.\n\n\n\nceil \n(Function)\n\n\nThis function returns the smallest double value, i.e., the closest to the negative infinity, that is greater than or equal to the \np1\n argument, and is equal to a mathematical integer. It wraps the \njava.lang.Math.ceil()\n method.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ceil(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose ceiling value is found.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;\n\n\n\n\n\nThis function calculates the ceiling value of the given 'inValue' and directs the result to 'OutMediationStream' output stream. For example, ceil(423.187d) returns 424.0.\n\n\n\nconv \n(Function)\n\n\nThis function converts \na\n from the \nfromBase\n base to the \ntoBase\n base.\n\n\n\nSyntax\n\n\nSTRING\n math:conv(\nSTRING\n a, \nINT\n from.base, \nINT\n to.base)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \na\n\n        \nThe value whose base should be changed. Input should be given as a 'String'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfrom.base\n\n        \nThe source base of the input parameter 'a'.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.base\n\n        \nThe target base that the input parameter 'a' should be converted into.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the input stream is given, and the base in which it currently resides in and the base to which it should be converted to is specified, the function converts it into a string in the target base and directs it to the output stream, OutMediationStream. For example, conv(\"7f\", 16, 10) returns \"127\".\n\n\n\ncopySign \n(Function)\n\n\nThis function returns a value of an input with the received \nmagnitude\n and \nsign\n of another input. It wraps the \njava.lang.Math.copySign()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:copySign(\nINT|LONG|FLOAT|DOUBLE\n magnitude, \nINT|LONG|FLOAT|DOUBLE\n sign)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmagnitude\n\n        \nThe magnitude of this parameter is used in the output attribute.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsign\n\n        \nThe sign of this parameter is used in the output attribute.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf two values are provided as 'inValue1' and 'inValue2', the function copies the magnitude and sign of the second argument into the first one and directs the result to the output stream, OutMediatonStream. For example, copySign(5.6d, -3.0d) returns -5.6.\n\n\n\ncos \n(Function)\n\n\nThis function returns the cosine of \np1\n which is in radians. It wraps the \njava.lang.Math.cos()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cos(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose cosine value should be found.The input is required to be in radians.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' is given, the function calculates the cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cos(6d) returns 0.9601702866503661.\n\n\n\ncosh \n(Function)\n\n\nThis function returns the hyperbolic cosine of \np1\n which is in radians. It wraps the \njava.lang.Math.cosh()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cosh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose hyperbolic cosine should be found. The input is required to be in radians.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' is given, the function calculates the hyperbolic cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cosh (6d) returns 201.7156361224559.\n\n\n\ne \n(Function)\n\n\nThis function returns the \njava.lang.Math.E\n constant, which is the closest double value to e, where e is the base of the natural logarithms. \n\n\n\nSyntax\n\n\nDOUBLE\n math:e()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;\n\n\n\n\n\nThis function returns the constant, 2.7182818284590452354 which is the closest double value to e and directs the output to 'OutMediationStream' output stream.\n\n\n\nexp \n(Function)\n\n\nThis function returns the Euler's number \ne\n raised to the power of \np1\n. It wraps the \njava.lang.Math.exp()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:exp(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe power that the Euler's number e is raised to.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the inputstream holds a value, this function calculates the corresponding Euler's number 'e' and directs it to the output stream, OutMediationStream. For example, exp(10.23) returns 27722.51006805505.\n\n\n\nfloor \n(Function)\n\n\nThis function wraps the \njava.lang.Math.floor()\n function and returns the largest value, i.e., closest to the positive infinity, that is less than or equal to \np1\n, and is equal to a mathematical integer.\n\n\n\nSyntax\n\n\nDOUBLE\n math:floor(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose floor value should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;\n\n\n\n\n\nThis function calculates the floor value of the given 'inValue' input and directs the output to the 'OutMediationStream' output stream. For example, (10.23) returns 10.0.\n\n\n\ngetExponent \n(Function)\n\n\nThis function returns the unbiased exponent that is used in the representation of \np1\n. This function wraps the \njava.lang.Math.getExponent()\n function.\n\n\n\nSyntax\n\n\nINT\n math:getExponent(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose unbiased exponent representation should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\n\nThis function calculates the unbiased exponent of a given input, 'inValue' and directs the result to the 'OutMediationStream' output stream. For example, getExponent(60984.1) returns 15.\n\n\n\nhex \n(Function)\n\n\nThis function wraps the \njava.lang.Double.toHexString() function. It returns a hexadecimal string representation of the input, \np1`.\n\n\n\nSyntax\n\n\nSTRING\n math:hex(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose hexadecimal value should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the input stream is provided, the function converts this into its corresponding hexadecimal format and directs the output to the output stream, OutMediationStream. For example, hex(200) returns \"c8\".\n\n\n\nisInfinite \n(Function)\n\n\nThis function wraps the \njava.lang.Float.isInfinite()\n and \njava.lang.Double.isInfinite()\n and returns \ntrue\n if \np1\n is infinitely large in magnitude and \nfalse\n if otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isInfinite(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThis is the value of the parameter that the function determines to be either infinite or finite.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;\n\n\n\n\n\nIf the value given in the 'inValue' in the input stream is of infinitely large magnitude, the function returns the value, 'true' and directs the result to the output stream, OutMediationStream'. For example, isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.\n\n\n\nisNan \n(Function)\n\n\nThis function wraps the \njava.lang.Float.isNaN()\n and \njava.lang.Double.isNaN()\n functions and returns \ntrue\n if \np1\n is NaN (Not-a-Number), and returns \nfalse\n if otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isNan(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter which the function determines to be either NaN or a number.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue1' in the input stream has a value that is undefined, then the function considers it as an 'NaN' value and directs 'True' to the output stream, OutMediationStream. For example, isNan(java.lang.Math.log(-12d)) returns true.\n\n\n\nln \n(Function)\n\n\nThis function returns the natural logarithm (base e) of \np1\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ln(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose natural logarithm (base e) should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the input stream is given, the function calculates its natural logarithm (base e) and directs the results to the output stream, 'OutMeditionStream'. For example, ln(11.453) returns 2.438251704415579.\n\n\n\nlog \n(Function)\n\n\nThis function returns the logarithm of the received \nnumber\n as per the given \nbase\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log(\nINT|LONG|FLOAT|DOUBLE\n number, \nINT|LONG|FLOAT|DOUBLE\n base)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nnumber\n\n        \nThe value of the parameter whose base should be changed.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbase\n\n        \nThe base value of the ouput.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the number and the base to which it has to be converted into is given in the input stream, the function calculates the number to the base specified and directs the result to the output stream, OutMediationStream. For example, log(34, 2f) returns 5.08746284125034.\n\n\n\nlog10 \n(Function)\n\n\nThis function returns the base 10 logarithm of \np1\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log10(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose base 10 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the input stream is given, the function calculates the base 10 logarithm of the same and directs the result to the output stream, OutMediatioStream. For example, log10(19.234) returns 1.2840696117100832.\n\n\n\nlog2 \n(Function)\n\n\nThis function returns the base 2 logarithm of \np1\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log2(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose base 2 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the input stream is given, the function calculates the base 2 logarithm of the same and returns the value to the output stream, OutMediationStream. For example log2(91d) returns 6.507794640198696.\n\n\n\nmax \n(Function)\n\n\nThis function returns the greater value of \np1\n and \np2\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:max(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nOne of the input values to be compared in order to find the larger value of the two\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nThe input value to be compared with 'p1' in order to find the larger value of the two.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf two input values 'inValue1, and 'inValue2' are given, the function compares them and directs the larger value to the output stream, OutMediationStream. For example, max(123.67d, 91) returns 123.67.\n\n\n\nmin \n(Function)\n\n\nThis function returns the smaller value of \np1\n and \np2\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:min(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nOne of the input values that are to be compared in order to find the smaller value.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nThe input value that is to be compared with 'p1' in order to find the smaller value.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf two input values, 'inValue1' and 'inValue2' are given, the function compares them and directs the smaller value of the two to the output stream, OutMediationStream. For example, min(123.67d, 91) returns 91.\n\n\n\noct \n(Function)\n\n\nThis function converts the input parameter \np1\n to octal.\n\n\n\nSyntax\n\n\nSTRING\n math:oct(\nINT|LONG\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose octal representation should be found.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the input stream is given, this function calculates the octal value corresponding to the same and directs it to the output stream, OutMediationStream. For example, oct(99l) returns \"143\".\n\n\n\nparseDouble \n(Function)\n\n\nThis function returns the double value of the string received.\n\n\n\nSyntax\n\n\nDOUBLE\n math:parseDouble(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted into a double value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the input stream holds a value, this function converts it into the corresponding double value and directs it to the output stream, OutMediationStream. For example, parseDouble(\"123\") returns 123.0.\n\n\n\nparseFloat \n(Function)\n\n\nThis function returns the float value of the received string.\n\n\n\nSyntax\n\n\nFLOAT\n math:parseFloat(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted into a float value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nThe function converts the input value given in 'inValue',into its corresponding float value and directs the result into the output stream, OutMediationStream. For example, parseFloat(\"123\") returns 123.0.\n\n\n\nparseInt \n(Function)\n\n\nThis function returns the integer value of the received string.\n\n\n\nSyntax\n\n\nINT\n math:parseInt(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to an integer.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nThe  function converts the 'inValue' into its corresponding integer value and directs the output to the output stream, OutMediationStream. For example, parseInt(\"123\") returns 123.\n\n\n\nparseLong \n(Function)\n\n\nThis function returns the long value of the string received.\n\n\n\nSyntax\n\n\nLONG\n math:parseLong(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a long value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nThe function converts the 'inValue' to its corresponding long value and directs the result to the output stream, OutMediationStream. For example, parseLong(\"123\") returns 123.\n\n\n\npi \n(Function)\n\n\nThis function returns the \njava.lang.Math.PI\n constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter. \n\n\n\nSyntax\n\n\nDOUBLE\n math:pi()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;\n\n\n\n\n\npi() always returns 3.141592653589793.\n\n\n\npower \n(Function)\n\n\nThis function raises the given value to a given power.\n\n\n\nSyntax\n\n\nDOUBLE\n math:power(\nINT|LONG|FLOAT|DOUBLE\n value, \nINT|LONG|FLOAT|DOUBLE\n to.power)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value that should be raised to the power of 'to.power' input parameter.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.power\n\n        \nThe power to which the 'value' input parameter should be raised.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;\n\n\n\n\n\nThis function raises the 'inValue1' to the power of 'inValue2' and directs the output to the output stream, 'OutMediationStream. For example, (5.6d, 3.0d) returns 175.61599999999996.\n\n\n\nrand \n(Function)\n\n\nThis returns a stream of pseudo-random numbers when a sequence of calls are sent to the \nrand()\n. Optionally, it is possible to define a seed, i.e., \nrand(seed)\n using which the pseudo-random numbers are generated. These functions internally use the \njava.util.Random\n class.\n\n\n\nSyntax\n\n\nDOUBLE\n math:rand(\nINT|LONG\n seed)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nseed\n\n        \nAn optional seed value that will be used to generate the random number sequence.\n\n        \ndefaultSeed\n\n        \nINT\nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\n\nIn the example given above, a random double value between 0 and 1 will be generated using math:rand().\n\n\n\nround \n(Function)\n\n\nThis function returns the value of the input argument rounded off to the closest integer/long value.\n\n\n\nSyntax\n\n\nINT|LONG\n math:round(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be rounded off to the closest integer/long value.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;\n\n\n\n\n\nThe function rounds off 'inValue1' to the closest int/long value and directs the output to the output stream, 'OutMediationStream'. For example, round(3252.353) returns 3252.\n\n\n\nsignum \n(Function)\n\n\nThis returns +1, 0, or -1 for the given positive, zero and negative values respectively. This function wraps the \njava.lang.Math.signum()\n function.\n\n\n\nSyntax\n\n\nINT\n math:signum(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked to be positive, negative or zero.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;\n\n\n\n\n\nThe function evaluates the 'inValue' given to be positive, negative or zero and directs the result to the output stream, 'OutMediationStream'. For example, signum(-6.32d) returns -1.\n\n\n\nsin \n(Function)\n\n\nThis returns the sine of the value given in radians. This function wraps the \njava.lang.Math.sin()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sin(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose sine value should be found. Input is required to be in radians.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;\n\n\n\n\n\nThe function calculates the sine value of the given 'inValue' and directs the output to the output stream, 'OutMediationStream. For example, sin(6d) returns -0.27941549819892586.\n\n\n\nsinh \n(Function)\n\n\nThis returns the hyperbolic sine of the value given in radians. This function wraps the \njava.lang.Math.sinh()\n function. \n\n\n\nSyntax\n\n\nDOUBLE\n math:sinh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose hyperbolic sine value should be found. Input is required to be in radians.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;\n\n\n\n\n\nThis function calculates the hyperbolic sine value of 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sinh(6d) returns 201.71315737027922.\n\n\n\nsqrt \n(Function)\n\n\nThis function returns the square-root of the given value. It wraps the \njava.lang.Math.sqrt()\ns function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sqrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose square-root value should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;\n\n\n\n\n\nThe function calculates the square-root value of the 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sqrt(4d) returns 2.\n\n\n\ntan \n(Function)\n\n\nThis function returns the tan of the given value in radians. It wraps the \njava.lang.Math.tan()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tan(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose tan value should be found. Input is required to be in radians.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;\n\n\n\n\n\nThis function calculates the tan value of the 'inValue' given and directs the output to the output stream, 'OutMediationStream'. For example, tan(6d) returns -0.29100619138474915.\n\n\n\ntanh \n(Function)\n\n\nThis function returns the hyperbolic tangent of the value given in radians. It wraps the \njava.lang.Math.tanh()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tanh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose hyperbolic tangent value should be found. Input is required to be in radians.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inVaue' in the input stream is given, this function calculates the hyperbolic tangent value of the same and directs the output to 'OutMediationStream' stream. For example, tanh(6d) returns 0.9999877116507956.\n\n\n\ntoDegrees \n(Function)\n\n\nThis function converts the value given in radians to degrees. It wraps the \njava.lang.Math.toDegrees()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toDegrees(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe input value in radians that should be converted to degrees.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;\n\n\n\n\n\nThe function converts the 'inValue' in the input stream from radians to degrees and directs the output to 'OutMediationStream' output stream. For example, toDegrees(6d) returns 343.77467707849394.\n\n\n\ntoRadians \n(Function)\n\n\nThis function converts the value given in degrees to radians. It wraps the \njava.lang.Math.toRadians()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toRadians(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe input value in degrees that should be converted to radians.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;\n\n\n\n\n\nThis function converts the input, from degrees to radians and directs the result to 'OutMediationStream' output stream. For example, toRadians(6d) returns 0.10471975511965977.", 
            "title": "4.0.21"
        }, 
        {
            "location": "/api/4.0.21/#api-docs-v4021", 
            "text": "", 
            "title": "API Docs - v4.0.21"
        }, 
        {
            "location": "/api/4.0.21/#math", 
            "text": "", 
            "title": "Math"
        }, 
        {
            "location": "/api/4.0.21/#percentile-aggregate-function", 
            "text": "This functions returns the pth percentile value of a given argument.  Syntax  DOUBLE  math:percentile( INT|LONG|FLOAT|DOUBLE  arg,  DOUBLE  p)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value of the parameter whose percentile should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p \n         Estimate of the percentile to be found (pth percentile) where p is any number greater than 0 or lesser than or equal to 100. \n         \n         DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;  This function returns the percentile value based on the argument given. For example, math:percentile(temperature, 97.0) returns the 97th percentile value of all the temperature events.", 
            "title": "percentile (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.21/#abs-function", 
            "text": "This function returns the absolute value of the given parameter. It wraps the  java.lang.Math.abs()  function.  Syntax  DOUBLE  math:abs( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The parameter whose absolute value is found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;  Irrespective of whether the 'invalue' in the input stream holds a value of abs(3) or abs(-3),the function returns 3 since the absolute value of both 3 and -3 is 3. The result directed to OutMediationStream stream.", 
            "title": "abs (Function)"
        }, 
        {
            "location": "/api/4.0.21/#acos-function", 
            "text": "If -1  = p1  = 1, this function returns the arc-cosine (inverse cosine) value of p1.If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.acos() function.  Syntax  DOUBLE  math:acos( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose arc-cosine (inverse cosine) value is found. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;  If the 'inValue' in the input stream is given, the function calculates the arc-cosine value of it and returns the arc-cosine value to the output stream, OutMediationStream. For example, acos(0.5) returns 1.0471975511965979.", 
            "title": "acos (Function)"
        }, 
        {
            "location": "/api/4.0.21/#asin-function", 
            "text": "If -1  = p1  = 1, this function returns the arc-sin (inverse sine) value of p1. If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.asin() function.  Syntax  DOUBLE  math:asin( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose arc-sin (inverse sine) value is found. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;  If the 'inValue' in the input stream is given, the function calculates the arc-sin value of it and returns the arc-sin value to the output stream, OutMediationStream. For example, asin(0.5) returns 0.5235987755982989.", 
            "title": "asin (Function)"
        }, 
        {
            "location": "/api/4.0.21/#atan-function", 
            "text": "1. If a single  p1  is received, this function returns the arc-tangent (inverse tangent) value of  p1 .  2. If  p1  is received along with an optional  p1 , it considers them as x and y coordinates and returns the arc-tangent (inverse tangent) value.  The returned value is in radian scale. This function wraps the  java.lang.Math.atan()  function.  Syntax  DOUBLE  math:atan( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose arc-tangent (inverse tangent) is found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p1 \n         This optional parameter represents the y coordinate of the (x,y) coordinate pair. \n         0D \n         INT LONG FLOAT DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;  If the 'inValue1' in the input stream is given, the function calculates the arc-tangent value of it and returns the arc-tangent value to the output stream, OutMediationStream. If both the 'inValue1' and 'inValue2' are given, then the function considers them to be x and y coordinates respectively and returns the calculated arc-tangent value to the output stream, OutMediationStream. For example, atan(12d, 5d) returns 1.1760052070951352.", 
            "title": "atan (Function)"
        }, 
        {
            "location": "/api/4.0.21/#bin-function", 
            "text": "This function returns a string representation of the p1 argument, that is of either 'integer' or 'long' data type, as an unsigned integer in base 2. It wraps the  java.lang.Integer.toBinaryString  and java.lang.Long.toBinaryString` methods.  Syntax  STRING  math:bin( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value in either 'integer' or 'long', that should be converted into an unsigned integer of base 2. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;  If the 'inValue' in the input stream is given, the function converts it into an unsigned integer in base 2 and directs the output to the output stream, OutMediationStream. For example, bin(9) returns '1001'.", 
            "title": "bin (Function)"
        }, 
        {
            "location": "/api/4.0.21/#cbrt-function", 
            "text": "This function returns the cube-root of 'p1' which is in radians. It wraps the  java.lang.Math.cbrt()  function.  Syntax  DOUBLE  math:cbrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose cube-root should be found. Input is required to be in radians. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;  If the 'inValue' is given, the function calculates the cube-root value for the same and directs the output to the output stream, OutMediationStream. For example, cbrt(17d) returns 2.5712815906582356.", 
            "title": "cbrt (Function)"
        }, 
        {
            "location": "/api/4.0.21/#ceil-function", 
            "text": "This function returns the smallest double value, i.e., the closest to the negative infinity, that is greater than or equal to the  p1  argument, and is equal to a mathematical integer. It wraps the  java.lang.Math.ceil()  method.  Syntax  DOUBLE  math:ceil( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose ceiling value is found. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;  This function calculates the ceiling value of the given 'inValue' and directs the result to 'OutMediationStream' output stream. For example, ceil(423.187d) returns 424.0.", 
            "title": "ceil (Function)"
        }, 
        {
            "location": "/api/4.0.21/#conv-function", 
            "text": "This function converts  a  from the  fromBase  base to the  toBase  base.  Syntax  STRING  math:conv( STRING  a,  INT  from.base,  INT  to.base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         a \n         The value whose base should be changed. Input should be given as a 'String'. \n         \n         STRING \n         No \n         No \n     \n     \n         from.base \n         The source base of the input parameter 'a'. \n         \n         INT \n         No \n         No \n     \n     \n         to.base \n         The target base that the input parameter 'a' should be converted into. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;  If the 'inValue' in the input stream is given, and the base in which it currently resides in and the base to which it should be converted to is specified, the function converts it into a string in the target base and directs it to the output stream, OutMediationStream. For example, conv(\"7f\", 16, 10) returns \"127\".", 
            "title": "conv (Function)"
        }, 
        {
            "location": "/api/4.0.21/#copysign-function", 
            "text": "This function returns a value of an input with the received  magnitude  and  sign  of another input. It wraps the  java.lang.Math.copySign()  function.  Syntax  DOUBLE  math:copySign( INT|LONG|FLOAT|DOUBLE  magnitude,  INT|LONG|FLOAT|DOUBLE  sign)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         magnitude \n         The magnitude of this parameter is used in the output attribute. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         sign \n         The sign of this parameter is used in the output attribute. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;  If two values are provided as 'inValue1' and 'inValue2', the function copies the magnitude and sign of the second argument into the first one and directs the result to the output stream, OutMediatonStream. For example, copySign(5.6d, -3.0d) returns -5.6.", 
            "title": "copySign (Function)"
        }, 
        {
            "location": "/api/4.0.21/#cos-function", 
            "text": "This function returns the cosine of  p1  which is in radians. It wraps the  java.lang.Math.cos()  function.  Syntax  DOUBLE  math:cos( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose cosine value should be found.The input is required to be in radians. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;  If the 'inValue' is given, the function calculates the cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cos(6d) returns 0.9601702866503661.", 
            "title": "cos (Function)"
        }, 
        {
            "location": "/api/4.0.21/#cosh-function", 
            "text": "This function returns the hyperbolic cosine of  p1  which is in radians. It wraps the  java.lang.Math.cosh()  function.  Syntax  DOUBLE  math:cosh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose hyperbolic cosine should be found. The input is required to be in radians. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;  If the 'inValue' is given, the function calculates the hyperbolic cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cosh (6d) returns 201.7156361224559.", 
            "title": "cosh (Function)"
        }, 
        {
            "location": "/api/4.0.21/#e-function", 
            "text": "This function returns the  java.lang.Math.E  constant, which is the closest double value to e, where e is the base of the natural logarithms.   Syntax  DOUBLE  math:e()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;  This function returns the constant, 2.7182818284590452354 which is the closest double value to e and directs the output to 'OutMediationStream' output stream.", 
            "title": "e (Function)"
        }, 
        {
            "location": "/api/4.0.21/#exp-function", 
            "text": "This function returns the Euler's number  e  raised to the power of  p1 . It wraps the  java.lang.Math.exp()  function.  Syntax  DOUBLE  math:exp( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The power that the Euler's number e is raised to. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;  If the 'inValue' in the inputstream holds a value, this function calculates the corresponding Euler's number 'e' and directs it to the output stream, OutMediationStream. For example, exp(10.23) returns 27722.51006805505.", 
            "title": "exp (Function)"
        }, 
        {
            "location": "/api/4.0.21/#floor-function", 
            "text": "This function wraps the  java.lang.Math.floor()  function and returns the largest value, i.e., closest to the positive infinity, that is less than or equal to  p1 , and is equal to a mathematical integer.  Syntax  DOUBLE  math:floor( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose floor value should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;  This function calculates the floor value of the given 'inValue' input and directs the output to the 'OutMediationStream' output stream. For example, (10.23) returns 10.0.", 
            "title": "floor (Function)"
        }, 
        {
            "location": "/api/4.0.21/#getexponent-function", 
            "text": "This function returns the unbiased exponent that is used in the representation of  p1 . This function wraps the  java.lang.Math.getExponent()  function.  Syntax  INT  math:getExponent( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose unbiased exponent representation should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;  This function calculates the unbiased exponent of a given input, 'inValue' and directs the result to the 'OutMediationStream' output stream. For example, getExponent(60984.1) returns 15.", 
            "title": "getExponent (Function)"
        }, 
        {
            "location": "/api/4.0.21/#hex-function", 
            "text": "This function wraps the  java.lang.Double.toHexString() function. It returns a hexadecimal string representation of the input,  p1`.  Syntax  STRING  math:hex( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose hexadecimal value should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;  If the 'inValue' in the input stream is provided, the function converts this into its corresponding hexadecimal format and directs the output to the output stream, OutMediationStream. For example, hex(200) returns \"c8\".", 
            "title": "hex (Function)"
        }, 
        {
            "location": "/api/4.0.21/#isinfinite-function", 
            "text": "This function wraps the  java.lang.Float.isInfinite()  and  java.lang.Double.isInfinite()  and returns  true  if  p1  is infinitely large in magnitude and  false  if otherwise.  Syntax  BOOL  math:isInfinite( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         This is the value of the parameter that the function determines to be either infinite or finite. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;  If the value given in the 'inValue' in the input stream is of infinitely large magnitude, the function returns the value, 'true' and directs the result to the output stream, OutMediationStream'. For example, isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.", 
            "title": "isInfinite (Function)"
        }, 
        {
            "location": "/api/4.0.21/#isnan-function", 
            "text": "This function wraps the  java.lang.Float.isNaN()  and  java.lang.Double.isNaN()  functions and returns  true  if  p1  is NaN (Not-a-Number), and returns  false  if otherwise.  Syntax  BOOL  math:isNan( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter which the function determines to be either NaN or a number. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;  If the 'inValue1' in the input stream has a value that is undefined, then the function considers it as an 'NaN' value and directs 'True' to the output stream, OutMediationStream. For example, isNan(java.lang.Math.log(-12d)) returns true.", 
            "title": "isNan (Function)"
        }, 
        {
            "location": "/api/4.0.21/#ln-function", 
            "text": "This function returns the natural logarithm (base e) of  p1 .  Syntax  DOUBLE  math:ln( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose natural logarithm (base e) should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;  If the 'inValue' in the input stream is given, the function calculates its natural logarithm (base e) and directs the results to the output stream, 'OutMeditionStream'. For example, ln(11.453) returns 2.438251704415579.", 
            "title": "ln (Function)"
        }, 
        {
            "location": "/api/4.0.21/#log-function", 
            "text": "This function returns the logarithm of the received  number  as per the given  base .  Syntax  DOUBLE  math:log( INT|LONG|FLOAT|DOUBLE  number,  INT|LONG|FLOAT|DOUBLE  base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         number \n         The value of the parameter whose base should be changed. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         base \n         The base value of the ouput. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;  If the number and the base to which it has to be converted into is given in the input stream, the function calculates the number to the base specified and directs the result to the output stream, OutMediationStream. For example, log(34, 2f) returns 5.08746284125034.", 
            "title": "log (Function)"
        }, 
        {
            "location": "/api/4.0.21/#log10-function", 
            "text": "This function returns the base 10 logarithm of  p1 .  Syntax  DOUBLE  math:log10( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose base 10 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;  If the 'inValue' in the input stream is given, the function calculates the base 10 logarithm of the same and directs the result to the output stream, OutMediatioStream. For example, log10(19.234) returns 1.2840696117100832.", 
            "title": "log10 (Function)"
        }, 
        {
            "location": "/api/4.0.21/#log2-function", 
            "text": "This function returns the base 2 logarithm of  p1 .  Syntax  DOUBLE  math:log2( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose base 2 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;  If the 'inValue' in the input stream is given, the function calculates the base 2 logarithm of the same and returns the value to the output stream, OutMediationStream. For example log2(91d) returns 6.507794640198696.", 
            "title": "log2 (Function)"
        }, 
        {
            "location": "/api/4.0.21/#max-function", 
            "text": "This function returns the greater value of  p1  and  p2 .  Syntax  DOUBLE  math:max( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         One of the input values to be compared in order to find the larger value of the two \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         The input value to be compared with 'p1' in order to find the larger value of the two. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;  If two input values 'inValue1, and 'inValue2' are given, the function compares them and directs the larger value to the output stream, OutMediationStream. For example, max(123.67d, 91) returns 123.67.", 
            "title": "max (Function)"
        }, 
        {
            "location": "/api/4.0.21/#min-function", 
            "text": "This function returns the smaller value of  p1  and  p2 .  Syntax  DOUBLE  math:min( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         One of the input values that are to be compared in order to find the smaller value. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         The input value that is to be compared with 'p1' in order to find the smaller value. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;  If two input values, 'inValue1' and 'inValue2' are given, the function compares them and directs the smaller value of the two to the output stream, OutMediationStream. For example, min(123.67d, 91) returns 91.", 
            "title": "min (Function)"
        }, 
        {
            "location": "/api/4.0.21/#oct-function", 
            "text": "This function converts the input parameter  p1  to octal.  Syntax  STRING  math:oct( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose octal representation should be found. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  If the 'inValue' in the input stream is given, this function calculates the octal value corresponding to the same and directs it to the output stream, OutMediationStream. For example, oct(99l) returns \"143\".", 
            "title": "oct (Function)"
        }, 
        {
            "location": "/api/4.0.21/#parsedouble-function", 
            "text": "This function returns the double value of the string received.  Syntax  DOUBLE  math:parseDouble( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted into a double value. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;  If the 'inValue' in the input stream holds a value, this function converts it into the corresponding double value and directs it to the output stream, OutMediationStream. For example, parseDouble(\"123\") returns 123.0.", 
            "title": "parseDouble (Function)"
        }, 
        {
            "location": "/api/4.0.21/#parsefloat-function", 
            "text": "This function returns the float value of the received string.  Syntax  FLOAT  math:parseFloat( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted into a float value. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;  The function converts the input value given in 'inValue',into its corresponding float value and directs the result into the output stream, OutMediationStream. For example, parseFloat(\"123\") returns 123.0.", 
            "title": "parseFloat (Function)"
        }, 
        {
            "location": "/api/4.0.21/#parseint-function", 
            "text": "This function returns the integer value of the received string.  Syntax  INT  math:parseInt( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to an integer. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;  The  function converts the 'inValue' into its corresponding integer value and directs the output to the output stream, OutMediationStream. For example, parseInt(\"123\") returns 123.", 
            "title": "parseInt (Function)"
        }, 
        {
            "location": "/api/4.0.21/#parselong-function", 
            "text": "This function returns the long value of the string received.  Syntax  LONG  math:parseLong( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a long value. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;  The function converts the 'inValue' to its corresponding long value and directs the result to the output stream, OutMediationStream. For example, parseLong(\"123\") returns 123.", 
            "title": "parseLong (Function)"
        }, 
        {
            "location": "/api/4.0.21/#pi-function", 
            "text": "This function returns the  java.lang.Math.PI  constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter.   Syntax  DOUBLE  math:pi()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;  pi() always returns 3.141592653589793.", 
            "title": "pi (Function)"
        }, 
        {
            "location": "/api/4.0.21/#power-function", 
            "text": "This function raises the given value to a given power.  Syntax  DOUBLE  math:power( INT|LONG|FLOAT|DOUBLE  value,  INT|LONG|FLOAT|DOUBLE  to.power)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value that should be raised to the power of 'to.power' input parameter. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         to.power \n         The power to which the 'value' input parameter should be raised. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;  This function raises the 'inValue1' to the power of 'inValue2' and directs the output to the output stream, 'OutMediationStream. For example, (5.6d, 3.0d) returns 175.61599999999996.", 
            "title": "power (Function)"
        }, 
        {
            "location": "/api/4.0.21/#rand-function", 
            "text": "This returns a stream of pseudo-random numbers when a sequence of calls are sent to the  rand() . Optionally, it is possible to define a seed, i.e.,  rand(seed)  using which the pseudo-random numbers are generated. These functions internally use the  java.util.Random  class.  Syntax  DOUBLE  math:rand( INT|LONG  seed)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         seed \n         An optional seed value that will be used to generate the random number sequence. \n         defaultSeed \n         INT LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  In the example given above, a random double value between 0 and 1 will be generated using math:rand().", 
            "title": "rand (Function)"
        }, 
        {
            "location": "/api/4.0.21/#round-function", 
            "text": "This function returns the value of the input argument rounded off to the closest integer/long value.  Syntax  INT|LONG  math:round( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be rounded off to the closest integer/long value. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;  The function rounds off 'inValue1' to the closest int/long value and directs the output to the output stream, 'OutMediationStream'. For example, round(3252.353) returns 3252.", 
            "title": "round (Function)"
        }, 
        {
            "location": "/api/4.0.21/#signum-function", 
            "text": "This returns +1, 0, or -1 for the given positive, zero and negative values respectively. This function wraps the  java.lang.Math.signum()  function.  Syntax  INT  math:signum( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked to be positive, negative or zero. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;  The function evaluates the 'inValue' given to be positive, negative or zero and directs the result to the output stream, 'OutMediationStream'. For example, signum(-6.32d) returns -1.", 
            "title": "signum (Function)"
        }, 
        {
            "location": "/api/4.0.21/#sin-function", 
            "text": "This returns the sine of the value given in radians. This function wraps the  java.lang.Math.sin()  function.  Syntax  DOUBLE  math:sin( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose sine value should be found. Input is required to be in radians. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;  The function calculates the sine value of the given 'inValue' and directs the output to the output stream, 'OutMediationStream. For example, sin(6d) returns -0.27941549819892586.", 
            "title": "sin (Function)"
        }, 
        {
            "location": "/api/4.0.21/#sinh-function", 
            "text": "This returns the hyperbolic sine of the value given in radians. This function wraps the  java.lang.Math.sinh()  function.   Syntax  DOUBLE  math:sinh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose hyperbolic sine value should be found. Input is required to be in radians. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;  This function calculates the hyperbolic sine value of 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sinh(6d) returns 201.71315737027922.", 
            "title": "sinh (Function)"
        }, 
        {
            "location": "/api/4.0.21/#sqrt-function", 
            "text": "This function returns the square-root of the given value. It wraps the  java.lang.Math.sqrt() s function.  Syntax  DOUBLE  math:sqrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose square-root value should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;  The function calculates the square-root value of the 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sqrt(4d) returns 2.", 
            "title": "sqrt (Function)"
        }, 
        {
            "location": "/api/4.0.21/#tan-function", 
            "text": "This function returns the tan of the given value in radians. It wraps the  java.lang.Math.tan()  function.  Syntax  DOUBLE  math:tan( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose tan value should be found. Input is required to be in radians. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;  This function calculates the tan value of the 'inValue' given and directs the output to the output stream, 'OutMediationStream'. For example, tan(6d) returns -0.29100619138474915.", 
            "title": "tan (Function)"
        }, 
        {
            "location": "/api/4.0.21/#tanh-function", 
            "text": "This function returns the hyperbolic tangent of the value given in radians. It wraps the  java.lang.Math.tanh()  function.  Syntax  DOUBLE  math:tanh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose hyperbolic tangent value should be found. Input is required to be in radians. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;  If the 'inVaue' in the input stream is given, this function calculates the hyperbolic tangent value of the same and directs the output to 'OutMediationStream' stream. For example, tanh(6d) returns 0.9999877116507956.", 
            "title": "tanh (Function)"
        }, 
        {
            "location": "/api/4.0.21/#todegrees-function", 
            "text": "This function converts the value given in radians to degrees. It wraps the  java.lang.Math.toDegrees()  function.  Syntax  DOUBLE  math:toDegrees( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The input value in radians that should be converted to degrees. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;  The function converts the 'inValue' in the input stream from radians to degrees and directs the output to 'OutMediationStream' output stream. For example, toDegrees(6d) returns 343.77467707849394.", 
            "title": "toDegrees (Function)"
        }, 
        {
            "location": "/api/4.0.21/#toradians-function", 
            "text": "This function converts the value given in degrees to radians. It wraps the  java.lang.Math.toRadians()  function.  Syntax  DOUBLE  math:toRadians( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The input value in degrees that should be converted to radians. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;  This function converts the input, from degrees to radians and directs the result to 'OutMediationStream' output stream. For example, toRadians(6d) returns 0.10471975511965977.", 
            "title": "toRadians (Function)"
        }, 
        {
            "location": "/api/4.0.20/", 
            "text": "API Docs - v4.0.20\n\n\nMath\n\n\npercentile \n(Aggregate Function)\n\n\nReturns the pth percentile value of the argument values.\n\n\n\nSyntax\n\n\nDOUBLE\n math:percentile(\nINT|LONG|FLOAT|DOUBLE\n arg, \nDOUBLE\n p)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe values of which the percentile should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np\n\n        \nEstimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;\n\n\n\n\n\nmath:percentile(temperature, 97.0)\n\n\n\nabs \n(Function)\n\n\nReturns the absolute value of the given parameter. This function wraps the \njava.lang.Math.abs()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:abs(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the absolute value should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;\n\n\n\n\n\nBoth abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.\n\n\n\nacos \n(Function)\n\n\nIf -1 \n= p1 \n= 1, returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The returned value is in radian scale. This function wraps the java.lang.Math.acos()function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:acos(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-cosine (inverse cosine) should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;\n\n\n\n\n\nacos(0.5) returns 1.0471975511965979.\n\n\n\nasin \n(Function)\n\n\nIf -1 \n= p1 \n= 1, returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The returned value is in radian scale. This function wraps the java.lang.Math.asin() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:asin(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-sin (inverse sine) should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;\n\n\n\n\n\nasin(0.5) returns 0.5235987755982989.\n\n\n\natan \n(Function)\n\n\n1. If a single \np1\n is received, returns the arc-tangent (inverse tangent) of \np1\n.\n2. If \np1\n is received along with an optional \np1\n, considers them as x,y coordinates and returnsthe respective arc-tangent (inverse tangent) of the \np1\n, \np2\n coordinates. \n3.The returned value is in radian scale. This function wraps the \njava.lang.Math.atan()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:atan(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np1\n\n        \nThis optional parameter represents the y coordinate of the (x,y) coordinate pair\n\n        \n0D\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\n\natan(12d, 5d) returns 1.1760052070951352.\n\n\n\nbin \n(Function)\n\n\nReturns a string representation of the integer/long \np1\n argument as an unsigned integer in base 2. This function wraps the \njava.lang.Integer.toBinaryString\n and \njava.lang.Long.toBinaryString\n methods.\n\n\n\nSyntax\n\n\nSTRING\n math:bin(\nINT|LONG\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to an unsigned integer of base 2\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;\n\n\n\n\n\nbin(9) returns \"1001\".\n\n\n\ncbrt \n(Function)\n\n\nReturns the cube-root of p1 that is in radians. This function wraps the \njava.lang.Math.cbrt()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cbrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose cube-root should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;\n\n\n\n\n\ncbrt(17d) returns 2.5712815906582356.\n\n\n\nceil \n(Function)\n\n\nReturns the smallest (closest to negative infinity) double value that is greater than or equal to the \np1\n argument, and is equal to a mathematical integer. This function wraps the\njava.lang.Math.ceil()\n method.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ceil(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose ceiling value should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;\n\n\n\n\n\nceil(423.187d) returns 424.0.\n\n\n\nconv \n(Function)\n\n\nConverts \na\n from the \nfromBase\n base to the \ntoBase\n base.\n\n\n\nSyntax\n\n\nSTRING\n math:conv(\nSTRING\n a, \nINT\n from.base, \nINT\n to.base)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \na\n\n        \nThe value whose base should be changed. Input should be as a String\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfrom.base\n\n        \nThe source base of the input parameter 'a'\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.base\n\n        \nThe target base that input parameter 'a' should be converted to\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\n\nconv(\"7f\", 16, 10) returns \"127\".\n\n\n\ncopySign \n(Function)\n\n\nReturs a value with the received \nmagnitude\n and the \nsign\n. This function wraps the \njava.lang.Math.copySign()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:copySign(\nINT|LONG|FLOAT|DOUBLE\n magnitude, \nINT|LONG|FLOAT|DOUBLE\n sign)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmagnitude\n\n        \nThis parameters magnitude will be used for output attribute\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsign\n\n        \nThis parameters sign will be used for output attribute\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;\n\n\n\n\n\ncopySign(5.6d, -3.0d) returns -5.6.\n\n\n\ncos \n(Function)\n\n\nReturns the cosine of \np1\n that is in radians. This function wraps the \njava.lang.Math.cos()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cos(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose cosine value should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\n\ncos(6d) returns 0.9601702866503661.\n\n\n\ncosh \n(Function)\n\n\nReturns the hyperbolic cosine of \np1\n that is in radians. This function wraps the \njava.lang.Math.cosh()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cosh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic cosine should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\n\ncosh (6d) returns 201.7156361224559.\n\n\n\ne \n(Function)\n\n\nReturns the \njava.lang.Math.E\n constant, which is the closest double value to e, which is the base of the natural logarithms.\n\n\n\nSyntax\n\n\nDOUBLE\n math:e()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;\n\n\n\n\n\ne() returns 2.7182818284590452354.\n\n\n\nexp \n(Function)\n\n\nReturns the Euler's number \ne\n raised to the power of \np1\n. This function wraps the \njava.lang.Math.exp()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:exp(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe power that the Euler's number e should be raised to\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\n\nexp(10.23) returns 27722.51006805505.\n\n\n\nfloor \n(Function)\n\n\nThis function wraps the \njava.lang.Math.floor()\n function, which returns the largest (closest to positive infinity) value that is less that or equal to \np1\n, and is equal to a mathematical integer.\n\n\n\nSyntax\n\n\nDOUBLE\n math:floor(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose floor value should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;\n\n\n\n\n\nfloor(10.23) returns 10.0.\n\n\n\ngetExponent \n(Function)\n\n\nReturns the unbiased exponent that is used in the representation of \np1\n. This function wraps the \njava.lang.Math.getExponent()\n function.\n\n\n\nSyntax\n\n\nINT\n math:getExponent(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose unbiased exponent representation should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\n\ngetExponent(60984.1) returns 15.\n\n\n\nhex \n(Function)\n\n\nWraps the \njava.lang.Double.toHexString()\n function that returns a hexadecimal string representation of \np1\n.\n\n\n\nSyntax\n\n\nSTRING\n math:hex(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hexadecimal representation should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;\n\n\n\n\n\nhex(200) returns \"c8\".\n\n\n\nisInfinite \n(Function)\n\n\nWraps the \njava.lang.Float.isInfinite()\n and \njava.lang.Double.isInfinite()\n functions and returns \ntrue\n if \np1\n is infinitely large in magnitude and returns \nfalse\n if otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isInfinite(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if infinite\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;\n\n\n\n\n\nisInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.\n\n\n\nisNan \n(Function)\n\n\nWraps the \njava.lang.Float.isNaN()\n and \njava.lang.Double.isNaN()\n functions and returns \ntrue\n if \np1\n is a NaN (Not-a-Number) value, and returns \nfalse\n if otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isNan(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if it is a number\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;\n\n\n\n\n\nisNan(java.lang.Math.log(-12d)) returns true.\n\n\n\nln \n(Function)\n\n\nReturns the natural logarithm (base e) of \np1\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ln(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose natural logarithm (base e) should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nln(11.453) returns 2.438251704415579.\n\n\n\nlog \n(Function)\n\n\nReturns the logarithm of the received \nnumber\n as per the given \nbase\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log(\nINT|LONG|FLOAT|DOUBLE\n number, \nINT|LONG|FLOAT|DOUBLE\n base)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nnumber\n\n        \nThe value of whose base should be changed\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbase\n\n        \nThe base value of the ouput\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;\n\n\n\n\n\nlog(34, 2f) returns 5.08746284125034.\n\n\n\nlog10 \n(Function)\n\n\nReturns the base 10 logarithm of \np1\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log10(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose base 10 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nlog10(19.234) returns 1.2840696117100832.\n\n\n\nlog2 \n(Function)\n\n\nReturns the base 2 logarithm of \np1\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log2(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose base 2 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nlog2(91d) returns 6.507794640198696.\n\n\n\nmax \n(Function)\n\n\nReturns the greater value out of \np1\n and \np2\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:max(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nValue one to be compared in finding largest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nValue two to be compared in finding largest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;\n\n\n\n\n\nmax(123.67d, 91) returns 123.67.\n\n\n\nmin \n(Function)\n\n\nReturns the smaller value out of \np1\n and \np2\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:min(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nValue one to be compared in finding smallest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nValue two to be compared in finding smallest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;\n\n\n\n\n\nmin(123.67d, 91) returns 91.\n\n\n\noct \n(Function)\n\n\nConverts \np1\n to octal.\n\n\n\nSyntax\n\n\nSTRING\n math:oct(\nINT|LONG\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose octal representation should be found.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\n\noct(99l) returns \"143\".\n\n\n\nparseDouble \n(Function)\n\n\nReturns the double value of the received string.\n\n\n\nSyntax\n\n\nDOUBLE\n math:parseDouble(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a double\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseDouble(\"123\") returns 123.0.\n\n\n\nparseFloat \n(Function)\n\n\nReturns the float value of the received string.\n\n\n\nSyntax\n\n\nFLOAT\n math:parseFloat(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a float\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseFloat(\"123\") returns 123.0.\n\n\n\nparseInt \n(Function)\n\n\nReturns the integer value of the received string.\n\n\n\nSyntax\n\n\nINT\n math:parseInt(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a int\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseInt(\"123\") returns 123.\n\n\n\nparseLong \n(Function)\n\n\nReturns the long value of the received string.\n\n\n\nSyntax\n\n\nLONG\n math:parseLong(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a long\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseLong(\"123\") returns 123.\n\n\n\npi \n(Function)\n\n\nReturns the \njava.lang.Math.PI\n constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter. \n\n\n\nSyntax\n\n\nDOUBLE\n math:pi()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;\n\n\n\n\n\npi() always returns 3.141592653589793.\n\n\n\npower \n(Function)\n\n\nReturns a value by raising to the given power.\n\n\n\nSyntax\n\n\nDOUBLE\n math:power(\nINT|LONG|FLOAT|DOUBLE\n value, \nINT|LONG|FLOAT|DOUBLE\n to.power)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value that should be raised to the power of 'to.power' input parameter\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.power\n\n        \nThe power that 'value' input parameter should be raised to\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;\n\n\n\n\n\npower(5.6d, 3.0d) returns 175.61599999999996.\n\n\n\nrand \n(Function)\n\n\nReturns a stream of pseudo-random numbers when a sequence of calls are sent to the \nrand()\n. Optionally, it is possible to define a seed, i.e., \nrand(seed)\n using which the pseudo-random numbers are generated. These functions use the \njava.util.Random\n class internally.\n\n\n\nSyntax\n\n\nDOUBLE\n math:rand(\nINT|LONG\n seed)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nseed\n\n        \nAn optional seed value that will be used to generate the random number sequence\n\n        \ndefaultSeed\n\n        \nINT\nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\n\nA random double value between 0 and 1 will be generated using math:rand()\n\n\n\nround \n(Function)\n\n\nReturns the closest integer/long value depending on the input argument.\n\n\n\nSyntax\n\n\nINT|LONG\n math:round(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be rounded to the closest integer/long.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;\n\n\n\n\n\nround(3252.353) returns 3252.\n\n\n\nsignum \n(Function)\n\n\nReturns +1, 0, or -1 for the given positive, zero, and negative values respectively. This function wraps the \njava.lang.Math.signum()\n function.\n\n\n\nSyntax\n\n\nINT\n math:signum(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if positive or negative or otherwise\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;\n\n\n\n\n\nsignum(-6.32d) returns -1.\n\n\n\nsin \n(Function)\n\n\nReturns the sine of the value given in radians. This function wraps the \njava.lang.Math.sin()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sin(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose sine value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;\n\n\n\n\n\nsin(6d) returns -0.27941549819892586.\n\n\n\nsinh \n(Function)\n\n\nReturns the hyperbolic sine of the value given in radians. This function wraps the \njava.lang.Math.sinh()\n function. \n\n\n\nSyntax\n\n\nDOUBLE\n math:sinh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic sine value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;\n\n\n\n\n\nsinh(6d) returns 201.71315737027922.\n\n\n\nsqrt \n(Function)\n\n\nReturns the square-root of the given value. This function wraps the \njava.lang.Math.sqrt()\ns function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sqrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose square-root value should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;\n\n\n\n\n\nsqrt(4d) returns 2.\n\n\n\ntan \n(Function)\n\n\nReturns the tan of the given value in radians. This function wraps the \njava.lang.Math.tan()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tan(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose tan value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;\n\n\n\n\n\ntan(6d) returns -0.29100619138474915.\n\n\n\ntanh \n(Function)\n\n\nReturns the hyperbolic tangent of the value given in radians. This function wraps the \njava.lang.Math.tanh()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tanh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic tangent value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;\n\n\n\n\n\ntanh(6d) returns 0.9999877116507956.\n\n\n\ntoDegrees \n(Function)\n\n\nConverts the value given in radians to degrees. This function wraps the \njava.lang.Math.toDegrees()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toDegrees(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe radians value that should be converted to degrees\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;\n\n\n\n\n\ntoDegrees(6d) returns 343.77467707849394.\n\n\n\ntoRadians \n(Function)\n\n\nConverts the value given in degrees to radians. This function wraps the \njava.lang.Math.toRadians()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toRadians(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe degrees value that should be converted to radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;\n\n\n\n\n\ntoRadians(6d) returns 0.10471975511965977.", 
            "title": "4.0.20"
        }, 
        {
            "location": "/api/4.0.20/#api-docs-v4020", 
            "text": "", 
            "title": "API Docs - v4.0.20"
        }, 
        {
            "location": "/api/4.0.20/#math", 
            "text": "", 
            "title": "Math"
        }, 
        {
            "location": "/api/4.0.20/#percentile-aggregate-function", 
            "text": "Returns the pth percentile value of the argument values.  Syntax  DOUBLE  math:percentile( INT|LONG|FLOAT|DOUBLE  arg,  DOUBLE  p)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The values of which the percentile should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p \n         Estimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100 \n         \n         DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;  math:percentile(temperature, 97.0)", 
            "title": "percentile (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.20/#abs-function", 
            "text": "Returns the absolute value of the given parameter. This function wraps the  java.lang.Math.abs()  function.  Syntax  DOUBLE  math:abs( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the absolute value should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;  Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.", 
            "title": "abs (Function)"
        }, 
        {
            "location": "/api/4.0.20/#acos-function", 
            "text": "If -1  = p1  = 1, returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The returned value is in radian scale. This function wraps the java.lang.Math.acos()function.  Syntax  DOUBLE  math:acos( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-cosine (inverse cosine) should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;  acos(0.5) returns 1.0471975511965979.", 
            "title": "acos (Function)"
        }, 
        {
            "location": "/api/4.0.20/#asin-function", 
            "text": "If -1  = p1  = 1, returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The returned value is in radian scale. This function wraps the java.lang.Math.asin() function.  Syntax  DOUBLE  math:asin( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-sin (inverse sine) should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;  asin(0.5) returns 0.5235987755982989.", 
            "title": "asin (Function)"
        }, 
        {
            "location": "/api/4.0.20/#atan-function", 
            "text": "1. If a single  p1  is received, returns the arc-tangent (inverse tangent) of  p1 . 2. If  p1  is received along with an optional  p1 , considers them as x,y coordinates and returnsthe respective arc-tangent (inverse tangent) of the  p1 ,  p2  coordinates.  3.The returned value is in radian scale. This function wraps the  java.lang.Math.atan()  function.  Syntax  DOUBLE  math:atan( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p1 \n         This optional parameter represents the y coordinate of the (x,y) coordinate pair \n         0D \n         INT LONG FLOAT DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;  atan(12d, 5d) returns 1.1760052070951352.", 
            "title": "atan (Function)"
        }, 
        {
            "location": "/api/4.0.20/#bin-function", 
            "text": "Returns a string representation of the integer/long  p1  argument as an unsigned integer in base 2. This function wraps the  java.lang.Integer.toBinaryString  and  java.lang.Long.toBinaryString  methods.  Syntax  STRING  math:bin( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to an unsigned integer of base 2 \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;  bin(9) returns \"1001\".", 
            "title": "bin (Function)"
        }, 
        {
            "location": "/api/4.0.20/#cbrt-function", 
            "text": "Returns the cube-root of p1 that is in radians. This function wraps the  java.lang.Math.cbrt()  function.  Syntax  DOUBLE  math:cbrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose cube-root should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;  cbrt(17d) returns 2.5712815906582356.", 
            "title": "cbrt (Function)"
        }, 
        {
            "location": "/api/4.0.20/#ceil-function", 
            "text": "Returns the smallest (closest to negative infinity) double value that is greater than or equal to the  p1  argument, and is equal to a mathematical integer. This function wraps the java.lang.Math.ceil()  method.  Syntax  DOUBLE  math:ceil( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose ceiling value should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;  ceil(423.187d) returns 424.0.", 
            "title": "ceil (Function)"
        }, 
        {
            "location": "/api/4.0.20/#conv-function", 
            "text": "Converts  a  from the  fromBase  base to the  toBase  base.  Syntax  STRING  math:conv( STRING  a,  INT  from.base,  INT  to.base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         a \n         The value whose base should be changed. Input should be as a String \n         \n         STRING \n         No \n         No \n     \n     \n         from.base \n         The source base of the input parameter 'a' \n         \n         INT \n         No \n         No \n     \n     \n         to.base \n         The target base that input parameter 'a' should be converted to \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;  conv(\"7f\", 16, 10) returns \"127\".", 
            "title": "conv (Function)"
        }, 
        {
            "location": "/api/4.0.20/#copysign-function", 
            "text": "Returs a value with the received  magnitude  and the  sign . This function wraps the  java.lang.Math.copySign()  function.  Syntax  DOUBLE  math:copySign( INT|LONG|FLOAT|DOUBLE  magnitude,  INT|LONG|FLOAT|DOUBLE  sign)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         magnitude \n         This parameters magnitude will be used for output attribute \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         sign \n         This parameters sign will be used for output attribute \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;  copySign(5.6d, -3.0d) returns -5.6.", 
            "title": "copySign (Function)"
        }, 
        {
            "location": "/api/4.0.20/#cos-function", 
            "text": "Returns the cosine of  p1  that is in radians. This function wraps the  java.lang.Math.cos()  function.  Syntax  DOUBLE  math:cos( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose cosine value should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;  cos(6d) returns 0.9601702866503661.", 
            "title": "cos (Function)"
        }, 
        {
            "location": "/api/4.0.20/#cosh-function", 
            "text": "Returns the hyperbolic cosine of  p1  that is in radians. This function wraps the  java.lang.Math.cosh()  function.  Syntax  DOUBLE  math:cosh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic cosine should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;  cosh (6d) returns 201.7156361224559.", 
            "title": "cosh (Function)"
        }, 
        {
            "location": "/api/4.0.20/#e-function", 
            "text": "Returns the  java.lang.Math.E  constant, which is the closest double value to e, which is the base of the natural logarithms.  Syntax  DOUBLE  math:e()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;  e() returns 2.7182818284590452354.", 
            "title": "e (Function)"
        }, 
        {
            "location": "/api/4.0.20/#exp-function", 
            "text": "Returns the Euler's number  e  raised to the power of  p1 . This function wraps the  java.lang.Math.exp()  function.  Syntax  DOUBLE  math:exp( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The power that the Euler's number e should be raised to \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;  exp(10.23) returns 27722.51006805505.", 
            "title": "exp (Function)"
        }, 
        {
            "location": "/api/4.0.20/#floor-function", 
            "text": "This function wraps the  java.lang.Math.floor()  function, which returns the largest (closest to positive infinity) value that is less that or equal to  p1 , and is equal to a mathematical integer.  Syntax  DOUBLE  math:floor( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose floor value should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;  floor(10.23) returns 10.0.", 
            "title": "floor (Function)"
        }, 
        {
            "location": "/api/4.0.20/#getexponent-function", 
            "text": "Returns the unbiased exponent that is used in the representation of  p1 . This function wraps the  java.lang.Math.getExponent()  function.  Syntax  INT  math:getExponent( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose unbiased exponent representation should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;  getExponent(60984.1) returns 15.", 
            "title": "getExponent (Function)"
        }, 
        {
            "location": "/api/4.0.20/#hex-function", 
            "text": "Wraps the  java.lang.Double.toHexString()  function that returns a hexadecimal string representation of  p1 .  Syntax  STRING  math:hex( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hexadecimal representation should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;  hex(200) returns \"c8\".", 
            "title": "hex (Function)"
        }, 
        {
            "location": "/api/4.0.20/#isinfinite-function", 
            "text": "Wraps the  java.lang.Float.isInfinite()  and  java.lang.Double.isInfinite()  functions and returns  true  if  p1  is infinitely large in magnitude and returns  false  if otherwise.  Syntax  BOOL  math:isInfinite( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if infinite \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;  isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.", 
            "title": "isInfinite (Function)"
        }, 
        {
            "location": "/api/4.0.20/#isnan-function", 
            "text": "Wraps the  java.lang.Float.isNaN()  and  java.lang.Double.isNaN()  functions and returns  true  if  p1  is a NaN (Not-a-Number) value, and returns  false  if otherwise.  Syntax  BOOL  math:isNan( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if it is a number \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;  isNan(java.lang.Math.log(-12d)) returns true.", 
            "title": "isNan (Function)"
        }, 
        {
            "location": "/api/4.0.20/#ln-function", 
            "text": "Returns the natural logarithm (base e) of  p1 .  Syntax  DOUBLE  math:ln( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose natural logarithm (base e) should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;  ln(11.453) returns 2.438251704415579.", 
            "title": "ln (Function)"
        }, 
        {
            "location": "/api/4.0.20/#log-function", 
            "text": "Returns the logarithm of the received  number  as per the given  base .  Syntax  DOUBLE  math:log( INT|LONG|FLOAT|DOUBLE  number,  INT|LONG|FLOAT|DOUBLE  base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         number \n         The value of whose base should be changed \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         base \n         The base value of the ouput \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;  log(34, 2f) returns 5.08746284125034.", 
            "title": "log (Function)"
        }, 
        {
            "location": "/api/4.0.20/#log10-function", 
            "text": "Returns the base 10 logarithm of  p1 .  Syntax  DOUBLE  math:log10( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose base 10 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;  log10(19.234) returns 1.2840696117100832.", 
            "title": "log10 (Function)"
        }, 
        {
            "location": "/api/4.0.20/#log2-function", 
            "text": "Returns the base 2 logarithm of  p1 .  Syntax  DOUBLE  math:log2( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose base 2 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;  log2(91d) returns 6.507794640198696.", 
            "title": "log2 (Function)"
        }, 
        {
            "location": "/api/4.0.20/#max-function", 
            "text": "Returns the greater value out of  p1  and  p2 .  Syntax  DOUBLE  math:max( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         Value one to be compared in finding largest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         Value two to be compared in finding largest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;  max(123.67d, 91) returns 123.67.", 
            "title": "max (Function)"
        }, 
        {
            "location": "/api/4.0.20/#min-function", 
            "text": "Returns the smaller value out of  p1  and  p2 .  Syntax  DOUBLE  math:min( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         Value one to be compared in finding smallest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         Value two to be compared in finding smallest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;  min(123.67d, 91) returns 91.", 
            "title": "min (Function)"
        }, 
        {
            "location": "/api/4.0.20/#oct-function", 
            "text": "Converts  p1  to octal.  Syntax  STRING  math:oct( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose octal representation should be found. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  oct(99l) returns \"143\".", 
            "title": "oct (Function)"
        }, 
        {
            "location": "/api/4.0.20/#parsedouble-function", 
            "text": "Returns the double value of the received string.  Syntax  DOUBLE  math:parseDouble( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a double \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;  parseDouble(\"123\") returns 123.0.", 
            "title": "parseDouble (Function)"
        }, 
        {
            "location": "/api/4.0.20/#parsefloat-function", 
            "text": "Returns the float value of the received string.  Syntax  FLOAT  math:parseFloat( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a float \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;  parseFloat(\"123\") returns 123.0.", 
            "title": "parseFloat (Function)"
        }, 
        {
            "location": "/api/4.0.20/#parseint-function", 
            "text": "Returns the integer value of the received string.  Syntax  INT  math:parseInt( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a int \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;  parseInt(\"123\") returns 123.", 
            "title": "parseInt (Function)"
        }, 
        {
            "location": "/api/4.0.20/#parselong-function", 
            "text": "Returns the long value of the received string.  Syntax  LONG  math:parseLong( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a long \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;  parseLong(\"123\") returns 123.", 
            "title": "parseLong (Function)"
        }, 
        {
            "location": "/api/4.0.20/#pi-function", 
            "text": "Returns the  java.lang.Math.PI  constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter.   Syntax  DOUBLE  math:pi()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;  pi() always returns 3.141592653589793.", 
            "title": "pi (Function)"
        }, 
        {
            "location": "/api/4.0.20/#power-function", 
            "text": "Returns a value by raising to the given power.  Syntax  DOUBLE  math:power( INT|LONG|FLOAT|DOUBLE  value,  INT|LONG|FLOAT|DOUBLE  to.power)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value that should be raised to the power of 'to.power' input parameter \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         to.power \n         The power that 'value' input parameter should be raised to \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;  power(5.6d, 3.0d) returns 175.61599999999996.", 
            "title": "power (Function)"
        }, 
        {
            "location": "/api/4.0.20/#rand-function", 
            "text": "Returns a stream of pseudo-random numbers when a sequence of calls are sent to the  rand() . Optionally, it is possible to define a seed, i.e.,  rand(seed)  using which the pseudo-random numbers are generated. These functions use the  java.util.Random  class internally.  Syntax  DOUBLE  math:rand( INT|LONG  seed)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         seed \n         An optional seed value that will be used to generate the random number sequence \n         defaultSeed \n         INT LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  A random double value between 0 and 1 will be generated using math:rand()", 
            "title": "rand (Function)"
        }, 
        {
            "location": "/api/4.0.20/#round-function", 
            "text": "Returns the closest integer/long value depending on the input argument.  Syntax  INT|LONG  math:round( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be rounded to the closest integer/long. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;  round(3252.353) returns 3252.", 
            "title": "round (Function)"
        }, 
        {
            "location": "/api/4.0.20/#signum-function", 
            "text": "Returns +1, 0, or -1 for the given positive, zero, and negative values respectively. This function wraps the  java.lang.Math.signum()  function.  Syntax  INT  math:signum( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if positive or negative or otherwise \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;  signum(-6.32d) returns -1.", 
            "title": "signum (Function)"
        }, 
        {
            "location": "/api/4.0.20/#sin-function", 
            "text": "Returns the sine of the value given in radians. This function wraps the  java.lang.Math.sin()  function.  Syntax  DOUBLE  math:sin( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose sine value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;  sin(6d) returns -0.27941549819892586.", 
            "title": "sin (Function)"
        }, 
        {
            "location": "/api/4.0.20/#sinh-function", 
            "text": "Returns the hyperbolic sine of the value given in radians. This function wraps the  java.lang.Math.sinh()  function.   Syntax  DOUBLE  math:sinh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic sine value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;  sinh(6d) returns 201.71315737027922.", 
            "title": "sinh (Function)"
        }, 
        {
            "location": "/api/4.0.20/#sqrt-function", 
            "text": "Returns the square-root of the given value. This function wraps the  java.lang.Math.sqrt() s function.  Syntax  DOUBLE  math:sqrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose square-root value should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;  sqrt(4d) returns 2.", 
            "title": "sqrt (Function)"
        }, 
        {
            "location": "/api/4.0.20/#tan-function", 
            "text": "Returns the tan of the given value in radians. This function wraps the  java.lang.Math.tan()  function.  Syntax  DOUBLE  math:tan( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose tan value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;  tan(6d) returns -0.29100619138474915.", 
            "title": "tan (Function)"
        }, 
        {
            "location": "/api/4.0.20/#tanh-function", 
            "text": "Returns the hyperbolic tangent of the value given in radians. This function wraps the  java.lang.Math.tanh()  function.  Syntax  DOUBLE  math:tanh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic tangent value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;  tanh(6d) returns 0.9999877116507956.", 
            "title": "tanh (Function)"
        }, 
        {
            "location": "/api/4.0.20/#todegrees-function", 
            "text": "Converts the value given in radians to degrees. This function wraps the  java.lang.Math.toDegrees()  function.  Syntax  DOUBLE  math:toDegrees( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The radians value that should be converted to degrees \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;  toDegrees(6d) returns 343.77467707849394.", 
            "title": "toDegrees (Function)"
        }, 
        {
            "location": "/api/4.0.20/#toradians-function", 
            "text": "Converts the value given in degrees to radians. This function wraps the  java.lang.Math.toRadians()  function.  Syntax  DOUBLE  math:toRadians( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The degrees value that should be converted to radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;  toRadians(6d) returns 0.10471975511965977.", 
            "title": "toRadians (Function)"
        }, 
        {
            "location": "/api/4.0.19/", 
            "text": "API Docs - v4.0.19\n\n\nMath\n\n\npercentile \n(Aggregate Function)\n\n\nReturns the pth percentile value of the argument values.\n\n\n\nSyntax\n\n\nDOUBLE\n math:percentile(\nINT|LONG|FLOAT|DOUBLE\n arg, \nDOUBLE\n p)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe values of which the percentile should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np\n\n        \nEstimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;\n\n\n\n\n\nmath:percentile(temperature, 97.0)\n\n\n\nabs \n(Function)\n\n\nReturns the absolute value of the given parameter. This function wraps the \njava.lang.Math.abs()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:abs(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the absolute value should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;\n\n\n\n\n\nBoth abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.\n\n\n\nacos \n(Function)\n\n\nIf -1 \n= p1 \n= 1, returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The returned value is in radian scale. This function wraps the java.lang.Math.acos()function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:acos(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-cosine (inverse cosine) should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;\n\n\n\n\n\nacos(0.5) returns 1.0471975511965979.\n\n\n\nasin \n(Function)\n\n\nIf -1 \n= p1 \n= 1, returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The returned value is in radian scale. This function wraps the java.lang.Math.asin() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:asin(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-sin (inverse sine) should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;\n\n\n\n\n\nasin(0.5) returns 0.5235987755982989.\n\n\n\natan \n(Function)\n\n\n1. If a single \np1\n is received, returns the arc-tangent (inverse tangent) of \np1\n.\n2. If \np1\n is received along with an optional \np1\n, considers them as x,y coordinates and returnsthe respective arc-tangent (inverse tangent) of the \np1\n, \np2\n coordinates. \n3.The returned value is in radian scale. This function wraps the \njava.lang.Math.atan()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:atan(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np1\n\n        \nThis optional parameter represents the y coordinate of the (x,y) coordinate pair\n\n        \n0D\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\n\natan(12d, 5d) returns 1.1760052070951352.\n\n\n\nbin \n(Function)\n\n\nReturns a string representation of the integer/long \np1\n argument as an unsigned integer in base 2. This function wraps the \njava.lang.Integer.toBinaryString\n and \njava.lang.Long.toBinaryString\n methods.\n\n\n\nSyntax\n\n\nSTRING\n math:bin(\nINT|LONG\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to an unsigned integer of base 2\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;\n\n\n\n\n\nbin(9) returns \"1001\".\n\n\n\ncbrt \n(Function)\n\n\nReturns the cube-root of p1 that is in radians. This function wraps the \njava.lang.Math.cbrt()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cbrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose cube-root should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;\n\n\n\n\n\ncbrt(17d) returns 2.5712815906582356.\n\n\n\nceil \n(Function)\n\n\nReturns the smallest (closest to negative infinity) double value that is greater than or equal to the \np1\n argument, and is equal to a mathematical integer. This function wraps the\njava.lang.Math.ceil()\n method.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ceil(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose ceiling value should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;\n\n\n\n\n\nceil(423.187d) returns 424.0.\n\n\n\nconv \n(Function)\n\n\nConverts \na\n from the \nfromBase\n base to the \ntoBase\n base.\n\n\n\nSyntax\n\n\nSTRING\n math:conv(\nSTRING\n a, \nINT\n from.base, \nINT\n to.base)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \na\n\n        \nThe value whose base should be changed. Input should be as a String\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfrom.base\n\n        \nThe source base of the input parameter 'a'\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.base\n\n        \nThe target base that input parameter 'a' should be converted to\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\n\nconv(\"7f\", 16, 10) returns \"127\".\n\n\n\ncopySign \n(Function)\n\n\nReturs a value with the received \nmagnitude\n and the \nsign\n. This function wraps the \njava.lang.Math.copySign()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:copySign(\nINT|LONG|FLOAT|DOUBLE\n magnitude, \nINT|LONG|FLOAT|DOUBLE\n sign)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmagnitude\n\n        \nThis parameters magnitude will be used for output attribute\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsign\n\n        \nThis parameters sign will be used for output attribute\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;\n\n\n\n\n\ncopySign(5.6d, -3.0d) returns -5.6.\n\n\n\ncos \n(Function)\n\n\nReturns the cosine of \np1\n that is in radians. This function wraps the \njava.lang.Math.cos()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cos(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose cosine value should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\n\ncos(6d) returns 0.9601702866503661.\n\n\n\ncosh \n(Function)\n\n\nReturns the hyperbolic cosine of \np1\n that is in radians. This function wraps the \njava.lang.Math.cosh()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cosh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic cosine should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\n\ncosh (6d) returns 201.7156361224559.\n\n\n\ne \n(Function)\n\n\nReturns the \njava.lang.Math.E\n constant, which is the closest double value to e, which is the base of the natural logarithms.\n\n\n\nSyntax\n\n\nDOUBLE\n math:e()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;\n\n\n\n\n\ne() returns 2.7182818284590452354.\n\n\n\nexp \n(Function)\n\n\nReturns the Euler's number \ne\n raised to the power of \np1\n. This function wraps the \njava.lang.Math.exp()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:exp(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe power that the Euler's number e should be raised to\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\n\nexp(10.23) returns 27722.51006805505.\n\n\n\nfloor \n(Function)\n\n\nThis function wraps the \njava.lang.Math.floor()\n function, which returns the largest (closest to positive infinity) value that is less that or equal to \np1\n, and is equal to a mathematical integer.\n\n\n\nSyntax\n\n\nDOUBLE\n math:floor(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose floor value should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;\n\n\n\n\n\nfloor(10.23) returns 10.0.\n\n\n\ngetExponent \n(Function)\n\n\nReturns the unbiased exponent that is used in the representation of \np1\n. This function wraps the \njava.lang.Math.getExponent()\n function.\n\n\n\nSyntax\n\n\nINT\n math:getExponent(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose unbiased exponent representation should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\n\ngetExponent(60984.1) returns 15.\n\n\n\nhex \n(Function)\n\n\nWraps the \njava.lang.Double.toHexString()\n function that returns a hexadecimal string representation of \np1\n.\n\n\n\nSyntax\n\n\nSTRING\n math:hex(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hexadecimal representation should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;\n\n\n\n\n\nhex(200) returns \"c8\".\n\n\n\nisInfinite \n(Function)\n\n\nWraps the \njava.lang.Float.isInfinite()\n and \njava.lang.Double.isInfinite()\n functions and returns \ntrue\n if \np1\n is infinitely large in magnitude and returns \nfalse\n if otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isInfinite(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if infinite\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;\n\n\n\n\n\nisInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.\n\n\n\nisNan \n(Function)\n\n\nWraps the \njava.lang.Float.isNaN()\n and \njava.lang.Double.isNaN()\n functions and returns \ntrue\n if \np1\n is a NaN (Not-a-Number) value, and returns \nfalse\n if otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isNan(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if it is a number\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;\n\n\n\n\n\nisNan(java.lang.Math.log(-12d)) returns true.\n\n\n\nln \n(Function)\n\n\nReturns the natural logarithm (base e) of \np1\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ln(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose natural logarithm (base e) should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nln(11.453) returns 2.438251704415579.\n\n\n\nlog \n(Function)\n\n\nReturns the logarithm of the received \nnumber\n as per the given \nbase\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log(\nINT|LONG|FLOAT|DOUBLE\n number, \nINT|LONG|FLOAT|DOUBLE\n base)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nnumber\n\n        \nThe value of whose base should be changed\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbase\n\n        \nThe base value of the ouput\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;\n\n\n\n\n\nlog(34, 2f) returns 5.08746284125034.\n\n\n\nlog10 \n(Function)\n\n\nReturns the base 10 logarithm of \np1\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log10(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose base 10 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nlog10(19.234) returns 1.2840696117100832.\n\n\n\nlog2 \n(Function)\n\n\nReturns the base 2 logarithm of \np1\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log2(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose base 2 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nlog2(91d) returns 6.507794640198696.\n\n\n\nmax \n(Function)\n\n\nReturns the greater value out of \np1\n and \np2\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:max(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nValue one to be compared in finding largest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nValue two to be compared in finding largest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;\n\n\n\n\n\nmax(123.67d, 91) returns 123.67.\n\n\n\nmin \n(Function)\n\n\nReturns the smaller value out of \np1\n and \np2\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:min(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nValue one to be compared in finding smallest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nValue two to be compared in finding smallest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;\n\n\n\n\n\nmin(123.67d, 91) returns 91.\n\n\n\noct \n(Function)\n\n\nConverts \np1\n to octal.\n\n\n\nSyntax\n\n\nSTRING\n math:oct(\nINT|LONG\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose octal representation should be found.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\n\noct(99l) returns \"143\".\n\n\n\nparseDouble \n(Function)\n\n\nReturns the double value of the received string.\n\n\n\nSyntax\n\n\nDOUBLE\n math:parseDouble(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a double\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseDouble(\"123\") returns 123.0.\n\n\n\nparseFloat \n(Function)\n\n\nReturns the float value of the received string.\n\n\n\nSyntax\n\n\nFLOAT\n math:parseFloat(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a float\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseFloat(\"123\") returns 123.0.\n\n\n\nparseInt \n(Function)\n\n\nReturns the integer value of the received string.\n\n\n\nSyntax\n\n\nINT\n math:parseInt(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a int\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseInt(\"123\") returns 123.\n\n\n\nparseLong \n(Function)\n\n\nReturns the long value of the received string.\n\n\n\nSyntax\n\n\nLONG\n math:parseLong(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a long\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseLong(\"123\") returns 123.\n\n\n\npi \n(Function)\n\n\nReturns the \njava.lang.Math.PI\n constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter. \n\n\n\nSyntax\n\n\nDOUBLE\n math:pi()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;\n\n\n\n\n\npi() always returns 3.141592653589793.\n\n\n\npower \n(Function)\n\n\nReturns a value by raising to the given power.\n\n\n\nSyntax\n\n\nDOUBLE\n math:power(\nINT|LONG|FLOAT|DOUBLE\n value, \nINT|LONG|FLOAT|DOUBLE\n to.power)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value that should be raised to the power of 'to.power' input parameter\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.power\n\n        \nThe power that 'value' input parameter should be raised to\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;\n\n\n\n\n\npower(5.6d, 3.0d) returns 175.61599999999996.\n\n\n\nrand \n(Function)\n\n\nReturns a stream of pseudo-random numbers when a sequence of calls are sent to the \nrand()\n. Optionally, it is possible to define a seed, i.e., \nrand(seed)\n using which the pseudo-random numbers are generated. These functions use the \njava.util.Random\n class internally.\n\n\n\nSyntax\n\n\nDOUBLE\n math:rand(\nINT|LONG\n seed)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nseed\n\n        \nAn optional seed value that will be used to generate the random number sequence\n\n        \ndefaultSeed\n\n        \nINT\nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\n\nA random double value between 0 and 1 will be generated using math:rand()\n\n\n\nround \n(Function)\n\n\nReturns the closest integer/long value depending on the input argument.\n\n\n\nSyntax\n\n\nINT|LONG\n math:round(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be rounded to the closest integer/long.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;\n\n\n\n\n\nround(3252.353) returns 3252.\n\n\n\nsignum \n(Function)\n\n\nReturns +1, 0, or -1 for the given positive, zero, and negative values respectively. This function wraps the \njava.lang.Math.signum()\n function.\n\n\n\nSyntax\n\n\nINT\n math:signum(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if positive or negative or otherwise\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;\n\n\n\n\n\nsignum(-6.32d) returns -1.\n\n\n\nsin \n(Function)\n\n\nReturns the sine of the value given in radians. This function wraps the \njava.lang.Math.sin()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sin(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose sine value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;\n\n\n\n\n\nsin(6d) returns -0.27941549819892586.\n\n\n\nsinh \n(Function)\n\n\nReturns the hyperbolic sine of the value given in radians. This function wraps the \njava.lang.Math.sinh()\n function. \n\n\n\nSyntax\n\n\nDOUBLE\n math:sinh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic sine value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;\n\n\n\n\n\nsinh(6d) returns 201.71315737027922.\n\n\n\nsqrt \n(Function)\n\n\nReturns the square-root of the given value. This function wraps the \njava.lang.Math.sqrt()\ns function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sqrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose square-root value should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;\n\n\n\n\n\nsqrt(4d) returns 2.\n\n\n\ntan \n(Function)\n\n\nReturns the tan of the given value in radians. This function wraps the \njava.lang.Math.tan()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tan(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose tan value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;\n\n\n\n\n\ntan(6d) returns -0.29100619138474915.\n\n\n\ntanh \n(Function)\n\n\nReturns the hyperbolic tangent of the value given in radians. This function wraps the \njava.lang.Math.tanh()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tanh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic tangent value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;\n\n\n\n\n\ntanh(6d) returns 0.9999877116507956.\n\n\n\ntoDegrees \n(Function)\n\n\nConverts the value given in radians to degrees. This function wraps the \njava.lang.Math.toDegrees()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toDegrees(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe radians value that should be converted to degrees\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;\n\n\n\n\n\ntoDegrees(6d) returns 343.77467707849394.\n\n\n\ntoRadians \n(Function)\n\n\nConverts the value given in degrees to radians. This function wraps the \njava.lang.Math.toRadians()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toRadians(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe degrees value that should be converted to radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;\n\n\n\n\n\ntoRadians(6d) returns 0.10471975511965977.", 
            "title": "4.0.19"
        }, 
        {
            "location": "/api/4.0.19/#api-docs-v4019", 
            "text": "", 
            "title": "API Docs - v4.0.19"
        }, 
        {
            "location": "/api/4.0.19/#math", 
            "text": "", 
            "title": "Math"
        }, 
        {
            "location": "/api/4.0.19/#percentile-aggregate-function", 
            "text": "Returns the pth percentile value of the argument values.  Syntax  DOUBLE  math:percentile( INT|LONG|FLOAT|DOUBLE  arg,  DOUBLE  p)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The values of which the percentile should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p \n         Estimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100 \n         \n         DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;  math:percentile(temperature, 97.0)", 
            "title": "percentile (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.19/#abs-function", 
            "text": "Returns the absolute value of the given parameter. This function wraps the  java.lang.Math.abs()  function.  Syntax  DOUBLE  math:abs( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the absolute value should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;  Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.", 
            "title": "abs (Function)"
        }, 
        {
            "location": "/api/4.0.19/#acos-function", 
            "text": "If -1  = p1  = 1, returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The returned value is in radian scale. This function wraps the java.lang.Math.acos()function.  Syntax  DOUBLE  math:acos( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-cosine (inverse cosine) should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;  acos(0.5) returns 1.0471975511965979.", 
            "title": "acos (Function)"
        }, 
        {
            "location": "/api/4.0.19/#asin-function", 
            "text": "If -1  = p1  = 1, returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The returned value is in radian scale. This function wraps the java.lang.Math.asin() function.  Syntax  DOUBLE  math:asin( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-sin (inverse sine) should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;  asin(0.5) returns 0.5235987755982989.", 
            "title": "asin (Function)"
        }, 
        {
            "location": "/api/4.0.19/#atan-function", 
            "text": "1. If a single  p1  is received, returns the arc-tangent (inverse tangent) of  p1 . 2. If  p1  is received along with an optional  p1 , considers them as x,y coordinates and returnsthe respective arc-tangent (inverse tangent) of the  p1 ,  p2  coordinates.  3.The returned value is in radian scale. This function wraps the  java.lang.Math.atan()  function.  Syntax  DOUBLE  math:atan( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p1 \n         This optional parameter represents the y coordinate of the (x,y) coordinate pair \n         0D \n         INT LONG FLOAT DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;  atan(12d, 5d) returns 1.1760052070951352.", 
            "title": "atan (Function)"
        }, 
        {
            "location": "/api/4.0.19/#bin-function", 
            "text": "Returns a string representation of the integer/long  p1  argument as an unsigned integer in base 2. This function wraps the  java.lang.Integer.toBinaryString  and  java.lang.Long.toBinaryString  methods.  Syntax  STRING  math:bin( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to an unsigned integer of base 2 \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;  bin(9) returns \"1001\".", 
            "title": "bin (Function)"
        }, 
        {
            "location": "/api/4.0.19/#cbrt-function", 
            "text": "Returns the cube-root of p1 that is in radians. This function wraps the  java.lang.Math.cbrt()  function.  Syntax  DOUBLE  math:cbrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose cube-root should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;  cbrt(17d) returns 2.5712815906582356.", 
            "title": "cbrt (Function)"
        }, 
        {
            "location": "/api/4.0.19/#ceil-function", 
            "text": "Returns the smallest (closest to negative infinity) double value that is greater than or equal to the  p1  argument, and is equal to a mathematical integer. This function wraps the java.lang.Math.ceil()  method.  Syntax  DOUBLE  math:ceil( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose ceiling value should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;  ceil(423.187d) returns 424.0.", 
            "title": "ceil (Function)"
        }, 
        {
            "location": "/api/4.0.19/#conv-function", 
            "text": "Converts  a  from the  fromBase  base to the  toBase  base.  Syntax  STRING  math:conv( STRING  a,  INT  from.base,  INT  to.base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         a \n         The value whose base should be changed. Input should be as a String \n         \n         STRING \n         No \n         No \n     \n     \n         from.base \n         The source base of the input parameter 'a' \n         \n         INT \n         No \n         No \n     \n     \n         to.base \n         The target base that input parameter 'a' should be converted to \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;  conv(\"7f\", 16, 10) returns \"127\".", 
            "title": "conv (Function)"
        }, 
        {
            "location": "/api/4.0.19/#copysign-function", 
            "text": "Returs a value with the received  magnitude  and the  sign . This function wraps the  java.lang.Math.copySign()  function.  Syntax  DOUBLE  math:copySign( INT|LONG|FLOAT|DOUBLE  magnitude,  INT|LONG|FLOAT|DOUBLE  sign)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         magnitude \n         This parameters magnitude will be used for output attribute \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         sign \n         This parameters sign will be used for output attribute \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;  copySign(5.6d, -3.0d) returns -5.6.", 
            "title": "copySign (Function)"
        }, 
        {
            "location": "/api/4.0.19/#cos-function", 
            "text": "Returns the cosine of  p1  that is in radians. This function wraps the  java.lang.Math.cos()  function.  Syntax  DOUBLE  math:cos( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose cosine value should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;  cos(6d) returns 0.9601702866503661.", 
            "title": "cos (Function)"
        }, 
        {
            "location": "/api/4.0.19/#cosh-function", 
            "text": "Returns the hyperbolic cosine of  p1  that is in radians. This function wraps the  java.lang.Math.cosh()  function.  Syntax  DOUBLE  math:cosh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic cosine should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;  cosh (6d) returns 201.7156361224559.", 
            "title": "cosh (Function)"
        }, 
        {
            "location": "/api/4.0.19/#e-function", 
            "text": "Returns the  java.lang.Math.E  constant, which is the closest double value to e, which is the base of the natural logarithms.  Syntax  DOUBLE  math:e()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;  e() returns 2.7182818284590452354.", 
            "title": "e (Function)"
        }, 
        {
            "location": "/api/4.0.19/#exp-function", 
            "text": "Returns the Euler's number  e  raised to the power of  p1 . This function wraps the  java.lang.Math.exp()  function.  Syntax  DOUBLE  math:exp( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The power that the Euler's number e should be raised to \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;  exp(10.23) returns 27722.51006805505.", 
            "title": "exp (Function)"
        }, 
        {
            "location": "/api/4.0.19/#floor-function", 
            "text": "This function wraps the  java.lang.Math.floor()  function, which returns the largest (closest to positive infinity) value that is less that or equal to  p1 , and is equal to a mathematical integer.  Syntax  DOUBLE  math:floor( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose floor value should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;  floor(10.23) returns 10.0.", 
            "title": "floor (Function)"
        }, 
        {
            "location": "/api/4.0.19/#getexponent-function", 
            "text": "Returns the unbiased exponent that is used in the representation of  p1 . This function wraps the  java.lang.Math.getExponent()  function.  Syntax  INT  math:getExponent( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose unbiased exponent representation should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;  getExponent(60984.1) returns 15.", 
            "title": "getExponent (Function)"
        }, 
        {
            "location": "/api/4.0.19/#hex-function", 
            "text": "Wraps the  java.lang.Double.toHexString()  function that returns a hexadecimal string representation of  p1 .  Syntax  STRING  math:hex( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hexadecimal representation should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;  hex(200) returns \"c8\".", 
            "title": "hex (Function)"
        }, 
        {
            "location": "/api/4.0.19/#isinfinite-function", 
            "text": "Wraps the  java.lang.Float.isInfinite()  and  java.lang.Double.isInfinite()  functions and returns  true  if  p1  is infinitely large in magnitude and returns  false  if otherwise.  Syntax  BOOL  math:isInfinite( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if infinite \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;  isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.", 
            "title": "isInfinite (Function)"
        }, 
        {
            "location": "/api/4.0.19/#isnan-function", 
            "text": "Wraps the  java.lang.Float.isNaN()  and  java.lang.Double.isNaN()  functions and returns  true  if  p1  is a NaN (Not-a-Number) value, and returns  false  if otherwise.  Syntax  BOOL  math:isNan( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if it is a number \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;  isNan(java.lang.Math.log(-12d)) returns true.", 
            "title": "isNan (Function)"
        }, 
        {
            "location": "/api/4.0.19/#ln-function", 
            "text": "Returns the natural logarithm (base e) of  p1 .  Syntax  DOUBLE  math:ln( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose natural logarithm (base e) should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;  ln(11.453) returns 2.438251704415579.", 
            "title": "ln (Function)"
        }, 
        {
            "location": "/api/4.0.19/#log-function", 
            "text": "Returns the logarithm of the received  number  as per the given  base .  Syntax  DOUBLE  math:log( INT|LONG|FLOAT|DOUBLE  number,  INT|LONG|FLOAT|DOUBLE  base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         number \n         The value of whose base should be changed \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         base \n         The base value of the ouput \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;  log(34, 2f) returns 5.08746284125034.", 
            "title": "log (Function)"
        }, 
        {
            "location": "/api/4.0.19/#log10-function", 
            "text": "Returns the base 10 logarithm of  p1 .  Syntax  DOUBLE  math:log10( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose base 10 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;  log10(19.234) returns 1.2840696117100832.", 
            "title": "log10 (Function)"
        }, 
        {
            "location": "/api/4.0.19/#log2-function", 
            "text": "Returns the base 2 logarithm of  p1 .  Syntax  DOUBLE  math:log2( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose base 2 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;  log2(91d) returns 6.507794640198696.", 
            "title": "log2 (Function)"
        }, 
        {
            "location": "/api/4.0.19/#max-function", 
            "text": "Returns the greater value out of  p1  and  p2 .  Syntax  DOUBLE  math:max( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         Value one to be compared in finding largest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         Value two to be compared in finding largest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;  max(123.67d, 91) returns 123.67.", 
            "title": "max (Function)"
        }, 
        {
            "location": "/api/4.0.19/#min-function", 
            "text": "Returns the smaller value out of  p1  and  p2 .  Syntax  DOUBLE  math:min( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         Value one to be compared in finding smallest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         Value two to be compared in finding smallest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;  min(123.67d, 91) returns 91.", 
            "title": "min (Function)"
        }, 
        {
            "location": "/api/4.0.19/#oct-function", 
            "text": "Converts  p1  to octal.  Syntax  STRING  math:oct( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose octal representation should be found. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  oct(99l) returns \"143\".", 
            "title": "oct (Function)"
        }, 
        {
            "location": "/api/4.0.19/#parsedouble-function", 
            "text": "Returns the double value of the received string.  Syntax  DOUBLE  math:parseDouble( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a double \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;  parseDouble(\"123\") returns 123.0.", 
            "title": "parseDouble (Function)"
        }, 
        {
            "location": "/api/4.0.19/#parsefloat-function", 
            "text": "Returns the float value of the received string.  Syntax  FLOAT  math:parseFloat( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a float \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;  parseFloat(\"123\") returns 123.0.", 
            "title": "parseFloat (Function)"
        }, 
        {
            "location": "/api/4.0.19/#parseint-function", 
            "text": "Returns the integer value of the received string.  Syntax  INT  math:parseInt( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a int \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;  parseInt(\"123\") returns 123.", 
            "title": "parseInt (Function)"
        }, 
        {
            "location": "/api/4.0.19/#parselong-function", 
            "text": "Returns the long value of the received string.  Syntax  LONG  math:parseLong( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a long \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;  parseLong(\"123\") returns 123.", 
            "title": "parseLong (Function)"
        }, 
        {
            "location": "/api/4.0.19/#pi-function", 
            "text": "Returns the  java.lang.Math.PI  constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter.   Syntax  DOUBLE  math:pi()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;  pi() always returns 3.141592653589793.", 
            "title": "pi (Function)"
        }, 
        {
            "location": "/api/4.0.19/#power-function", 
            "text": "Returns a value by raising to the given power.  Syntax  DOUBLE  math:power( INT|LONG|FLOAT|DOUBLE  value,  INT|LONG|FLOAT|DOUBLE  to.power)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value that should be raised to the power of 'to.power' input parameter \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         to.power \n         The power that 'value' input parameter should be raised to \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;  power(5.6d, 3.0d) returns 175.61599999999996.", 
            "title": "power (Function)"
        }, 
        {
            "location": "/api/4.0.19/#rand-function", 
            "text": "Returns a stream of pseudo-random numbers when a sequence of calls are sent to the  rand() . Optionally, it is possible to define a seed, i.e.,  rand(seed)  using which the pseudo-random numbers are generated. These functions use the  java.util.Random  class internally.  Syntax  DOUBLE  math:rand( INT|LONG  seed)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         seed \n         An optional seed value that will be used to generate the random number sequence \n         defaultSeed \n         INT LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  A random double value between 0 and 1 will be generated using math:rand()", 
            "title": "rand (Function)"
        }, 
        {
            "location": "/api/4.0.19/#round-function", 
            "text": "Returns the closest integer/long value depending on the input argument.  Syntax  INT|LONG  math:round( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be rounded to the closest integer/long. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;  round(3252.353) returns 3252.", 
            "title": "round (Function)"
        }, 
        {
            "location": "/api/4.0.19/#signum-function", 
            "text": "Returns +1, 0, or -1 for the given positive, zero, and negative values respectively. This function wraps the  java.lang.Math.signum()  function.  Syntax  INT  math:signum( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if positive or negative or otherwise \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;  signum(-6.32d) returns -1.", 
            "title": "signum (Function)"
        }, 
        {
            "location": "/api/4.0.19/#sin-function", 
            "text": "Returns the sine of the value given in radians. This function wraps the  java.lang.Math.sin()  function.  Syntax  DOUBLE  math:sin( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose sine value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;  sin(6d) returns -0.27941549819892586.", 
            "title": "sin (Function)"
        }, 
        {
            "location": "/api/4.0.19/#sinh-function", 
            "text": "Returns the hyperbolic sine of the value given in radians. This function wraps the  java.lang.Math.sinh()  function.   Syntax  DOUBLE  math:sinh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic sine value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;  sinh(6d) returns 201.71315737027922.", 
            "title": "sinh (Function)"
        }, 
        {
            "location": "/api/4.0.19/#sqrt-function", 
            "text": "Returns the square-root of the given value. This function wraps the  java.lang.Math.sqrt() s function.  Syntax  DOUBLE  math:sqrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose square-root value should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;  sqrt(4d) returns 2.", 
            "title": "sqrt (Function)"
        }, 
        {
            "location": "/api/4.0.19/#tan-function", 
            "text": "Returns the tan of the given value in radians. This function wraps the  java.lang.Math.tan()  function.  Syntax  DOUBLE  math:tan( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose tan value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;  tan(6d) returns -0.29100619138474915.", 
            "title": "tan (Function)"
        }, 
        {
            "location": "/api/4.0.19/#tanh-function", 
            "text": "Returns the hyperbolic tangent of the value given in radians. This function wraps the  java.lang.Math.tanh()  function.  Syntax  DOUBLE  math:tanh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic tangent value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;  tanh(6d) returns 0.9999877116507956.", 
            "title": "tanh (Function)"
        }, 
        {
            "location": "/api/4.0.19/#todegrees-function", 
            "text": "Converts the value given in radians to degrees. This function wraps the  java.lang.Math.toDegrees()  function.  Syntax  DOUBLE  math:toDegrees( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The radians value that should be converted to degrees \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;  toDegrees(6d) returns 343.77467707849394.", 
            "title": "toDegrees (Function)"
        }, 
        {
            "location": "/api/4.0.19/#toradians-function", 
            "text": "Converts the value given in degrees to radians. This function wraps the  java.lang.Math.toRadians()  function.  Syntax  DOUBLE  math:toRadians( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The degrees value that should be converted to radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;  toRadians(6d) returns 0.10471975511965977.", 
            "title": "toRadians (Function)"
        }, 
        {
            "location": "/api/4.0.18/", 
            "text": "API Docs - v4.0.18\n\n\nMath\n\n\npercentile \n(Aggregate Function)\n\n\nReturns the pth percentile value of the argument values.\n\n\n\nSyntax\n\n\nDOUBLE\n math:percentile(\nINT|LONG|FLOAT|DOUBLE\n arg, \nDOUBLE\n p)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe values of which the percentile should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np\n\n        \nEstimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;\n\n\n\n\n\nmath:percentile(temperature, 97.0)\n\n\n\nabs \n(Function)\n\n\nReturns the absolute value of the given parameter. This function wraps the \njava.lang.Math.abs()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:abs(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the absolute value should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;\n\n\n\n\n\nBoth abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.\n\n\n\nacos \n(Function)\n\n\nIf -1 \n= p1 \n= 1, returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The returned value is in radian scale. This function wraps the java.lang.Math.acos()function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:acos(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-cosine (inverse cosine) should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;\n\n\n\n\n\nacos(0.5) returns 1.0471975511965979.\n\n\n\nasin \n(Function)\n\n\nIf -1 \n= p1 \n= 1, returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The returned value is in radian scale. This function wraps the java.lang.Math.asin() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:asin(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-sin (inverse sine) should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;\n\n\n\n\n\nasin(0.5) returns 0.5235987755982989.\n\n\n\natan \n(Function)\n\n\n1. If a single \np1\n is received, returns the arc-tangent (inverse tangent) of \np1\n.\n2. If \np1\n is received along with an optional \np1\n, considers them as x,y coordinates and returnsthe respective arc-tangent (inverse tangent) of the \np1\n, \np2\n coordinates. \n3.The returned value is in radian scale. This function wraps the \njava.lang.Math.atan()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:atan(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np1\n\n        \nThis optional parameter represents the y coordinate of the (x,y) coordinate pair\n\n        \n0D\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\n\natan(12d, 5d) returns 1.1760052070951352.\n\n\n\nbin \n(Function)\n\n\nReturns a string representation of the integer/long \np1\n argument as an unsigned integer in base 2. This function wraps the \njava.lang.Integer.toBinaryString\n and \njava.lang.Long.toBinaryString\n methods.\n\n\n\nSyntax\n\n\nSTRING\n math:bin(\nINT|LONG\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to an unsigned integer of base 2\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;\n\n\n\n\n\nbin(9) returns \"1001\".\n\n\n\ncbrt \n(Function)\n\n\nReturns the cube-root of p1 that is in radians. This function wraps the \njava.lang.Math.cbrt()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cbrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose cube-root should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;\n\n\n\n\n\ncbrt(17d) returns 2.5712815906582356.\n\n\n\nceil \n(Function)\n\n\nReturns the smallest (closest to negative infinity) double value that is greater than or equal to the \np1\n argument, and is equal to a mathematical integer. This function wraps the\njava.lang.Math.ceil()\n method.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ceil(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose ceiling value should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;\n\n\n\n\n\nceil(423.187d) returns 424.0.\n\n\n\nconv \n(Function)\n\n\nConverts \na\n from the \nfromBase\n base to the \ntoBase\n base.\n\n\n\nSyntax\n\n\nSTRING\n math:conv(\nSTRING\n a, \nINT\n from.base, \nINT\n to.base)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \na\n\n        \nThe value whose base should be changed. Input should be as a String\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfrom.base\n\n        \nThe source base of the input parameter 'a'\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.base\n\n        \nThe target base that input parameter 'a' should be converted to\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\n\nconv(\"7f\", 16, 10) returns \"127\".\n\n\n\ncopySign \n(Function)\n\n\nReturs a value with the received \nmagnitude\n and the \nsign\n. This function wraps the \njava.lang.Math.copySign()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:copySign(\nINT|LONG|FLOAT|DOUBLE\n magnitude, \nINT|LONG|FLOAT|DOUBLE\n sign)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmagnitude\n\n        \nThis parameters magnitude will be used for output attribute\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsign\n\n        \nThis parameters sign will be used for output attribute\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;\n\n\n\n\n\ncopySign(5.6d, -3.0d) returns -5.6.\n\n\n\ncos \n(Function)\n\n\nReturns the cosine of \np1\n that is in radians. This function wraps the \njava.lang.Math.cos()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cos(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose cosine value should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\n\ncos(6d) returns 0.9601702866503661.\n\n\n\ncosh \n(Function)\n\n\nReturns the hyperbolic cosine of \np1\n that is in radians. This function wraps the \njava.lang.Math.cosh()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cosh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic cosine should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\n\ncosh (6d) returns 201.7156361224559.\n\n\n\ne \n(Function)\n\n\nReturns the \njava.lang.Math.E\n constant, which is the closest double value to e, which is the base of the natural logarithms.\n\n\n\nSyntax\n\n\nDOUBLE\n math:e()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;\n\n\n\n\n\ne() returns 2.7182818284590452354.\n\n\n\nexp \n(Function)\n\n\nReturns the Euler's number \ne\n raised to the power of \np1\n. This function wraps the \njava.lang.Math.exp()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:exp(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe power that the Euler's number e should be raised to\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\n\nexp(10.23) returns 27722.51006805505.\n\n\n\nfloor \n(Function)\n\n\nThis function wraps the \njava.lang.Math.floor()\n function, which returns the largest (closest to positive infinity) value that is less that or equal to \np1\n, and is equal to a mathematical integer.\n\n\n\nSyntax\n\n\nDOUBLE\n math:floor(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose floor value should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;\n\n\n\n\n\nfloor(10.23) returns 10.0.\n\n\n\ngetExponent \n(Function)\n\n\nReturns the unbiased exponent that is used in the representation of \np1\n. This function wraps the \njava.lang.Math.getExponent()\n function.\n\n\n\nSyntax\n\n\nINT\n math:getExponent(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose unbiased exponent representation should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\n\ngetExponent(60984.1) returns 15.\n\n\n\nhex \n(Function)\n\n\nWraps the \njava.lang.Double.toHexString()\n function that returns a hexadecimal string representation of \np1\n.\n\n\n\nSyntax\n\n\nSTRING\n math:hex(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hexadecimal representation should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;\n\n\n\n\n\nhex(200) returns \"c8\".\n\n\n\nisInfinite \n(Function)\n\n\nWraps the \njava.lang.Float.isInfinite()\n and \njava.lang.Double.isInfinite()\n functions and returns \ntrue\n if \np1\n is infinitely large in magnitude and returns \nfalse\n if otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isInfinite(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if infinite\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;\n\n\n\n\n\nisInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.\n\n\n\nisNan \n(Function)\n\n\nWraps the \njava.lang.Float.isNaN()\n and \njava.lang.Double.isNaN()\n functions and returns \ntrue\n if \np1\n is a NaN (Not-a-Number) value, and returns \nfalse\n if otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isNan(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if it is a number\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;\n\n\n\n\n\nisNan(java.lang.Math.log(-12d)) returns true.\n\n\n\nln \n(Function)\n\n\nReturns the natural logarithm (base e) of \np1\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ln(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose natural logarithm (base e) should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nln(11.453) returns 2.438251704415579.\n\n\n\nlog \n(Function)\n\n\nReturns the logarithm of the received \nnumber\n as per the given \nbase\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log(\nINT|LONG|FLOAT|DOUBLE\n number, \nINT|LONG|FLOAT|DOUBLE\n base)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nnumber\n\n        \nThe value of whose base should be changed\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbase\n\n        \nThe base value of the ouput\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;\n\n\n\n\n\nlog(34, 2f) returns 5.08746284125034.\n\n\n\nlog10 \n(Function)\n\n\nReturns the base 10 logarithm of \np1\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log10(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose base 10 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nlog10(19.234) returns 1.2840696117100832.\n\n\n\nlog2 \n(Function)\n\n\nReturns the base 2 logarithm of \np1\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log2(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose base 2 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nlog2(91d) returns 6.507794640198696.\n\n\n\nmax \n(Function)\n\n\nReturns the greater value out of \np1\n and \np2\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:max(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nValue one to be compared in finding largest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nValue two to be compared in finding largest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;\n\n\n\n\n\nmax(123.67d, 91) returns 123.67.\n\n\n\nmin \n(Function)\n\n\nReturns the smaller value out of \np1\n and \np2\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:min(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nValue one to be compared in finding smallest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nValue two to be compared in finding smallest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;\n\n\n\n\n\nmin(123.67d, 91) returns 91.\n\n\n\noct \n(Function)\n\n\nConverts \np1\n to octal.\n\n\n\nSyntax\n\n\nSTRING\n math:oct(\nINT|LONG\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose octal representation should be found.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\n\noct(99l) returns \"143\".\n\n\n\nparseDouble \n(Function)\n\n\nReturns the double value of the received string.\n\n\n\nSyntax\n\n\nDOUBLE\n math:parseDouble(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a double\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseDouble(\"123\") returns 123.0.\n\n\n\nparseFloat \n(Function)\n\n\nReturns the float value of the received string.\n\n\n\nSyntax\n\n\nFLOAT\n math:parseFloat(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a float\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseFloat(\"123\") returns 123.0.\n\n\n\nparseInt \n(Function)\n\n\nReturns the integer value of the received string.\n\n\n\nSyntax\n\n\nINT\n math:parseInt(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a int\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseInt(\"123\") returns 123.\n\n\n\nparseLong \n(Function)\n\n\nReturns the long value of the received string.\n\n\n\nSyntax\n\n\nLONG\n math:parseLong(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a long\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseLong(\"123\") returns 123.\n\n\n\npi \n(Function)\n\n\nReturns the \njava.lang.Math.PI\n constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter. \n\n\n\nSyntax\n\n\nDOUBLE\n math:pi()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;\n\n\n\n\n\npi() always returns 3.141592653589793.\n\n\n\npower \n(Function)\n\n\nReturns a value by raising to the given power.\n\n\n\nSyntax\n\n\nDOUBLE\n math:power(\nINT|LONG|FLOAT|DOUBLE\n value, \nINT|LONG|FLOAT|DOUBLE\n to.power)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value that should be raised to the power of 'to.power' input parameter\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.power\n\n        \nThe power that 'value' input parameter should be raised to\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;\n\n\n\n\n\npower(5.6d, 3.0d) returns 175.61599999999996.\n\n\n\nrand \n(Function)\n\n\nReturns a stream of pseudo-random numbers when a sequence of calls are sent to the \nrand()\n. Optionally, it is possible to define a seed, i.e., \nrand(seed)\n using which the pseudo-random numbers are generated. These functions use the \njava.util.Random\n class internally.\n\n\n\nSyntax\n\n\nDOUBLE\n math:rand(\nINT|LONG\n seed)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nseed\n\n        \nAn optional seed value that will be used to generate the random number sequence\n\n        \ndefaultSeed\n\n        \nINT\nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\n\nA random double value between 0 and 1 will be generated using math:rand()\n\n\n\nround \n(Function)\n\n\nReturns the closest integer/long value depending on the input argument.\n\n\n\nSyntax\n\n\nINT|LONG\n math:round(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be rounded to the closest integer/long.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;\n\n\n\n\n\nround(3252.353) returns 3252.\n\n\n\nsignum \n(Function)\n\n\nReturns +1, 0, or -1 for the given positive, zero, and negative values respectively. This function wraps the \njava.lang.Math.signum()\n function.\n\n\n\nSyntax\n\n\nINT\n math:signum(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if positive or negative or otherwise\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;\n\n\n\n\n\nsignum(-6.32d) returns -1.\n\n\n\nsin \n(Function)\n\n\nReturns the sine of the value given in radians. This function wraps the \njava.lang.Math.sin()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sin(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose sine value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;\n\n\n\n\n\nsin(6d) returns -0.27941549819892586.\n\n\n\nsinh \n(Function)\n\n\nReturns the hyperbolic sine of the value given in radians. This function wraps the \njava.lang.Math.sinh()\n function. \n\n\n\nSyntax\n\n\nDOUBLE\n math:sinh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic sine value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;\n\n\n\n\n\nsinh(6d) returns 201.71315737027922.\n\n\n\nsqrt \n(Function)\n\n\nReturns the square-root of the given value. This function wraps the \njava.lang.Math.sqrt()\ns function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sqrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose square-root value should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;\n\n\n\n\n\nsqrt(4d) returns 2.\n\n\n\ntan \n(Function)\n\n\nReturns the tan of the given value in radians. This function wraps the \njava.lang.Math.tan()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tan(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose tan value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;\n\n\n\n\n\ntan(6d) returns -0.29100619138474915.\n\n\n\ntanh \n(Function)\n\n\nReturns the hyperbolic tangent of the value given in radians. This function wraps the \njava.lang.Math.tanh()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tanh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic tangent value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;\n\n\n\n\n\ntanh(6d) returns 0.9999877116507956.\n\n\n\ntoDegrees \n(Function)\n\n\nConverts the value given in radians to degrees. This function wraps the \njava.lang.Math.toDegrees()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toDegrees(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe radians value that should be converted to degrees\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;\n\n\n\n\n\ntoDegrees(6d) returns 343.77467707849394.\n\n\n\ntoRadians \n(Function)\n\n\nConverts the value given in degrees to radians. This function wraps the \njava.lang.Math.toRadians()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toRadians(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe degrees value that should be converted to radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;\n\n\n\n\n\ntoRadians(6d) returns 0.10471975511965977.", 
            "title": "4.0.18"
        }, 
        {
            "location": "/api/4.0.18/#api-docs-v4018", 
            "text": "", 
            "title": "API Docs - v4.0.18"
        }, 
        {
            "location": "/api/4.0.18/#math", 
            "text": "", 
            "title": "Math"
        }, 
        {
            "location": "/api/4.0.18/#percentile-aggregate-function", 
            "text": "Returns the pth percentile value of the argument values.  Syntax  DOUBLE  math:percentile( INT|LONG|FLOAT|DOUBLE  arg,  DOUBLE  p)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The values of which the percentile should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p \n         Estimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100 \n         \n         DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;  math:percentile(temperature, 97.0)", 
            "title": "percentile (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.18/#abs-function", 
            "text": "Returns the absolute value of the given parameter. This function wraps the  java.lang.Math.abs()  function.  Syntax  DOUBLE  math:abs( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the absolute value should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;  Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.", 
            "title": "abs (Function)"
        }, 
        {
            "location": "/api/4.0.18/#acos-function", 
            "text": "If -1  = p1  = 1, returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The returned value is in radian scale. This function wraps the java.lang.Math.acos()function.  Syntax  DOUBLE  math:acos( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-cosine (inverse cosine) should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;  acos(0.5) returns 1.0471975511965979.", 
            "title": "acos (Function)"
        }, 
        {
            "location": "/api/4.0.18/#asin-function", 
            "text": "If -1  = p1  = 1, returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The returned value is in radian scale. This function wraps the java.lang.Math.asin() function.  Syntax  DOUBLE  math:asin( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-sin (inverse sine) should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;  asin(0.5) returns 0.5235987755982989.", 
            "title": "asin (Function)"
        }, 
        {
            "location": "/api/4.0.18/#atan-function", 
            "text": "1. If a single  p1  is received, returns the arc-tangent (inverse tangent) of  p1 . 2. If  p1  is received along with an optional  p1 , considers them as x,y coordinates and returnsthe respective arc-tangent (inverse tangent) of the  p1 ,  p2  coordinates.  3.The returned value is in radian scale. This function wraps the  java.lang.Math.atan()  function.  Syntax  DOUBLE  math:atan( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p1 \n         This optional parameter represents the y coordinate of the (x,y) coordinate pair \n         0D \n         INT LONG FLOAT DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;  atan(12d, 5d) returns 1.1760052070951352.", 
            "title": "atan (Function)"
        }, 
        {
            "location": "/api/4.0.18/#bin-function", 
            "text": "Returns a string representation of the integer/long  p1  argument as an unsigned integer in base 2. This function wraps the  java.lang.Integer.toBinaryString  and  java.lang.Long.toBinaryString  methods.  Syntax  STRING  math:bin( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to an unsigned integer of base 2 \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;  bin(9) returns \"1001\".", 
            "title": "bin (Function)"
        }, 
        {
            "location": "/api/4.0.18/#cbrt-function", 
            "text": "Returns the cube-root of p1 that is in radians. This function wraps the  java.lang.Math.cbrt()  function.  Syntax  DOUBLE  math:cbrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose cube-root should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;  cbrt(17d) returns 2.5712815906582356.", 
            "title": "cbrt (Function)"
        }, 
        {
            "location": "/api/4.0.18/#ceil-function", 
            "text": "Returns the smallest (closest to negative infinity) double value that is greater than or equal to the  p1  argument, and is equal to a mathematical integer. This function wraps the java.lang.Math.ceil()  method.  Syntax  DOUBLE  math:ceil( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose ceiling value should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;  ceil(423.187d) returns 424.0.", 
            "title": "ceil (Function)"
        }, 
        {
            "location": "/api/4.0.18/#conv-function", 
            "text": "Converts  a  from the  fromBase  base to the  toBase  base.  Syntax  STRING  math:conv( STRING  a,  INT  from.base,  INT  to.base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         a \n         The value whose base should be changed. Input should be as a String \n         \n         STRING \n         No \n         No \n     \n     \n         from.base \n         The source base of the input parameter 'a' \n         \n         INT \n         No \n         No \n     \n     \n         to.base \n         The target base that input parameter 'a' should be converted to \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;  conv(\"7f\", 16, 10) returns \"127\".", 
            "title": "conv (Function)"
        }, 
        {
            "location": "/api/4.0.18/#copysign-function", 
            "text": "Returs a value with the received  magnitude  and the  sign . This function wraps the  java.lang.Math.copySign()  function.  Syntax  DOUBLE  math:copySign( INT|LONG|FLOAT|DOUBLE  magnitude,  INT|LONG|FLOAT|DOUBLE  sign)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         magnitude \n         This parameters magnitude will be used for output attribute \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         sign \n         This parameters sign will be used for output attribute \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;  copySign(5.6d, -3.0d) returns -5.6.", 
            "title": "copySign (Function)"
        }, 
        {
            "location": "/api/4.0.18/#cos-function", 
            "text": "Returns the cosine of  p1  that is in radians. This function wraps the  java.lang.Math.cos()  function.  Syntax  DOUBLE  math:cos( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose cosine value should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;  cos(6d) returns 0.9601702866503661.", 
            "title": "cos (Function)"
        }, 
        {
            "location": "/api/4.0.18/#cosh-function", 
            "text": "Returns the hyperbolic cosine of  p1  that is in radians. This function wraps the  java.lang.Math.cosh()  function.  Syntax  DOUBLE  math:cosh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic cosine should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;  cosh (6d) returns 201.7156361224559.", 
            "title": "cosh (Function)"
        }, 
        {
            "location": "/api/4.0.18/#e-function", 
            "text": "Returns the  java.lang.Math.E  constant, which is the closest double value to e, which is the base of the natural logarithms.  Syntax  DOUBLE  math:e()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;  e() returns 2.7182818284590452354.", 
            "title": "e (Function)"
        }, 
        {
            "location": "/api/4.0.18/#exp-function", 
            "text": "Returns the Euler's number  e  raised to the power of  p1 . This function wraps the  java.lang.Math.exp()  function.  Syntax  DOUBLE  math:exp( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The power that the Euler's number e should be raised to \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;  exp(10.23) returns 27722.51006805505.", 
            "title": "exp (Function)"
        }, 
        {
            "location": "/api/4.0.18/#floor-function", 
            "text": "This function wraps the  java.lang.Math.floor()  function, which returns the largest (closest to positive infinity) value that is less that or equal to  p1 , and is equal to a mathematical integer.  Syntax  DOUBLE  math:floor( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose floor value should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;  floor(10.23) returns 10.0.", 
            "title": "floor (Function)"
        }, 
        {
            "location": "/api/4.0.18/#getexponent-function", 
            "text": "Returns the unbiased exponent that is used in the representation of  p1 . This function wraps the  java.lang.Math.getExponent()  function.  Syntax  INT  math:getExponent( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose unbiased exponent representation should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;  getExponent(60984.1) returns 15.", 
            "title": "getExponent (Function)"
        }, 
        {
            "location": "/api/4.0.18/#hex-function", 
            "text": "Wraps the  java.lang.Double.toHexString()  function that returns a hexadecimal string representation of  p1 .  Syntax  STRING  math:hex( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hexadecimal representation should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;  hex(200) returns \"c8\".", 
            "title": "hex (Function)"
        }, 
        {
            "location": "/api/4.0.18/#isinfinite-function", 
            "text": "Wraps the  java.lang.Float.isInfinite()  and  java.lang.Double.isInfinite()  functions and returns  true  if  p1  is infinitely large in magnitude and returns  false  if otherwise.  Syntax  BOOL  math:isInfinite( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if infinite \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;  isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.", 
            "title": "isInfinite (Function)"
        }, 
        {
            "location": "/api/4.0.18/#isnan-function", 
            "text": "Wraps the  java.lang.Float.isNaN()  and  java.lang.Double.isNaN()  functions and returns  true  if  p1  is a NaN (Not-a-Number) value, and returns  false  if otherwise.  Syntax  BOOL  math:isNan( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if it is a number \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;  isNan(java.lang.Math.log(-12d)) returns true.", 
            "title": "isNan (Function)"
        }, 
        {
            "location": "/api/4.0.18/#ln-function", 
            "text": "Returns the natural logarithm (base e) of  p1 .  Syntax  DOUBLE  math:ln( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose natural logarithm (base e) should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;  ln(11.453) returns 2.438251704415579.", 
            "title": "ln (Function)"
        }, 
        {
            "location": "/api/4.0.18/#log-function", 
            "text": "Returns the logarithm of the received  number  as per the given  base .  Syntax  DOUBLE  math:log( INT|LONG|FLOAT|DOUBLE  number,  INT|LONG|FLOAT|DOUBLE  base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         number \n         The value of whose base should be changed \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         base \n         The base value of the ouput \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;  log(34, 2f) returns 5.08746284125034.", 
            "title": "log (Function)"
        }, 
        {
            "location": "/api/4.0.18/#log10-function", 
            "text": "Returns the base 10 logarithm of  p1 .  Syntax  DOUBLE  math:log10( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose base 10 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;  log10(19.234) returns 1.2840696117100832.", 
            "title": "log10 (Function)"
        }, 
        {
            "location": "/api/4.0.18/#log2-function", 
            "text": "Returns the base 2 logarithm of  p1 .  Syntax  DOUBLE  math:log2( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose base 2 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;  log2(91d) returns 6.507794640198696.", 
            "title": "log2 (Function)"
        }, 
        {
            "location": "/api/4.0.18/#max-function", 
            "text": "Returns the greater value out of  p1  and  p2 .  Syntax  DOUBLE  math:max( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         Value one to be compared in finding largest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         Value two to be compared in finding largest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;  max(123.67d, 91) returns 123.67.", 
            "title": "max (Function)"
        }, 
        {
            "location": "/api/4.0.18/#min-function", 
            "text": "Returns the smaller value out of  p1  and  p2 .  Syntax  DOUBLE  math:min( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         Value one to be compared in finding smallest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         Value two to be compared in finding smallest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;  min(123.67d, 91) returns 91.", 
            "title": "min (Function)"
        }, 
        {
            "location": "/api/4.0.18/#oct-function", 
            "text": "Converts  p1  to octal.  Syntax  STRING  math:oct( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose octal representation should be found. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  oct(99l) returns \"143\".", 
            "title": "oct (Function)"
        }, 
        {
            "location": "/api/4.0.18/#parsedouble-function", 
            "text": "Returns the double value of the received string.  Syntax  DOUBLE  math:parseDouble( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a double \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;  parseDouble(\"123\") returns 123.0.", 
            "title": "parseDouble (Function)"
        }, 
        {
            "location": "/api/4.0.18/#parsefloat-function", 
            "text": "Returns the float value of the received string.  Syntax  FLOAT  math:parseFloat( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a float \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;  parseFloat(\"123\") returns 123.0.", 
            "title": "parseFloat (Function)"
        }, 
        {
            "location": "/api/4.0.18/#parseint-function", 
            "text": "Returns the integer value of the received string.  Syntax  INT  math:parseInt( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a int \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;  parseInt(\"123\") returns 123.", 
            "title": "parseInt (Function)"
        }, 
        {
            "location": "/api/4.0.18/#parselong-function", 
            "text": "Returns the long value of the received string.  Syntax  LONG  math:parseLong( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a long \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;  parseLong(\"123\") returns 123.", 
            "title": "parseLong (Function)"
        }, 
        {
            "location": "/api/4.0.18/#pi-function", 
            "text": "Returns the  java.lang.Math.PI  constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter.   Syntax  DOUBLE  math:pi()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;  pi() always returns 3.141592653589793.", 
            "title": "pi (Function)"
        }, 
        {
            "location": "/api/4.0.18/#power-function", 
            "text": "Returns a value by raising to the given power.  Syntax  DOUBLE  math:power( INT|LONG|FLOAT|DOUBLE  value,  INT|LONG|FLOAT|DOUBLE  to.power)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value that should be raised to the power of 'to.power' input parameter \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         to.power \n         The power that 'value' input parameter should be raised to \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;  power(5.6d, 3.0d) returns 175.61599999999996.", 
            "title": "power (Function)"
        }, 
        {
            "location": "/api/4.0.18/#rand-function", 
            "text": "Returns a stream of pseudo-random numbers when a sequence of calls are sent to the  rand() . Optionally, it is possible to define a seed, i.e.,  rand(seed)  using which the pseudo-random numbers are generated. These functions use the  java.util.Random  class internally.  Syntax  DOUBLE  math:rand( INT|LONG  seed)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         seed \n         An optional seed value that will be used to generate the random number sequence \n         defaultSeed \n         INT LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  A random double value between 0 and 1 will be generated using math:rand()", 
            "title": "rand (Function)"
        }, 
        {
            "location": "/api/4.0.18/#round-function", 
            "text": "Returns the closest integer/long value depending on the input argument.  Syntax  INT|LONG  math:round( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be rounded to the closest integer/long. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;  round(3252.353) returns 3252.", 
            "title": "round (Function)"
        }, 
        {
            "location": "/api/4.0.18/#signum-function", 
            "text": "Returns +1, 0, or -1 for the given positive, zero, and negative values respectively. This function wraps the  java.lang.Math.signum()  function.  Syntax  INT  math:signum( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if positive or negative or otherwise \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;  signum(-6.32d) returns -1.", 
            "title": "signum (Function)"
        }, 
        {
            "location": "/api/4.0.18/#sin-function", 
            "text": "Returns the sine of the value given in radians. This function wraps the  java.lang.Math.sin()  function.  Syntax  DOUBLE  math:sin( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose sine value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;  sin(6d) returns -0.27941549819892586.", 
            "title": "sin (Function)"
        }, 
        {
            "location": "/api/4.0.18/#sinh-function", 
            "text": "Returns the hyperbolic sine of the value given in radians. This function wraps the  java.lang.Math.sinh()  function.   Syntax  DOUBLE  math:sinh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic sine value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;  sinh(6d) returns 201.71315737027922.", 
            "title": "sinh (Function)"
        }, 
        {
            "location": "/api/4.0.18/#sqrt-function", 
            "text": "Returns the square-root of the given value. This function wraps the  java.lang.Math.sqrt() s function.  Syntax  DOUBLE  math:sqrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose square-root value should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;  sqrt(4d) returns 2.", 
            "title": "sqrt (Function)"
        }, 
        {
            "location": "/api/4.0.18/#tan-function", 
            "text": "Returns the tan of the given value in radians. This function wraps the  java.lang.Math.tan()  function.  Syntax  DOUBLE  math:tan( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose tan value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;  tan(6d) returns -0.29100619138474915.", 
            "title": "tan (Function)"
        }, 
        {
            "location": "/api/4.0.18/#tanh-function", 
            "text": "Returns the hyperbolic tangent of the value given in radians. This function wraps the  java.lang.Math.tanh()  function.  Syntax  DOUBLE  math:tanh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic tangent value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;  tanh(6d) returns 0.9999877116507956.", 
            "title": "tanh (Function)"
        }, 
        {
            "location": "/api/4.0.18/#todegrees-function", 
            "text": "Converts the value given in radians to degrees. This function wraps the  java.lang.Math.toDegrees()  function.  Syntax  DOUBLE  math:toDegrees( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The radians value that should be converted to degrees \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;  toDegrees(6d) returns 343.77467707849394.", 
            "title": "toDegrees (Function)"
        }, 
        {
            "location": "/api/4.0.18/#toradians-function", 
            "text": "Converts the value given in degrees to radians. This function wraps the  java.lang.Math.toRadians()  function.  Syntax  DOUBLE  math:toRadians( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The degrees value that should be converted to radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;  toRadians(6d) returns 0.10471975511965977.", 
            "title": "toRadians (Function)"
        }, 
        {
            "location": "/api/4.0.17/", 
            "text": "API Docs - v4.0.17\n\n\nMath\n\n\npercentile *\na target=\"_blank\" href=\"https://wso2.github.io/siddhi/documentation/siddhi-4\n\n\n.0/#aggregate-function\"\n(Aggregate Function)\n*\n\n\nReturns the pth percentile value of the given argument values.\n\n\n\nSyntax\n\n\nDOUBLE\n math:percentile(\nINT|LONG|FLOAT|DOUBLE\n arg, \nDOUBLE\n p)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe values of which the percentile should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np\n\n        \nEstimate of which percentile to be found (pth \n        percentile) where p is any number greater than 0 or less than or equal to 100\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;\n\n\n\n\n\nmath:percentile(temperature, 97.0)\n\n\n\nabs \n(Function)\n\n\nReturns the absolute value of the given parameter value. This function wraps \nthe `java.lang.Math.abs()` function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:abs(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the absolute value should be \n        found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;\n\n\n\n\n\nBoth abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 \nis 3.\n\n\n\nacos \n(Function)\n\n\nIf -1 \n= p1 \n= 1, this function returns the arc-cosine (inverse cosine) of p1.\n If not, it returns NULL. The returned value is in radian scale. This function wraps the `java.lang.Math.acos()` \n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:acos(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-cosine (inverse cosine) \n        should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;\n\n\n\n\n\nacos(0.5) returns 1.0471975511965979.\n\n\n\nasin \n(Function)\n\n\nIf -1 \n= p1 \n= 1, this function returns the arc-sin (inverse sine) of p1. If not,\n it returns NULL. The returned value is in radian scale. This function wraps the `java.lang.Math.asin()` function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:asin(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-sin (inverse sine) should \n        be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;\n\n\n\n\n\nasin(0.5) returns 0.5235987755982989.\n\n\n\natan \n(Function)\n\n\n1. If a single p1 is received, returns the arc-tangent (inverse tangent) of p1.\n\n2.If p1 is received along with an optional p1, considers them as x,y coordinates and returns the respective \narc-tangent (inverse tangent) of the p1, p2 coordinates.\n3.The returned value is in radian scale. This function \nwraps the  java.lang.Math.atan() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:atan(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-tangent (inverse tangent) \n        should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) \n        coordinate pair\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np1\n\n        \nThis optional parameter represents the y coordinate \n        of the (x,y) coordinate pair\n\n        \n0D\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\n\natan(12d, 5d) returns 1.1760052070951352.\n\n\n\nbin \n(Function)\n\n\nReturns a string representation of the integer/long `p1` argument as an unsigned \ninteger in base 2. This function wraps the `java.lang.Integer.toBinaryString` and `java.lang.Long.toBinaryString`\nmethods.\n\n\n\nSyntax\n\n\nSTRING\n math:bin(\nINT|LONG\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to an unsigned \n        integer of base 2\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;\n\n\n\n\n\nbin(9) returns \"1001\".\n\n\n\ncbrt \n(Function)\n\n\nReturns the cube-root of `p1` that is in radians. This function wraps the `java\n.lang.Math.cbrt()` function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cbrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose cube-root should be found. Input \n        must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;\n\n\n\n\n\ncbrt(17d) returns 2.5712815906582356.\n\n\n\nceil \n(Function)\n\n\nReturns the smallest (closest to negative infinity) double value that is greater \nthan or equal to the `p1` argument, and is equal to a mathematical integer. This function wraps the `java.lang.Math.ceil\n()` method.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ceil(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose ceiling value should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;\n\n\n\n\n\nceil(423.187d) returns 424.0.\n\n\n\nconv \n(Function)\n\n\nConverts a from the `fromBase` base to the `toBase` base.\n\n\n\nSyntax\n\n\nSTRING\n math:conv(\nSTRING\n a, \nINT\n from.base, \nINT\n to.base)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \na\n\n        \nThe value whose base should be changed. Input should \n        be as a String\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfrom.base\n\n        \nThe source base of the input parameter 'a'\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.base\n\n        \nThe target base that input parameter 'a' should be \n        converted to\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\n\nconv(\"7f\", 16, 10) returns \"127\".\n\n\n\ncopySign \n(Function)\n\n\nReturns a value with the received `magnitude` and the `sign`. This function wraps the \n`java.lang.Math.copySign()` function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:copySign(\nINT|LONG|FLOAT|DOUBLE\n magnitude, \nINT|LONG|FLOAT|DOUBLE\n sign)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmagnitude\n\n        \nThis parameters magnitude will be used for output \n        attribute\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsign\n\n        \nThis parameters sign will be used for output \n        attribute\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;\n\n\n\n\n\ncopySign(5.6d, -3.0d) returns -5.6.\n\n\n\ncos \n(Function)\n\n\nReturns the cosine of `p1` that is in radians. This function wraps the `java.lang\n.Math.cos()` function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cos(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose cosine value should be found. \n        Input must be in radians\n\n        \n \n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\n\ncos(6d) returns 0.9601702866503661.\n\n\n\ncosh \n(Function)\n\n\nReturns the hyperbolic cosine of `p1` that is in radians. This function wraps the \n`java.lang.Math.cosh()` function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cosh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic cosine should be found.\n         Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\n\ncosh (6d) returns 201.7156361224559.\n\n\n\ne \n(Function)\n\n\nReturns the `java.lang.Math.E` constant, which is the closest double value to `e`, \nwhich is the base of the natural logarithms.\n\n\n\nSyntax\n\n\nDOUBLE\n math:e()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;\n\n\n\n\n\ne() returns 2.7182818284590452354.\n\n\n\nexp \n(Function)\n\n\nReturns the Euler's number `e` raised to the power of `p1`. This function wraps the \n`java.lang.Math.exp()` function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:exp(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe power that the Euler's number e should be raised \n        to\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\n\nexp(10.23) returns 27722.51006805505.\n\n\n\nfloor \n(Function)\n\n\nThis function wraps the `java.lang.Math.floor()` function, which returns the \nlargest (closest to positive infinity) value that is less than or equal to `p1`, and is equal to a mathematical integer\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:floor(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose floor value should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;\n\n\n\n\n\nfloor(10.23) returns 10.0.\n\n\n\ngetExponent *\ns\n\n\n(Function)\n*\n\n\nReturns the unbiased exponent that is used in the representation of `p1`. This function \nwraps the `java.lang.Math.getExponent()` function.\n\n\n\nSyntax\n\n\nINT\n math:getExponent(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose unbiased exponent representation \n        should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\n\ngetExponent(60984.1) returns 15.\n\n\n\nhex \n(Function)\n\n\nWraps the `java.lang.Double.toHexString()` function that returns a hexadecimal \nstring representation of `p1`.\n\n\n\nSyntax\n\n\nSTRING\n math:hex(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hexadecimal representation should \n        be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;\n\n\n\n\n\nhex(200) returns \"c8\".\n\n\n\nisInfinite *\n\n\n(Function)\n*\n\n\nWraps the `java.lang.Float.isInfinite()` and `java.lang.Double.isInfinite()` \nfunctions and returns `true` if `p1` is infinitely large in magnitude and returns `false` if otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isInfinite(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if infinite\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;\n\n\n\n\n\nisInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.\n\n\n\nisNan \n(Function)\n\n\nWraps the `java.lang.Float.isNaN()` and `java.lang.Double.isNaN()` functions and \nreturns `true` if `p1` is a NaN (Not-a-Number) value and returns `false` if otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isNan(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if it is a number\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;\n\n\n\n\n\nisNan(java.lang.Math.log(-12d)) returns true.\n\n\n\nln \n(Function)\n\n\nReturns the natural logarithm (base e) of `p1`.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ln(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose natural logarithm (base e) should \n        be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nln(11.453) returns 2.438251704415579.\n\n\n\nlog \n(Function)\n\n\nReturns the logarithm of the received `number` as per the given `base`.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log(\nINT|LONG|FLOAT|DOUBLE\n number, \nINT|LONG|FLOAT|DOUBLE\n base)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nnumber\n\n        \nThe value of whose base should be changed\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbase\n\n        \nThe base value of the ouput\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;\n\n\n\n\n\nlog(34, 2f) returns 5.08746284125034.\n\n\n\nlog10 \n(Function)\n\n\nReturns the base 10 logarithm of `p1`.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log10(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which base 10 logarithm should be found\n        .\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nlog10(19.234) returns 1.2840696117100832.\n\n\n\nlog2 \n(Function)\n\n\nReturns the base 2 logarithm of `p1`.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log2(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which base 2 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nlog2(91d) returns 6.507794640198696.\n\n\n\nmax \n(Function)\n\n\nReturns the greater value out of `p1` and `p2`.\n\n\n\nSyntax\n\n\nDOUBLE\n math:max(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nValue one to be compared in finding the largest \n        value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nValue two to be compared in finding largest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;\n\n\n\n\n\nmax(123.67d, 91) returns 123.67.\n\n\n\nmin \n(Function)\n\n\nReturns the smaller value out of `p1` and `p2`.\n\n\n\nSyntax\n\n\nDOUBLE\n math:min(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nValue one to be compared in finding smallest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nValue two to be compared in finding smallest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;\n\n\n\n\n\nmin(123.67d, 91) returns 91.\n\n\n\noct \n(Function)\n\n\nConverts `p1` to octal.\n\n\n\nSyntax\n\n\nSTRING\n math:oct(\nINT|LONG\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which octal representation should be \n        found.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\n\noct(99l) returns \"143\".\n\n\n\nparseDouble *\n\n\n(Function)\n*\n\n\nReturns the double value of the received string.\n\n\n\nSyntax\n\n\nDOUBLE\n math:parseDouble(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a double\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseDouble(\"123\") returns 123.0.\n\n\n\nparseFloat *\n\n\n(Function)\n*\n\n\nReturns the float value of the received string.\n\n\n\nSyntax\n\n\nFLOAT\n math:parseFloat(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a float\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseFloat(\"123\") returns 123.0.\n\n\n\nparseInt \n(Function)\n\n\nReturns the integer value of the received string.\n\n\n\nSyntax\n\n\nINT\n math:parseInt(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a int\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseInt(\"123\") returns 123.\n\n\n\nparseLong *\n(Function)\n\n\n*\n\n\nReturns the long value of the received string.\n\n\n\nSyntax\n\n\nLONG\n math:parseLong(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a long\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseLong(\"123\") returns 123.\n\n\n\npi \n(Function)\n\n\nReturns the `java.lang.Math.PI` constant, which is the closest value to pi, i.e., \nthe ratio of the circumference of a circle to its diameter. \n\n\n\nSyntax\n\n\nDOUBLE\n math:pi()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;\n\n\n\n\n\npi() always returns 3.141592653589793.\n\n\n\npower \n(Function)\n\n\nReturns a value by raising the given value to the given power.\n\n\n\nSyntax\n\n\nDOUBLE\n math:power(\nINT|LONG|FLOAT|DOUBLE\n value, \nINT|LONG|FLOAT|DOUBLE\n to.power)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value that should be raised to the power of 'to\n        .power' input parameter\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.power\n\n        \nThe power that 'value' input parameter should be \n        raised to\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;\n\n\n\n\n\npower(5.6d, 3.0d) returns 175.61599999999996.\n\n\n\nrand \n(Function)\n\n\nReturns stream of pseudo-random numbers when a sequence of calls are sent to the \n`rand()`. Optionally, it is possible to define a seed, i.e., `rand(seed)` using which the pseudo-random numbers are \ngenerated. These functions use the `java.util.Random` class internally.\n\n\n\nSyntax\n\n\nDOUBLE\n math:rand(\nINT|LONG\n seed)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nseed\n\n        \nAn optional seed value that will be used to generate \n        the random number sequence\n\n        \ndefaultSeed\n\n        \nINT\nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\n\nA random double value between 0 and 1 will be generated using math:rand()\n\n\n\nround \n(Function)\n\n\nReturns the closest integer/long value depending on the input argument.\n\n\n\nSyntax\n\n\nINT|LONG\n math:round(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be rounded to the closest \n        integer/long.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;\n\n\n\n\n\nround(3252.353) returns 3252.\n\n\n\nsignum \n(Function)\n\n\nReturns +1, 0, or -1 for the given positive, zero, and negative values respectively.\n This function wraps the `java.lang.Math.signum()` function.\n\n\n\nSyntax\n\n\nINT\n math:signum(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if positive or \n        negative or otherwise\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;\n\n\n\n\n\nsignum(-6.32d) returns -1.\n\n\n\nsin \n(Function)\n\n\nReturns the sine of the value given in radians. This function wraps the \n`java.lang.Math.sin()` function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sin(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose sine value should be found. Input \n        should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;\n\n\n\n\n\nsin(6d) returns -0.27941549819892586.\n\n\n\nsinh \n(Function)\n\n\nReturns the hyperbolic sine of the given value in radians). This function \nwraps the `java.lang.Math.sinh()` function. \n\n\n\nSyntax\n\n\nDOUBLE\n math:sinh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic sine value should be \n        found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;\n\n\n\n\n\nsinh(6d) returns 201.71315737027922.\n\n\n\nsqrt \n(Function)\n\n\nReturns the square-root of the given value. This function wraps the `java.lang.Math\n.sqrt()` function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sqrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose square-root value should be found\n        .\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;\n\n\n\n\n\nsqrt(4d) returns 2.\n\n\n\ntan \n(Function)\n\n\nReturns the tan of the value given in radians. This function wraps the `java\n.lang.Math.tan()` function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tan(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose tan value should be found. Input \n        should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;\n\n\n\n\n\ntan(6d) returns -0.29100619138474915.\n\n\n\ntanh \n(Function)\n\n\nReturns the hyperbolic tangent of the given value in radians. This function \nwraps the `java.lang.Math.tanh()` function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tanh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic tangent value should be\n         found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;\n\n\n\n\n\ntanh(6d) returns 0.9999877116507956.\n\n\n\ntoDegrees *\n(Function)\n\n\n*\n\n\nConverts the given value in radians to degrees. This function wraps the `java.lang\n.Math.toDegrees()` function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toDegrees(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe radians value that should be converted to \n        degrees\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;\n\n\n\n\n\ntoDegrees(6d) returns 343.77467707849394.\n\n\n\ntoRadians *\n(Function)\n\n\n*\n\n\nConverts the value given in degrees to radians. This function wraps the `java.lang\n.Math.toRadians()` function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toRadians(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe degrees value that should be converted to \n        radians\n\n        \n \n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;\n\n\n\n\n\ntoRadians(6d) returns 0.10471975511965977.", 
            "title": "4.0.17"
        }, 
        {
            "location": "/api/4.0.17/#api-docs-v4017", 
            "text": "", 
            "title": "API Docs - v4.0.17"
        }, 
        {
            "location": "/api/4.0.17/#math", 
            "text": "", 
            "title": "Math"
        }, 
        {
            "location": "/api/4.0.17/#percentile-a-target_blank-hrefhttpswso2githubiosiddhidocumentationsiddhi-4", 
            "text": ".0/#aggregate-function\" (Aggregate Function) *  Returns the pth percentile value of the given argument values.  Syntax  DOUBLE  math:percentile( INT|LONG|FLOAT|DOUBLE  arg,  DOUBLE  p)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The values of which the percentile should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p \n         Estimate of which percentile to be found (pth \n        percentile) where p is any number greater than 0 or less than or equal to 100 \n         \n         DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;  math:percentile(temperature, 97.0)", 
            "title": "percentile *&lt;a target=\"_blank\" href=\"https://wso2.github.io/siddhi/documentation/siddhi-4"
        }, 
        {
            "location": "/api/4.0.17/#abs-function", 
            "text": "Returns the absolute value of the given parameter value. This function wraps \nthe `java.lang.Math.abs()` function.  Syntax  DOUBLE  math:abs( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the absolute value should be \n        found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;  Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 \nis 3.", 
            "title": "abs (Function)"
        }, 
        {
            "location": "/api/4.0.17/#acos-function", 
            "text": "If -1  = p1  = 1, this function returns the arc-cosine (inverse cosine) of p1.\n If not, it returns NULL. The returned value is in radian scale. This function wraps the `java.lang.Math.acos()` \n function.  Syntax  DOUBLE  math:acos( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-cosine (inverse cosine) \n        should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;  acos(0.5) returns 1.0471975511965979.", 
            "title": "acos (Function)"
        }, 
        {
            "location": "/api/4.0.17/#asin-function", 
            "text": "If -1  = p1  = 1, this function returns the arc-sin (inverse sine) of p1. If not,\n it returns NULL. The returned value is in radian scale. This function wraps the `java.lang.Math.asin()` function.  Syntax  DOUBLE  math:asin( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-sin (inverse sine) should \n        be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;  asin(0.5) returns 0.5235987755982989.", 
            "title": "asin (Function)"
        }, 
        {
            "location": "/api/4.0.17/#atan-function", 
            "text": "1. If a single p1 is received, returns the arc-tangent (inverse tangent) of p1. 2.If p1 is received along with an optional p1, considers them as x,y coordinates and returns the respective \narc-tangent (inverse tangent) of the p1, p2 coordinates. 3.The returned value is in radian scale. This function \nwraps the  java.lang.Math.atan() function.  Syntax  DOUBLE  math:atan( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-tangent (inverse tangent) \n        should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) \n        coordinate pair \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p1 \n         This optional parameter represents the y coordinate \n        of the (x,y) coordinate pair \n         0D \n         INT LONG FLOAT DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;  atan(12d, 5d) returns 1.1760052070951352.", 
            "title": "atan (Function)"
        }, 
        {
            "location": "/api/4.0.17/#bin-function", 
            "text": "Returns a string representation of the integer/long `p1` argument as an unsigned \ninteger in base 2. This function wraps the `java.lang.Integer.toBinaryString` and `java.lang.Long.toBinaryString`\nmethods.  Syntax  STRING  math:bin( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to an unsigned \n        integer of base 2 \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;  bin(9) returns \"1001\".", 
            "title": "bin (Function)"
        }, 
        {
            "location": "/api/4.0.17/#cbrt-function", 
            "text": "Returns the cube-root of `p1` that is in radians. This function wraps the `java\n.lang.Math.cbrt()` function.  Syntax  DOUBLE  math:cbrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose cube-root should be found. Input \n        must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;  cbrt(17d) returns 2.5712815906582356.", 
            "title": "cbrt (Function)"
        }, 
        {
            "location": "/api/4.0.17/#ceil-function", 
            "text": "Returns the smallest (closest to negative infinity) double value that is greater \nthan or equal to the `p1` argument, and is equal to a mathematical integer. This function wraps the `java.lang.Math.ceil\n()` method.  Syntax  DOUBLE  math:ceil( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose ceiling value should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;  ceil(423.187d) returns 424.0.", 
            "title": "ceil (Function)"
        }, 
        {
            "location": "/api/4.0.17/#conv-function", 
            "text": "Converts a from the `fromBase` base to the `toBase` base.  Syntax  STRING  math:conv( STRING  a,  INT  from.base,  INT  to.base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         a \n         The value whose base should be changed. Input should \n        be as a String \n         \n         STRING \n         No \n         No \n     \n     \n         from.base \n         The source base of the input parameter 'a' \n         \n         INT \n         No \n         No \n     \n     \n         to.base \n         The target base that input parameter 'a' should be \n        converted to \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;  conv(\"7f\", 16, 10) returns \"127\".", 
            "title": "conv (Function)"
        }, 
        {
            "location": "/api/4.0.17/#copysign-function", 
            "text": "Returns a value with the received `magnitude` and the `sign`. This function wraps the \n`java.lang.Math.copySign()` function.  Syntax  DOUBLE  math:copySign( INT|LONG|FLOAT|DOUBLE  magnitude,  INT|LONG|FLOAT|DOUBLE  sign)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         magnitude \n         This parameters magnitude will be used for output \n        attribute \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         sign \n         This parameters sign will be used for output \n        attribute \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;  copySign(5.6d, -3.0d) returns -5.6.", 
            "title": "copySign (Function)"
        }, 
        {
            "location": "/api/4.0.17/#cos-function", 
            "text": "Returns the cosine of `p1` that is in radians. This function wraps the `java.lang\n.Math.cos()` function.  Syntax  DOUBLE  math:cos( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose cosine value should be found. \n        Input must be in radians \n          \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;  cos(6d) returns 0.9601702866503661.", 
            "title": "cos (Function)"
        }, 
        {
            "location": "/api/4.0.17/#cosh-function", 
            "text": "Returns the hyperbolic cosine of `p1` that is in radians. This function wraps the \n`java.lang.Math.cosh()` function.  Syntax  DOUBLE  math:cosh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic cosine should be found.\n         Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;  cosh (6d) returns 201.7156361224559.", 
            "title": "cosh (Function)"
        }, 
        {
            "location": "/api/4.0.17/#e-function", 
            "text": "Returns the `java.lang.Math.E` constant, which is the closest double value to `e`, \nwhich is the base of the natural logarithms.  Syntax  DOUBLE  math:e()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;  e() returns 2.7182818284590452354.", 
            "title": "e (Function)"
        }, 
        {
            "location": "/api/4.0.17/#exp-function", 
            "text": "Returns the Euler's number `e` raised to the power of `p1`. This function wraps the \n`java.lang.Math.exp()` function.  Syntax  DOUBLE  math:exp( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The power that the Euler's number e should be raised \n        to \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;  exp(10.23) returns 27722.51006805505.", 
            "title": "exp (Function)"
        }, 
        {
            "location": "/api/4.0.17/#floor-function", 
            "text": "This function wraps the `java.lang.Math.floor()` function, which returns the \nlargest (closest to positive infinity) value that is less than or equal to `p1`, and is equal to a mathematical integer\n.  Syntax  DOUBLE  math:floor( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose floor value should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;  floor(10.23) returns 10.0.", 
            "title": "floor (Function)"
        }, 
        {
            "location": "/api/4.0.17/#getexponent-s", 
            "text": "(Function) *  Returns the unbiased exponent that is used in the representation of `p1`. This function \nwraps the `java.lang.Math.getExponent()` function.  Syntax  INT  math:getExponent( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose unbiased exponent representation \n        should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;  getExponent(60984.1) returns 15.", 
            "title": "getExponent *s"
        }, 
        {
            "location": "/api/4.0.17/#hex-function", 
            "text": "Wraps the `java.lang.Double.toHexString()` function that returns a hexadecimal \nstring representation of `p1`.  Syntax  STRING  math:hex( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hexadecimal representation should \n        be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;  hex(200) returns \"c8\".", 
            "title": "hex (Function)"
        }, 
        {
            "location": "/api/4.0.17/#isinfinite", 
            "text": "(Function) *  Wraps the `java.lang.Float.isInfinite()` and `java.lang.Double.isInfinite()` \nfunctions and returns `true` if `p1` is infinitely large in magnitude and returns `false` if otherwise.  Syntax  BOOL  math:isInfinite( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if infinite \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;  isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.", 
            "title": "isInfinite *"
        }, 
        {
            "location": "/api/4.0.17/#isnan-function", 
            "text": "Wraps the `java.lang.Float.isNaN()` and `java.lang.Double.isNaN()` functions and \nreturns `true` if `p1` is a NaN (Not-a-Number) value and returns `false` if otherwise.  Syntax  BOOL  math:isNan( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if it is a number \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;  isNan(java.lang.Math.log(-12d)) returns true.", 
            "title": "isNan (Function)"
        }, 
        {
            "location": "/api/4.0.17/#ln-function", 
            "text": "Returns the natural logarithm (base e) of `p1`.  Syntax  DOUBLE  math:ln( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose natural logarithm (base e) should \n        be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;  ln(11.453) returns 2.438251704415579.", 
            "title": "ln (Function)"
        }, 
        {
            "location": "/api/4.0.17/#log-function", 
            "text": "Returns the logarithm of the received `number` as per the given `base`.  Syntax  DOUBLE  math:log( INT|LONG|FLOAT|DOUBLE  number,  INT|LONG|FLOAT|DOUBLE  base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         number \n         The value of whose base should be changed \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         base \n         The base value of the ouput \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;  log(34, 2f) returns 5.08746284125034.", 
            "title": "log (Function)"
        }, 
        {
            "location": "/api/4.0.17/#log10-function", 
            "text": "Returns the base 10 logarithm of `p1`.  Syntax  DOUBLE  math:log10( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which base 10 logarithm should be found\n        . \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;  log10(19.234) returns 1.2840696117100832.", 
            "title": "log10 (Function)"
        }, 
        {
            "location": "/api/4.0.17/#log2-function", 
            "text": "Returns the base 2 logarithm of `p1`.  Syntax  DOUBLE  math:log2( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which base 2 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;  log2(91d) returns 6.507794640198696.", 
            "title": "log2 (Function)"
        }, 
        {
            "location": "/api/4.0.17/#max-function", 
            "text": "Returns the greater value out of `p1` and `p2`.  Syntax  DOUBLE  math:max( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         Value one to be compared in finding the largest \n        value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         Value two to be compared in finding largest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;  max(123.67d, 91) returns 123.67.", 
            "title": "max (Function)"
        }, 
        {
            "location": "/api/4.0.17/#min-function", 
            "text": "Returns the smaller value out of `p1` and `p2`.  Syntax  DOUBLE  math:min( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         Value one to be compared in finding smallest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         Value two to be compared in finding smallest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;  min(123.67d, 91) returns 91.", 
            "title": "min (Function)"
        }, 
        {
            "location": "/api/4.0.17/#oct-function", 
            "text": "Converts `p1` to octal.  Syntax  STRING  math:oct( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which octal representation should be \n        found. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  oct(99l) returns \"143\".", 
            "title": "oct (Function)"
        }, 
        {
            "location": "/api/4.0.17/#parsedouble", 
            "text": "(Function) *  Returns the double value of the received string.  Syntax  DOUBLE  math:parseDouble( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a double \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;  parseDouble(\"123\") returns 123.0.", 
            "title": "parseDouble *"
        }, 
        {
            "location": "/api/4.0.17/#parsefloat", 
            "text": "(Function) *  Returns the float value of the received string.  Syntax  FLOAT  math:parseFloat( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a float \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;  parseFloat(\"123\") returns 123.0.", 
            "title": "parseFloat *"
        }, 
        {
            "location": "/api/4.0.17/#parseint-function", 
            "text": "Returns the integer value of the received string.  Syntax  INT  math:parseInt( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a int \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;  parseInt(\"123\") returns 123.", 
            "title": "parseInt (Function)"
        }, 
        {
            "location": "/api/4.0.17/#parselong-function", 
            "text": "*  Returns the long value of the received string.  Syntax  LONG  math:parseLong( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a long \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;  parseLong(\"123\") returns 123.", 
            "title": "parseLong *(Function)"
        }, 
        {
            "location": "/api/4.0.17/#pi-function", 
            "text": "Returns the `java.lang.Math.PI` constant, which is the closest value to pi, i.e., \nthe ratio of the circumference of a circle to its diameter.   Syntax  DOUBLE  math:pi()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;  pi() always returns 3.141592653589793.", 
            "title": "pi (Function)"
        }, 
        {
            "location": "/api/4.0.17/#power-function", 
            "text": "Returns a value by raising the given value to the given power.  Syntax  DOUBLE  math:power( INT|LONG|FLOAT|DOUBLE  value,  INT|LONG|FLOAT|DOUBLE  to.power)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value that should be raised to the power of 'to\n        .power' input parameter \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         to.power \n         The power that 'value' input parameter should be \n        raised to \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;  power(5.6d, 3.0d) returns 175.61599999999996.", 
            "title": "power (Function)"
        }, 
        {
            "location": "/api/4.0.17/#rand-function", 
            "text": "Returns stream of pseudo-random numbers when a sequence of calls are sent to the \n`rand()`. Optionally, it is possible to define a seed, i.e., `rand(seed)` using which the pseudo-random numbers are \ngenerated. These functions use the `java.util.Random` class internally.  Syntax  DOUBLE  math:rand( INT|LONG  seed)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         seed \n         An optional seed value that will be used to generate \n        the random number sequence \n         defaultSeed \n         INT LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  A random double value between 0 and 1 will be generated using math:rand()", 
            "title": "rand (Function)"
        }, 
        {
            "location": "/api/4.0.17/#round-function", 
            "text": "Returns the closest integer/long value depending on the input argument.  Syntax  INT|LONG  math:round( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be rounded to the closest \n        integer/long. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;  round(3252.353) returns 3252.", 
            "title": "round (Function)"
        }, 
        {
            "location": "/api/4.0.17/#signum-function", 
            "text": "Returns +1, 0, or -1 for the given positive, zero, and negative values respectively.\n This function wraps the `java.lang.Math.signum()` function.  Syntax  INT  math:signum( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if positive or \n        negative or otherwise \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;  signum(-6.32d) returns -1.", 
            "title": "signum (Function)"
        }, 
        {
            "location": "/api/4.0.17/#sin-function", 
            "text": "Returns the sine of the value given in radians. This function wraps the \n`java.lang.Math.sin()` function.  Syntax  DOUBLE  math:sin( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose sine value should be found. Input \n        should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;  sin(6d) returns -0.27941549819892586.", 
            "title": "sin (Function)"
        }, 
        {
            "location": "/api/4.0.17/#sinh-function", 
            "text": "Returns the hyperbolic sine of the given value in radians). This function \nwraps the `java.lang.Math.sinh()` function.   Syntax  DOUBLE  math:sinh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic sine value should be \n        found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;  sinh(6d) returns 201.71315737027922.", 
            "title": "sinh (Function)"
        }, 
        {
            "location": "/api/4.0.17/#sqrt-function", 
            "text": "Returns the square-root of the given value. This function wraps the `java.lang.Math\n.sqrt()` function.  Syntax  DOUBLE  math:sqrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose square-root value should be found\n        . \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;  sqrt(4d) returns 2.", 
            "title": "sqrt (Function)"
        }, 
        {
            "location": "/api/4.0.17/#tan-function", 
            "text": "Returns the tan of the value given in radians. This function wraps the `java\n.lang.Math.tan()` function.  Syntax  DOUBLE  math:tan( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose tan value should be found. Input \n        should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;  tan(6d) returns -0.29100619138474915.", 
            "title": "tan (Function)"
        }, 
        {
            "location": "/api/4.0.17/#tanh-function", 
            "text": "Returns the hyperbolic tangent of the given value in radians. This function \nwraps the `java.lang.Math.tanh()` function.  Syntax  DOUBLE  math:tanh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic tangent value should be\n         found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;  tanh(6d) returns 0.9999877116507956.", 
            "title": "tanh (Function)"
        }, 
        {
            "location": "/api/4.0.17/#todegrees-function", 
            "text": "*  Converts the given value in radians to degrees. This function wraps the `java.lang\n.Math.toDegrees()` function.  Syntax  DOUBLE  math:toDegrees( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The radians value that should be converted to \n        degrees \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;  toDegrees(6d) returns 343.77467707849394.", 
            "title": "toDegrees *(Function)"
        }, 
        {
            "location": "/api/4.0.17/#toradians-function", 
            "text": "*  Converts the value given in degrees to radians. This function wraps the `java.lang\n.Math.toRadians()` function.  Syntax  DOUBLE  math:toRadians( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The degrees value that should be converted to \n        radians \n          \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;  toRadians(6d) returns 0.10471975511965977.", 
            "title": "toRadians *(Function)"
        }, 
        {
            "location": "/api/4.0.16/", 
            "text": "API Docs - v4.0.16\n\n\nMath\n\n\npercentile \n(Aggregate Function)\n\n\nReturns the pth percentile value of the arg values.\n\n\n\nSyntax\n\n\nDOUBLE\n math:percentile(\nINT|LONG|FLOAT|DOUBLE\n arg, \nDOUBLE\n p)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe values of which the percentile should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np\n\n        \nEstimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;\n\n\n\n\n\nmath:percentile(temperature, 97.0)\n\n\n\nabs \n(Function)\n\n\nReturns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:abs(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the absolute value should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;\n\n\n\n\n\nBoth abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.\n\n\n\nacos \n(Function)\n\n\nIf -1 \n= p1 \n= 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:acos(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-cosine (inverse cosine) should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;\n\n\n\n\n\nacos(0.5) returns 1.0471975511965979.\n\n\n\nasin \n(Function)\n\n\nIf -1 \n= p1 \n= 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:asin(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-sin (inverse sine) should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;\n\n\n\n\n\nasin(0.5) returns 0.5235987755982989.\n\n\n\natan \n(Function)\n\n\n1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function.\n2. Returns the arc-tangent (inverse tangent) of  p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:atan(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np1\n\n        \nThis optional parameter represents the y coordinate of the (x,y) coordinate pair\n\n        \n0D\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\n\natan(12d, 5d) returns 1.1760052070951352.\n\n\n\nbin \n(Function)\n\n\nReturns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods.\n\n\n\nSyntax\n\n\nSTRING\n math:bin(\nINT|LONG\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to an unsigned integer of base 2\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;\n\n\n\n\n\nbin(9) returns \"1001\".\n\n\n\ncbrt \n(Function)\n\n\nReturns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cbrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose cube-root should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;\n\n\n\n\n\ncbrt(17d) returns 2.5712815906582356.\n\n\n\nceil \n(Function)\n\n\nReturns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ceil(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose ceiling value should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;\n\n\n\n\n\nceil(423.187d) returns 424.0.\n\n\n\nconv \n(Function)\n\n\nConverts a from the fromBase base to the toBase base.\n\n\n\nSyntax\n\n\nSTRING\n math:conv(\nSTRING\n a, \nINT\n from.base, \nINT\n to.base)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \na\n\n        \nThe value whose base should be changed. Input should be as a String\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfrom.base\n\n        \nThe source base of the input parameter 'a'\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.base\n\n        \nThe target base that input parameter 'a' should be converted to\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\n\nconv(\"7f\", 16, 10) returns \"127\".\n\n\n\ncopySign \n(Function)\n\n\nReturns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:copySign(\nINT|LONG|FLOAT|DOUBLE\n magnitude, \nINT|LONG|FLOAT|DOUBLE\n sign)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmagnitude\n\n        \nThis parameters magnitude will be used for output attribute\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsign\n\n        \nThis parameters sign will be used for output attribute\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;\n\n\n\n\n\ncopySign(5.6d, -3.0d) returns -5.6.\n\n\n\ncos \n(Function)\n\n\nReturns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cos(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose cosine value should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\n\ncos(6d) returns 0.9601702866503661.\n\n\n\ncosh \n(Function)\n\n\nReturns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cosh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic cosine should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\n\ncosh (6d) returns 201.7156361224559.\n\n\n\ne \n(Function)\n\n\nReturns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms).\n\n\n\nSyntax\n\n\nDOUBLE\n math:e()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;\n\n\n\n\n\ne() returns 2.7182818284590452354.\n\n\n\nexp \n(Function)\n\n\nReturns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:exp(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe power that the Euler's number e should be raised to\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\n\nexp(10.23) returns 27722.51006805505.\n\n\n\nfloor \n(Function)\n\n\nThis function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer.\n\n\n\nSyntax\n\n\nDOUBLE\n math:floor(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose floor value should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;\n\n\n\n\n\nfloor(10.23) returns 10.0.\n\n\n\ngetExponent \n(Function)\n\n\nReturns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function.\n\n\n\nSyntax\n\n\nINT\n math:getExponent(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose unbiased exponent representation should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\n\ngetExponent(60984.1) returns 15.\n\n\n\nhex \n(Function)\n\n\nThis function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1.\n\n\n\nSyntax\n\n\nSTRING\n math:hex(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hexadecimal representation should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;\n\n\n\n\n\nhex(200) returns \"c8\".\n\n\n\nisInfinite \n(Function)\n\n\nThis function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isInfinite(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if infinite\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;\n\n\n\n\n\nisInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.\n\n\n\nisNan \n(Function)\n\n\nThis function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isNan(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if it is a number\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;\n\n\n\n\n\nisNan(java.lang.Math.log(-12d)) returns true.\n\n\n\nln \n(Function)\n\n\nReturns the natural logarithm (base e) of p1.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ln(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose natural logarithm (base e) should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nln(11.453) returns 2.438251704415579.\n\n\n\nlog \n(Function)\n\n\nReturns the logarithm (base=base) of number.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log(\nINT|LONG|FLOAT|DOUBLE\n number, \nINT|LONG|FLOAT|DOUBLE\n base)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nnumber\n\n        \nThe value of whose base should be changed\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbase\n\n        \nThe base value of the ouput\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;\n\n\n\n\n\nlog(34, 2f) returns 5.08746284125034.\n\n\n\nlog10 \n(Function)\n\n\nReturns the base 10 logarithm of p1.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log10(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose base 10 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nlog10(19.234) returns 1.2840696117100832.\n\n\n\nlog2 \n(Function)\n\n\nReturns the base 2 logarithm of p1.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log2(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose base 2 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nlog2(91d) returns 6.507794640198696.\n\n\n\nmax \n(Function)\n\n\nReturns the greater value out of p1 and p2.\n\n\n\nSyntax\n\n\nDOUBLE\n math:max(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nValue one to be compared in finding largest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nValue two to be compared in finding largest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;\n\n\n\n\n\nmax(123.67d, 91) returns 123.67.\n\n\n\nmin \n(Function)\n\n\nReturns the smaller value out of p1 and p2.\n\n\n\nSyntax\n\n\nDOUBLE\n math:min(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nValue one to be compared in finding smallest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nValue two to be compared in finding smallest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;\n\n\n\n\n\nmin(123.67d, 91) returns 91.\n\n\n\noct \n(Function)\n\n\nConverts p1 to octal.\n\n\n\nSyntax\n\n\nSTRING\n math:oct(\nINT|LONG\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose octal representation should be found.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\n\noct(99l) returns \"143\".\n\n\n\nparseDouble \n(Function)\n\n\nReturns str as a double.\n\n\n\nSyntax\n\n\nDOUBLE\n math:parseDouble(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a double\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseDouble(\"123\") returns 123.0.\n\n\n\nparseFloat \n(Function)\n\n\nReturns str as a float.\n\n\n\nSyntax\n\n\nFLOAT\n math:parseFloat(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a float\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseFloat(\"123\") returns 123.0.\n\n\n\nparseInt \n(Function)\n\n\nReturns str as a int.\n\n\n\nSyntax\n\n\nINT\n math:parseInt(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a int\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseInt(\"123\") returns 123.\n\n\n\nparseLong \n(Function)\n\n\nReturns str as a long.\n\n\n\nSyntax\n\n\nLONG\n math:parseLong(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a long\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseLong(\"123\") returns 123.\n\n\n\npi \n(Function)\n\n\nReturns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter). \n\n\n\nSyntax\n\n\nDOUBLE\n math:pi()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;\n\n\n\n\n\npi() always returns 3.141592653589793.\n\n\n\npower \n(Function)\n\n\nReturns value raised to the power of toPower.\n\n\n\nSyntax\n\n\nDOUBLE\n math:power(\nINT|LONG|FLOAT|DOUBLE\n value, \nINT|LONG|FLOAT|DOUBLE\n to.power)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value that should be raised to the power of 'to.power' input parameter\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.power\n\n        \nThe power that 'value' input parameter should be raised to\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;\n\n\n\n\n\npower(5.6d, 3.0d) returns 175.61599999999996.\n\n\n\nrand \n(Function)\n\n\n1.  A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally.\n2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. \n\n\n\nSyntax\n\n\nDOUBLE\n math:rand(\nINT|LONG\n seed)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nseed\n\n        \nAn optional seed value that will be used to generate the random number sequence\n\n        \ndefaultSeed\n\n        \nINT\nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\n\nA random double value between 0 and 1 will be generated using math:rand()\n\n\n\nround \n(Function)\n\n\nReturns the closest integer/long (depending on the input) value to the argument.\n\n\n\nSyntax\n\n\nINT|LONG\n math:round(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be rounded to the closest integer/long.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;\n\n\n\n\n\nround(3252.353) returns 3252.\n\n\n\nsignum \n(Function)\n\n\nIf a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function.\n\n\n\nSyntax\n\n\nINT\n math:signum(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if positive or negative or otherwise\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;\n\n\n\n\n\nsignum(-6.32d) returns -1.\n\n\n\nsin \n(Function)\n\n\nReturns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sin(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose sine value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;\n\n\n\n\n\nsin(6d) returns -0.27941549819892586.\n\n\n\nsinh \n(Function)\n\n\nReturns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function. \n\n\n\nSyntax\n\n\nDOUBLE\n math:sinh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic sine value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;\n\n\n\n\n\nsinh(6d) returns 201.71315737027922.\n\n\n\nsqrt \n(Function)\n\n\nReturns the square-root of p1. This function wraps the java.lang.Math.sqrt() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sqrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose square-root value should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;\n\n\n\n\n\nsqrt(4d) returns 2.\n\n\n\ntan \n(Function)\n\n\nReturns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tan(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose tan value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;\n\n\n\n\n\ntan(6d) returns -0.29100619138474915.\n\n\n\ntanh \n(Function)\n\n\nReturns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tanh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic tangent value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;\n\n\n\n\n\ntanh(6d) returns 0.9999877116507956.\n\n\n\ntoDegrees \n(Function)\n\n\nConverts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toDegrees(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe radians value that should be converted to degrees\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;\n\n\n\n\n\ntoDegrees(6d) returns 343.77467707849394.\n\n\n\ntoRadians \n(Function)\n\n\nConverts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toRadians(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe degrees value that should be converted to radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;\n\n\n\n\n\ntoRadians(6d) returns 0.10471975511965977.", 
            "title": "4.0.16"
        }, 
        {
            "location": "/api/4.0.16/#api-docs-v4016", 
            "text": "", 
            "title": "API Docs - v4.0.16"
        }, 
        {
            "location": "/api/4.0.16/#math", 
            "text": "", 
            "title": "Math"
        }, 
        {
            "location": "/api/4.0.16/#percentile-aggregate-function", 
            "text": "Returns the pth percentile value of the arg values.  Syntax  DOUBLE  math:percentile( INT|LONG|FLOAT|DOUBLE  arg,  DOUBLE  p)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The values of which the percentile should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p \n         Estimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100 \n         \n         DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;  math:percentile(temperature, 97.0)", 
            "title": "percentile (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.16/#abs-function", 
            "text": "Returns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function.  Syntax  DOUBLE  math:abs( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the absolute value should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;  Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.", 
            "title": "abs (Function)"
        }, 
        {
            "location": "/api/4.0.16/#acos-function", 
            "text": "If -1  = p1  = 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function.  Syntax  DOUBLE  math:acos( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-cosine (inverse cosine) should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;  acos(0.5) returns 1.0471975511965979.", 
            "title": "acos (Function)"
        }, 
        {
            "location": "/api/4.0.16/#asin-function", 
            "text": "If -1  = p1  = 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function.  Syntax  DOUBLE  math:asin( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-sin (inverse sine) should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;  asin(0.5) returns 0.5235987755982989.", 
            "title": "asin (Function)"
        }, 
        {
            "location": "/api/4.0.16/#atan-function", 
            "text": "1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function. 2. Returns the arc-tangent (inverse tangent) of  p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function.  Syntax  DOUBLE  math:atan( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p1 \n         This optional parameter represents the y coordinate of the (x,y) coordinate pair \n         0D \n         INT LONG FLOAT DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;  atan(12d, 5d) returns 1.1760052070951352.", 
            "title": "atan (Function)"
        }, 
        {
            "location": "/api/4.0.16/#bin-function", 
            "text": "Returns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods.  Syntax  STRING  math:bin( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to an unsigned integer of base 2 \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;  bin(9) returns \"1001\".", 
            "title": "bin (Function)"
        }, 
        {
            "location": "/api/4.0.16/#cbrt-function", 
            "text": "Returns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function.  Syntax  DOUBLE  math:cbrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose cube-root should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;  cbrt(17d) returns 2.5712815906582356.", 
            "title": "cbrt (Function)"
        }, 
        {
            "location": "/api/4.0.16/#ceil-function", 
            "text": "Returns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method.  Syntax  DOUBLE  math:ceil( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose ceiling value should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;  ceil(423.187d) returns 424.0.", 
            "title": "ceil (Function)"
        }, 
        {
            "location": "/api/4.0.16/#conv-function", 
            "text": "Converts a from the fromBase base to the toBase base.  Syntax  STRING  math:conv( STRING  a,  INT  from.base,  INT  to.base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         a \n         The value whose base should be changed. Input should be as a String \n         \n         STRING \n         No \n         No \n     \n     \n         from.base \n         The source base of the input parameter 'a' \n         \n         INT \n         No \n         No \n     \n     \n         to.base \n         The target base that input parameter 'a' should be converted to \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;  conv(\"7f\", 16, 10) returns \"127\".", 
            "title": "conv (Function)"
        }, 
        {
            "location": "/api/4.0.16/#copysign-function", 
            "text": "Returns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function.  Syntax  DOUBLE  math:copySign( INT|LONG|FLOAT|DOUBLE  magnitude,  INT|LONG|FLOAT|DOUBLE  sign)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         magnitude \n         This parameters magnitude will be used for output attribute \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         sign \n         This parameters sign will be used for output attribute \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;  copySign(5.6d, -3.0d) returns -5.6.", 
            "title": "copySign (Function)"
        }, 
        {
            "location": "/api/4.0.16/#cos-function", 
            "text": "Returns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function.  Syntax  DOUBLE  math:cos( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose cosine value should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;  cos(6d) returns 0.9601702866503661.", 
            "title": "cos (Function)"
        }, 
        {
            "location": "/api/4.0.16/#cosh-function", 
            "text": "Returns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function.  Syntax  DOUBLE  math:cosh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic cosine should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;  cosh (6d) returns 201.7156361224559.", 
            "title": "cosh (Function)"
        }, 
        {
            "location": "/api/4.0.16/#e-function", 
            "text": "Returns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms).  Syntax  DOUBLE  math:e()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;  e() returns 2.7182818284590452354.", 
            "title": "e (Function)"
        }, 
        {
            "location": "/api/4.0.16/#exp-function", 
            "text": "Returns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function.  Syntax  DOUBLE  math:exp( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The power that the Euler's number e should be raised to \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;  exp(10.23) returns 27722.51006805505.", 
            "title": "exp (Function)"
        }, 
        {
            "location": "/api/4.0.16/#floor-function", 
            "text": "This function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer.  Syntax  DOUBLE  math:floor( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose floor value should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;  floor(10.23) returns 10.0.", 
            "title": "floor (Function)"
        }, 
        {
            "location": "/api/4.0.16/#getexponent-function", 
            "text": "Returns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function.  Syntax  INT  math:getExponent( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose unbiased exponent representation should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;  getExponent(60984.1) returns 15.", 
            "title": "getExponent (Function)"
        }, 
        {
            "location": "/api/4.0.16/#hex-function", 
            "text": "This function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1.  Syntax  STRING  math:hex( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hexadecimal representation should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;  hex(200) returns \"c8\".", 
            "title": "hex (Function)"
        }, 
        {
            "location": "/api/4.0.16/#isinfinite-function", 
            "text": "This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise.  Syntax  BOOL  math:isInfinite( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if infinite \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;  isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.", 
            "title": "isInfinite (Function)"
        }, 
        {
            "location": "/api/4.0.16/#isnan-function", 
            "text": "This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise.  Syntax  BOOL  math:isNan( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if it is a number \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;  isNan(java.lang.Math.log(-12d)) returns true.", 
            "title": "isNan (Function)"
        }, 
        {
            "location": "/api/4.0.16/#ln-function", 
            "text": "Returns the natural logarithm (base e) of p1.  Syntax  DOUBLE  math:ln( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose natural logarithm (base e) should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;  ln(11.453) returns 2.438251704415579.", 
            "title": "ln (Function)"
        }, 
        {
            "location": "/api/4.0.16/#log-function", 
            "text": "Returns the logarithm (base=base) of number.  Syntax  DOUBLE  math:log( INT|LONG|FLOAT|DOUBLE  number,  INT|LONG|FLOAT|DOUBLE  base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         number \n         The value of whose base should be changed \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         base \n         The base value of the ouput \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;  log(34, 2f) returns 5.08746284125034.", 
            "title": "log (Function)"
        }, 
        {
            "location": "/api/4.0.16/#log10-function", 
            "text": "Returns the base 10 logarithm of p1.  Syntax  DOUBLE  math:log10( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose base 10 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;  log10(19.234) returns 1.2840696117100832.", 
            "title": "log10 (Function)"
        }, 
        {
            "location": "/api/4.0.16/#log2-function", 
            "text": "Returns the base 2 logarithm of p1.  Syntax  DOUBLE  math:log2( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose base 2 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;  log2(91d) returns 6.507794640198696.", 
            "title": "log2 (Function)"
        }, 
        {
            "location": "/api/4.0.16/#max-function", 
            "text": "Returns the greater value out of p1 and p2.  Syntax  DOUBLE  math:max( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         Value one to be compared in finding largest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         Value two to be compared in finding largest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;  max(123.67d, 91) returns 123.67.", 
            "title": "max (Function)"
        }, 
        {
            "location": "/api/4.0.16/#min-function", 
            "text": "Returns the smaller value out of p1 and p2.  Syntax  DOUBLE  math:min( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         Value one to be compared in finding smallest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         Value two to be compared in finding smallest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;  min(123.67d, 91) returns 91.", 
            "title": "min (Function)"
        }, 
        {
            "location": "/api/4.0.16/#oct-function", 
            "text": "Converts p1 to octal.  Syntax  STRING  math:oct( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose octal representation should be found. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  oct(99l) returns \"143\".", 
            "title": "oct (Function)"
        }, 
        {
            "location": "/api/4.0.16/#parsedouble-function", 
            "text": "Returns str as a double.  Syntax  DOUBLE  math:parseDouble( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a double \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;  parseDouble(\"123\") returns 123.0.", 
            "title": "parseDouble (Function)"
        }, 
        {
            "location": "/api/4.0.16/#parsefloat-function", 
            "text": "Returns str as a float.  Syntax  FLOAT  math:parseFloat( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a float \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;  parseFloat(\"123\") returns 123.0.", 
            "title": "parseFloat (Function)"
        }, 
        {
            "location": "/api/4.0.16/#parseint-function", 
            "text": "Returns str as a int.  Syntax  INT  math:parseInt( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a int \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;  parseInt(\"123\") returns 123.", 
            "title": "parseInt (Function)"
        }, 
        {
            "location": "/api/4.0.16/#parselong-function", 
            "text": "Returns str as a long.  Syntax  LONG  math:parseLong( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a long \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;  parseLong(\"123\") returns 123.", 
            "title": "parseLong (Function)"
        }, 
        {
            "location": "/api/4.0.16/#pi-function", 
            "text": "Returns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter).   Syntax  DOUBLE  math:pi()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;  pi() always returns 3.141592653589793.", 
            "title": "pi (Function)"
        }, 
        {
            "location": "/api/4.0.16/#power-function", 
            "text": "Returns value raised to the power of toPower.  Syntax  DOUBLE  math:power( INT|LONG|FLOAT|DOUBLE  value,  INT|LONG|FLOAT|DOUBLE  to.power)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value that should be raised to the power of 'to.power' input parameter \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         to.power \n         The power that 'value' input parameter should be raised to \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;  power(5.6d, 3.0d) returns 175.61599999999996.", 
            "title": "power (Function)"
        }, 
        {
            "location": "/api/4.0.16/#rand-function", 
            "text": "1.  A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. 2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally.   Syntax  DOUBLE  math:rand( INT|LONG  seed)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         seed \n         An optional seed value that will be used to generate the random number sequence \n         defaultSeed \n         INT LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  A random double value between 0 and 1 will be generated using math:rand()", 
            "title": "rand (Function)"
        }, 
        {
            "location": "/api/4.0.16/#round-function", 
            "text": "Returns the closest integer/long (depending on the input) value to the argument.  Syntax  INT|LONG  math:round( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be rounded to the closest integer/long. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;  round(3252.353) returns 3252.", 
            "title": "round (Function)"
        }, 
        {
            "location": "/api/4.0.16/#signum-function", 
            "text": "If a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function.  Syntax  INT  math:signum( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if positive or negative or otherwise \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;  signum(-6.32d) returns -1.", 
            "title": "signum (Function)"
        }, 
        {
            "location": "/api/4.0.16/#sin-function", 
            "text": "Returns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function.  Syntax  DOUBLE  math:sin( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose sine value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;  sin(6d) returns -0.27941549819892586.", 
            "title": "sin (Function)"
        }, 
        {
            "location": "/api/4.0.16/#sinh-function", 
            "text": "Returns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function.   Syntax  DOUBLE  math:sinh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic sine value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;  sinh(6d) returns 201.71315737027922.", 
            "title": "sinh (Function)"
        }, 
        {
            "location": "/api/4.0.16/#sqrt-function", 
            "text": "Returns the square-root of p1. This function wraps the java.lang.Math.sqrt() function.  Syntax  DOUBLE  math:sqrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose square-root value should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;  sqrt(4d) returns 2.", 
            "title": "sqrt (Function)"
        }, 
        {
            "location": "/api/4.0.16/#tan-function", 
            "text": "Returns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function.  Syntax  DOUBLE  math:tan( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose tan value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;  tan(6d) returns -0.29100619138474915.", 
            "title": "tan (Function)"
        }, 
        {
            "location": "/api/4.0.16/#tanh-function", 
            "text": "Returns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function.  Syntax  DOUBLE  math:tanh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic tangent value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;  tanh(6d) returns 0.9999877116507956.", 
            "title": "tanh (Function)"
        }, 
        {
            "location": "/api/4.0.16/#todegrees-function", 
            "text": "Converts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function.  Syntax  DOUBLE  math:toDegrees( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The radians value that should be converted to degrees \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;  toDegrees(6d) returns 343.77467707849394.", 
            "title": "toDegrees (Function)"
        }, 
        {
            "location": "/api/4.0.16/#toradians-function", 
            "text": "Converts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function.  Syntax  DOUBLE  math:toRadians( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The degrees value that should be converted to radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;  toRadians(6d) returns 0.10471975511965977.", 
            "title": "toRadians (Function)"
        }, 
        {
            "location": "/api/4.0.15/", 
            "text": "API Docs - v4.0.15\n\n\nMath\n\n\npercentile \n(Aggregate Function)\n\n\nReturns the pth percentile value of the arg values.\n\n\n\nSyntax\n\n\nDOUBLE\n math:percentile(\nINT|LONG|FLOAT|DOUBLE\n arg, \nDOUBLE\n p)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe values of which the percentile should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np\n\n        \nEstimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;\n\n\n\n\n\nmath:percentile(temperature, 97.0)\n\n\n\nabs \n(Function)\n\n\nReturns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:abs(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the absolute value should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;\n\n\n\n\n\nBoth abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.\n\n\n\nacos \n(Function)\n\n\nIf -1 \n= p1 \n= 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:acos(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-cosine (inverse cosine) should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;\n\n\n\n\n\nacos(0.5) returns 1.0471975511965979.\n\n\n\nasin \n(Function)\n\n\nIf -1 \n= p1 \n= 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:asin(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-sin (inverse sine) should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;\n\n\n\n\n\nasin(0.5) returns 0.5235987755982989.\n\n\n\natan \n(Function)\n\n\n1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function.\n2. Returns the arc-tangent (inverse tangent) of  p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:atan(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np1\n\n        \nThis optional parameter represents the y coordinate of the (x,y) coordinate pair\n\n        \n0D\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\n\natan(12d, 5d) returns 1.1760052070951352.\n\n\n\nbin \n(Function)\n\n\nReturns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods.\n\n\n\nSyntax\n\n\nSTRING\n math:bin(\nINT|LONG\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to an unsigned integer of base 2\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;\n\n\n\n\n\nbin(9) returns \"1001\".\n\n\n\ncbrt \n(Function)\n\n\nReturns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cbrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose cube-root should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;\n\n\n\n\n\ncbrt(17d) returns 2.5712815906582356.\n\n\n\nceil \n(Function)\n\n\nReturns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ceil(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose ceiling value should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;\n\n\n\n\n\nceil(423.187d) returns 424.0.\n\n\n\nconv \n(Function)\n\n\nConverts a from the fromBase base to the toBase base.\n\n\n\nSyntax\n\n\nSTRING\n math:conv(\nSTRING\n a, \nINT\n from.base, \nINT\n to.base)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \na\n\n        \nThe value whose base should be changed. Input should be as a String\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfrom.base\n\n        \nThe source base of the input parameter 'a'\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.base\n\n        \nThe target base that input parameter 'a' should be converted to\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\n\nconv(\"7f\", 16, 10) returns \"127\".\n\n\n\ncopySign \n(Function)\n\n\nReturns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:copySign(\nINT|LONG|FLOAT|DOUBLE\n magnitude, \nINT|LONG|FLOAT|DOUBLE\n sign)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmagnitude\n\n        \nThis parameters magnitude will be used for output attribute\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsign\n\n        \nThis parameters sign will be used for output attribute\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;\n\n\n\n\n\ncopySign(5.6d, -3.0d) returns -5.6.\n\n\n\ncos \n(Function)\n\n\nReturns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cos(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose cosine value should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\n\ncos(6d) returns 0.9601702866503661.\n\n\n\ncosh \n(Function)\n\n\nReturns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cosh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic cosine should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\n\ncosh (6d) returns 201.7156361224559.\n\n\n\ne \n(Function)\n\n\nReturns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms).\n\n\n\nSyntax\n\n\nDOUBLE\n math:e()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;\n\n\n\n\n\ne() returns 2.7182818284590452354.\n\n\n\nexp \n(Function)\n\n\nReturns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:exp(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe power that the Euler's number e should be raised to\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\n\nexp(10.23) returns 27722.51006805505.\n\n\n\nfloor \n(Function)\n\n\nThis function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer.\n\n\n\nSyntax\n\n\nDOUBLE\n math:floor(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose floor value should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;\n\n\n\n\n\nfloor(10.23) returns 10.0.\n\n\n\ngetExponent \n(Function)\n\n\nReturns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function.\n\n\n\nSyntax\n\n\nINT\n math:getExponent(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose unbiased exponent representation should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\n\ngetExponent(60984.1) returns 15.\n\n\n\nhex \n(Function)\n\n\nThis function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1.\n\n\n\nSyntax\n\n\nSTRING\n math:hex(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hexadecimal representation should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;\n\n\n\n\n\nhex(200) returns \"c8\".\n\n\n\nisInfinite \n(Function)\n\n\nThis function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isInfinite(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if infinite\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;\n\n\n\n\n\nisInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.\n\n\n\nisNan \n(Function)\n\n\nThis function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isNan(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if it is a number\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;\n\n\n\n\n\nisNan(java.lang.Math.log(-12d)) returns true.\n\n\n\nln \n(Function)\n\n\nReturns the natural logarithm (base e) of p1.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ln(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose natural logarithm (base e) should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nln(11.453) returns 2.438251704415579.\n\n\n\nlog \n(Function)\n\n\nReturns the logarithm (base=base) of number.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log(\nINT|LONG|FLOAT|DOUBLE\n number, \nINT|LONG|FLOAT|DOUBLE\n base)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nnumber\n\n        \nThe value of whose base should be changed\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbase\n\n        \nThe base value of the ouput\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;\n\n\n\n\n\nlog(34, 2f) returns 5.08746284125034.\n\n\n\nlog10 \n(Function)\n\n\nReturns the base 10 logarithm of p1.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log10(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose base 10 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nlog10(19.234) returns 1.2840696117100832.\n\n\n\nlog2 \n(Function)\n\n\nReturns the base 2 logarithm of p1.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log2(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose base 2 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nlog2(91d) returns 6.507794640198696.\n\n\n\nmax \n(Function)\n\n\nReturns the greater value out of p1 and p2.\n\n\n\nSyntax\n\n\nDOUBLE\n math:max(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nValue one to be compared in finding largest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nValue two to be compared in finding largest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;\n\n\n\n\n\nmax(123.67d, 91) returns 123.67.\n\n\n\nmin \n(Function)\n\n\nReturns the smaller value out of p1 and p2.\n\n\n\nSyntax\n\n\nDOUBLE\n math:min(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nValue one to be compared in finding smallest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nValue two to be compared in finding smallest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;\n\n\n\n\n\nmin(123.67d, 91) returns 91.\n\n\n\noct \n(Function)\n\n\nConverts p1 to octal.\n\n\n\nSyntax\n\n\nSTRING\n math:oct(\nINT|LONG\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose octal representation should be found.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\n\noct(99l) returns \"143\".\n\n\n\nparseDouble \n(Function)\n\n\nReturns str as a double.\n\n\n\nSyntax\n\n\nDOUBLE\n math:parseDouble(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a double\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseDouble(\"123\") returns 123.0.\n\n\n\nparseFloat \n(Function)\n\n\nReturns str as a float.\n\n\n\nSyntax\n\n\nFLOAT\n math:parseFloat(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a float\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseFloat(\"123\") returns 123.0.\n\n\n\nparseInt \n(Function)\n\n\nReturns str as a int.\n\n\n\nSyntax\n\n\nINT\n math:parseInt(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a int\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseInt(\"123\") returns 123.\n\n\n\nparseLong \n(Function)\n\n\nReturns str as a long.\n\n\n\nSyntax\n\n\nLONG\n math:parseLong(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a long\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseLong(\"123\") returns 123.\n\n\n\npi \n(Function)\n\n\nReturns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter). \n\n\n\nSyntax\n\n\nDOUBLE\n math:pi()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;\n\n\n\n\n\npi() always returns 3.141592653589793.\n\n\n\npower \n(Function)\n\n\nReturns value raised to the power of toPower.\n\n\n\nSyntax\n\n\nDOUBLE\n math:power(\nINT|LONG|FLOAT|DOUBLE\n value, \nINT|LONG|FLOAT|DOUBLE\n to.power)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value that should be raised to the power of 'to.power' input parameter\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.power\n\n        \nThe power that 'value' input parameter should be raised to\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;\n\n\n\n\n\npower(5.6d, 3.0d) returns 175.61599999999996.\n\n\n\nrand \n(Function)\n\n\n1.  A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally.\n2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. \n\n\n\nSyntax\n\n\nDOUBLE\n math:rand(\nINT|LONG\n seed)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nseed\n\n        \nAn optional seed value that will be used to generate the random number sequence\n\n        \ndefaultSeed\n\n        \nINT\nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\n\nA random double value between 0 and 1 will be generated using math:rand()\n\n\n\nround \n(Function)\n\n\nReturns the closest integer/long (depending on the input) value to the argument.\n\n\n\nSyntax\n\n\nINT|LONG\n math:round(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be rounded to the closest integer/long.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;\n\n\n\n\n\nround(3252.353) returns 3252.\n\n\n\nsignum \n(Function)\n\n\nIf a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function.\n\n\n\nSyntax\n\n\nINT\n math:signum(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if positive or negative or otherwise\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;\n\n\n\n\n\nsignum(-6.32d) returns -1.\n\n\n\nsin \n(Function)\n\n\nReturns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sin(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose sine value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;\n\n\n\n\n\nsin(6d) returns -0.27941549819892586.\n\n\n\nsinh \n(Function)\n\n\nReturns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function. \n\n\n\nSyntax\n\n\nDOUBLE\n math:sinh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic sine value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;\n\n\n\n\n\nsinh(6d) returns 201.71315737027922.\n\n\n\nsqrt \n(Function)\n\n\nReturns the square-root of p1. This function wraps the java.lang.Math.sqrt() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sqrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose square-root value should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;\n\n\n\n\n\nsqrt(4d) returns 2.\n\n\n\ntan \n(Function)\n\n\nReturns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tan(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose tan value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;\n\n\n\n\n\ntan(6d) returns -0.29100619138474915.\n\n\n\ntanh \n(Function)\n\n\nReturns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tanh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic tangent value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;\n\n\n\n\n\ntanh(6d) returns 0.9999877116507956.\n\n\n\ntoDegrees \n(Function)\n\n\nConverts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toDegrees(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe radians value that should be converted to degrees\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;\n\n\n\n\n\ntoDegrees(6d) returns 343.77467707849394.\n\n\n\ntoRadians \n(Function)\n\n\nConverts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toRadians(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe degrees value that should be converted to radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;\n\n\n\n\n\ntoRadians(6d) returns 0.10471975511965977.", 
            "title": "4.0.15"
        }, 
        {
            "location": "/api/4.0.15/#api-docs-v4015", 
            "text": "", 
            "title": "API Docs - v4.0.15"
        }, 
        {
            "location": "/api/4.0.15/#math", 
            "text": "", 
            "title": "Math"
        }, 
        {
            "location": "/api/4.0.15/#percentile-aggregate-function", 
            "text": "Returns the pth percentile value of the arg values.  Syntax  DOUBLE  math:percentile( INT|LONG|FLOAT|DOUBLE  arg,  DOUBLE  p)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The values of which the percentile should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p \n         Estimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100 \n         \n         DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;  math:percentile(temperature, 97.0)", 
            "title": "percentile (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.15/#abs-function", 
            "text": "Returns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function.  Syntax  DOUBLE  math:abs( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the absolute value should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;  Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.", 
            "title": "abs (Function)"
        }, 
        {
            "location": "/api/4.0.15/#acos-function", 
            "text": "If -1  = p1  = 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function.  Syntax  DOUBLE  math:acos( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-cosine (inverse cosine) should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;  acos(0.5) returns 1.0471975511965979.", 
            "title": "acos (Function)"
        }, 
        {
            "location": "/api/4.0.15/#asin-function", 
            "text": "If -1  = p1  = 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function.  Syntax  DOUBLE  math:asin( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-sin (inverse sine) should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;  asin(0.5) returns 0.5235987755982989.", 
            "title": "asin (Function)"
        }, 
        {
            "location": "/api/4.0.15/#atan-function", 
            "text": "1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function. 2. Returns the arc-tangent (inverse tangent) of  p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function.  Syntax  DOUBLE  math:atan( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p1 \n         This optional parameter represents the y coordinate of the (x,y) coordinate pair \n         0D \n         INT LONG FLOAT DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;  atan(12d, 5d) returns 1.1760052070951352.", 
            "title": "atan (Function)"
        }, 
        {
            "location": "/api/4.0.15/#bin-function", 
            "text": "Returns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods.  Syntax  STRING  math:bin( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to an unsigned integer of base 2 \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;  bin(9) returns \"1001\".", 
            "title": "bin (Function)"
        }, 
        {
            "location": "/api/4.0.15/#cbrt-function", 
            "text": "Returns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function.  Syntax  DOUBLE  math:cbrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose cube-root should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;  cbrt(17d) returns 2.5712815906582356.", 
            "title": "cbrt (Function)"
        }, 
        {
            "location": "/api/4.0.15/#ceil-function", 
            "text": "Returns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method.  Syntax  DOUBLE  math:ceil( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose ceiling value should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;  ceil(423.187d) returns 424.0.", 
            "title": "ceil (Function)"
        }, 
        {
            "location": "/api/4.0.15/#conv-function", 
            "text": "Converts a from the fromBase base to the toBase base.  Syntax  STRING  math:conv( STRING  a,  INT  from.base,  INT  to.base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         a \n         The value whose base should be changed. Input should be as a String \n         \n         STRING \n         No \n         No \n     \n     \n         from.base \n         The source base of the input parameter 'a' \n         \n         INT \n         No \n         No \n     \n     \n         to.base \n         The target base that input parameter 'a' should be converted to \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;  conv(\"7f\", 16, 10) returns \"127\".", 
            "title": "conv (Function)"
        }, 
        {
            "location": "/api/4.0.15/#copysign-function", 
            "text": "Returns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function.  Syntax  DOUBLE  math:copySign( INT|LONG|FLOAT|DOUBLE  magnitude,  INT|LONG|FLOAT|DOUBLE  sign)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         magnitude \n         This parameters magnitude will be used for output attribute \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         sign \n         This parameters sign will be used for output attribute \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;  copySign(5.6d, -3.0d) returns -5.6.", 
            "title": "copySign (Function)"
        }, 
        {
            "location": "/api/4.0.15/#cos-function", 
            "text": "Returns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function.  Syntax  DOUBLE  math:cos( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose cosine value should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;  cos(6d) returns 0.9601702866503661.", 
            "title": "cos (Function)"
        }, 
        {
            "location": "/api/4.0.15/#cosh-function", 
            "text": "Returns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function.  Syntax  DOUBLE  math:cosh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic cosine should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;  cosh (6d) returns 201.7156361224559.", 
            "title": "cosh (Function)"
        }, 
        {
            "location": "/api/4.0.15/#e-function", 
            "text": "Returns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms).  Syntax  DOUBLE  math:e()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;  e() returns 2.7182818284590452354.", 
            "title": "e (Function)"
        }, 
        {
            "location": "/api/4.0.15/#exp-function", 
            "text": "Returns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function.  Syntax  DOUBLE  math:exp( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The power that the Euler's number e should be raised to \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;  exp(10.23) returns 27722.51006805505.", 
            "title": "exp (Function)"
        }, 
        {
            "location": "/api/4.0.15/#floor-function", 
            "text": "This function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer.  Syntax  DOUBLE  math:floor( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose floor value should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;  floor(10.23) returns 10.0.", 
            "title": "floor (Function)"
        }, 
        {
            "location": "/api/4.0.15/#getexponent-function", 
            "text": "Returns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function.  Syntax  INT  math:getExponent( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose unbiased exponent representation should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;  getExponent(60984.1) returns 15.", 
            "title": "getExponent (Function)"
        }, 
        {
            "location": "/api/4.0.15/#hex-function", 
            "text": "This function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1.  Syntax  STRING  math:hex( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hexadecimal representation should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;  hex(200) returns \"c8\".", 
            "title": "hex (Function)"
        }, 
        {
            "location": "/api/4.0.15/#isinfinite-function", 
            "text": "This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise.  Syntax  BOOL  math:isInfinite( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if infinite \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;  isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.", 
            "title": "isInfinite (Function)"
        }, 
        {
            "location": "/api/4.0.15/#isnan-function", 
            "text": "This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise.  Syntax  BOOL  math:isNan( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if it is a number \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;  isNan(java.lang.Math.log(-12d)) returns true.", 
            "title": "isNan (Function)"
        }, 
        {
            "location": "/api/4.0.15/#ln-function", 
            "text": "Returns the natural logarithm (base e) of p1.  Syntax  DOUBLE  math:ln( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose natural logarithm (base e) should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;  ln(11.453) returns 2.438251704415579.", 
            "title": "ln (Function)"
        }, 
        {
            "location": "/api/4.0.15/#log-function", 
            "text": "Returns the logarithm (base=base) of number.  Syntax  DOUBLE  math:log( INT|LONG|FLOAT|DOUBLE  number,  INT|LONG|FLOAT|DOUBLE  base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         number \n         The value of whose base should be changed \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         base \n         The base value of the ouput \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;  log(34, 2f) returns 5.08746284125034.", 
            "title": "log (Function)"
        }, 
        {
            "location": "/api/4.0.15/#log10-function", 
            "text": "Returns the base 10 logarithm of p1.  Syntax  DOUBLE  math:log10( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose base 10 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;  log10(19.234) returns 1.2840696117100832.", 
            "title": "log10 (Function)"
        }, 
        {
            "location": "/api/4.0.15/#log2-function", 
            "text": "Returns the base 2 logarithm of p1.  Syntax  DOUBLE  math:log2( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose base 2 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;  log2(91d) returns 6.507794640198696.", 
            "title": "log2 (Function)"
        }, 
        {
            "location": "/api/4.0.15/#max-function", 
            "text": "Returns the greater value out of p1 and p2.  Syntax  DOUBLE  math:max( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         Value one to be compared in finding largest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         Value two to be compared in finding largest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;  max(123.67d, 91) returns 123.67.", 
            "title": "max (Function)"
        }, 
        {
            "location": "/api/4.0.15/#min-function", 
            "text": "Returns the smaller value out of p1 and p2.  Syntax  DOUBLE  math:min( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         Value one to be compared in finding smallest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         Value two to be compared in finding smallest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;  min(123.67d, 91) returns 91.", 
            "title": "min (Function)"
        }, 
        {
            "location": "/api/4.0.15/#oct-function", 
            "text": "Converts p1 to octal.  Syntax  STRING  math:oct( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose octal representation should be found. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  oct(99l) returns \"143\".", 
            "title": "oct (Function)"
        }, 
        {
            "location": "/api/4.0.15/#parsedouble-function", 
            "text": "Returns str as a double.  Syntax  DOUBLE  math:parseDouble( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a double \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;  parseDouble(\"123\") returns 123.0.", 
            "title": "parseDouble (Function)"
        }, 
        {
            "location": "/api/4.0.15/#parsefloat-function", 
            "text": "Returns str as a float.  Syntax  FLOAT  math:parseFloat( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a float \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;  parseFloat(\"123\") returns 123.0.", 
            "title": "parseFloat (Function)"
        }, 
        {
            "location": "/api/4.0.15/#parseint-function", 
            "text": "Returns str as a int.  Syntax  INT  math:parseInt( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a int \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;  parseInt(\"123\") returns 123.", 
            "title": "parseInt (Function)"
        }, 
        {
            "location": "/api/4.0.15/#parselong-function", 
            "text": "Returns str as a long.  Syntax  LONG  math:parseLong( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a long \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;  parseLong(\"123\") returns 123.", 
            "title": "parseLong (Function)"
        }, 
        {
            "location": "/api/4.0.15/#pi-function", 
            "text": "Returns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter).   Syntax  DOUBLE  math:pi()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;  pi() always returns 3.141592653589793.", 
            "title": "pi (Function)"
        }, 
        {
            "location": "/api/4.0.15/#power-function", 
            "text": "Returns value raised to the power of toPower.  Syntax  DOUBLE  math:power( INT|LONG|FLOAT|DOUBLE  value,  INT|LONG|FLOAT|DOUBLE  to.power)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value that should be raised to the power of 'to.power' input parameter \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         to.power \n         The power that 'value' input parameter should be raised to \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;  power(5.6d, 3.0d) returns 175.61599999999996.", 
            "title": "power (Function)"
        }, 
        {
            "location": "/api/4.0.15/#rand-function", 
            "text": "1.  A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. 2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally.   Syntax  DOUBLE  math:rand( INT|LONG  seed)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         seed \n         An optional seed value that will be used to generate the random number sequence \n         defaultSeed \n         INT LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  A random double value between 0 and 1 will be generated using math:rand()", 
            "title": "rand (Function)"
        }, 
        {
            "location": "/api/4.0.15/#round-function", 
            "text": "Returns the closest integer/long (depending on the input) value to the argument.  Syntax  INT|LONG  math:round( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be rounded to the closest integer/long. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;  round(3252.353) returns 3252.", 
            "title": "round (Function)"
        }, 
        {
            "location": "/api/4.0.15/#signum-function", 
            "text": "If a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function.  Syntax  INT  math:signum( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if positive or negative or otherwise \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;  signum(-6.32d) returns -1.", 
            "title": "signum (Function)"
        }, 
        {
            "location": "/api/4.0.15/#sin-function", 
            "text": "Returns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function.  Syntax  DOUBLE  math:sin( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose sine value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;  sin(6d) returns -0.27941549819892586.", 
            "title": "sin (Function)"
        }, 
        {
            "location": "/api/4.0.15/#sinh-function", 
            "text": "Returns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function.   Syntax  DOUBLE  math:sinh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic sine value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;  sinh(6d) returns 201.71315737027922.", 
            "title": "sinh (Function)"
        }, 
        {
            "location": "/api/4.0.15/#sqrt-function", 
            "text": "Returns the square-root of p1. This function wraps the java.lang.Math.sqrt() function.  Syntax  DOUBLE  math:sqrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose square-root value should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;  sqrt(4d) returns 2.", 
            "title": "sqrt (Function)"
        }, 
        {
            "location": "/api/4.0.15/#tan-function", 
            "text": "Returns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function.  Syntax  DOUBLE  math:tan( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose tan value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;  tan(6d) returns -0.29100619138474915.", 
            "title": "tan (Function)"
        }, 
        {
            "location": "/api/4.0.15/#tanh-function", 
            "text": "Returns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function.  Syntax  DOUBLE  math:tanh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic tangent value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;  tanh(6d) returns 0.9999877116507956.", 
            "title": "tanh (Function)"
        }, 
        {
            "location": "/api/4.0.15/#todegrees-function", 
            "text": "Converts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function.  Syntax  DOUBLE  math:toDegrees( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The radians value that should be converted to degrees \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;  toDegrees(6d) returns 343.77467707849394.", 
            "title": "toDegrees (Function)"
        }, 
        {
            "location": "/api/4.0.15/#toradians-function", 
            "text": "Converts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function.  Syntax  DOUBLE  math:toRadians( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The degrees value that should be converted to radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;  toRadians(6d) returns 0.10471975511965977.", 
            "title": "toRadians (Function)"
        }, 
        {
            "location": "/api/4.0.14/", 
            "text": "API Docs - v4.0.14\n\n\nMath\n\n\npercentile \n(Aggregate Function)\n\n\nReturns the pth percentile value of the arg values.\n\n\n\nSyntax\n\n\nDOUBLE\n math:percentile(\nINT|LONG|FLOAT|DOUBLE\n arg, \nDOUBLE\n p)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe values of which the percentile should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np\n\n        \nEstimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;\n\n\n\n\n\nmath:percentile(temperature, 97.0)\n\n\n\nabs \n(Function)\n\n\nReturns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:abs(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the absolute value should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;\n\n\n\n\n\nBoth abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.\n\n\n\nacos \n(Function)\n\n\nIf -1 \n= p1 \n= 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:acos(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-cosine (inverse cosine) should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;\n\n\n\n\n\nacos(0.5) returns 1.0471975511965979.\n\n\n\nasin \n(Function)\n\n\nIf -1 \n= p1 \n= 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:asin(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-sin (inverse sine) should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;\n\n\n\n\n\nasin(0.5) returns 0.5235987755982989.\n\n\n\natan \n(Function)\n\n\n1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function.\n2. Returns the arc-tangent (inverse tangent) of  p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:atan(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np1\n\n        \nThis optional parameter represents the y coordinate of the (x,y) coordinate pair\n\n        \n0D\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\n\natan(12d, 5d) returns 1.1760052070951352.\n\n\n\nbin \n(Function)\n\n\nReturns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods.\n\n\n\nSyntax\n\n\nSTRING\n math:bin(\nINT|LONG\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to an unsigned integer of base 2\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;\n\n\n\n\n\nbin(9) returns \"1001\".\n\n\n\ncbrt \n(Function)\n\n\nReturns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cbrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose cube-root should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;\n\n\n\n\n\ncbrt(17d) returns 2.5712815906582356.\n\n\n\nceil \n(Function)\n\n\nReturns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ceil(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose ceiling value should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;\n\n\n\n\n\nceil(423.187d) returns 424.0.\n\n\n\nconv \n(Function)\n\n\nConverts a from the fromBase base to the toBase base.\n\n\n\nSyntax\n\n\nSTRING\n math:conv(\nSTRING\n a, \nINT\n from.base, \nINT\n to.base)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \na\n\n        \nThe value whose base should be changed. Input should be as a String\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfrom.base\n\n        \nThe source base of the input parameter 'a'\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.base\n\n        \nThe target base that input parameter 'a' should be converted to\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\n\nconv(\"7f\", 16, 10) returns \"127\".\n\n\n\ncopySign \n(Function)\n\n\nReturns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:copySign(\nINT|LONG|FLOAT|DOUBLE\n magnitude, \nINT|LONG|FLOAT|DOUBLE\n sign)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmagnitude\n\n        \nThis parameters magnitude will be used for output attribute\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsign\n\n        \nThis parameters sign will be used for output attribute\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;\n\n\n\n\n\ncopySign(5.6d, -3.0d) returns -5.6.\n\n\n\ncos \n(Function)\n\n\nReturns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cos(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose cosine value should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\n\ncos(6d) returns 0.9601702866503661.\n\n\n\ncosh \n(Function)\n\n\nReturns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cosh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic cosine should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\n\ncosh (6d) returns 201.7156361224559.\n\n\n\ne \n(Function)\n\n\nReturns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms).\n\n\n\nSyntax\n\n\nDOUBLE\n math:e()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;\n\n\n\n\n\ne() returns 2.7182818284590452354.\n\n\n\nexp \n(Function)\n\n\nReturns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:exp(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe power that the Euler's number e should be raised to\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\n\nexp(10.23) returns 27722.51006805505.\n\n\n\nfloor \n(Function)\n\n\nThis function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer.\n\n\n\nSyntax\n\n\nDOUBLE\n math:floor(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose floor value should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;\n\n\n\n\n\nfloor(10.23) returns 10.0.\n\n\n\ngetExponent \n(Function)\n\n\nReturns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function.\n\n\n\nSyntax\n\n\nINT\n math:getExponent(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose unbiased exponent representation should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\n\ngetExponent(60984.1) returns 15.\n\n\n\nhex \n(Function)\n\n\nThis function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1.\n\n\n\nSyntax\n\n\nSTRING\n math:hex(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hexadecimal representation should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;\n\n\n\n\n\nhex(200) returns \"c8\".\n\n\n\nisInfinite \n(Function)\n\n\nThis function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isInfinite(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if infinite\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;\n\n\n\n\n\nisInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.\n\n\n\nisNan \n(Function)\n\n\nThis function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isNan(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if it is a number\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;\n\n\n\n\n\nisNan(java.lang.Math.log(-12d)) returns true.\n\n\n\nln \n(Function)\n\n\nReturns the natural logarithm (base e) of p1.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ln(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose natural logarithm (base e) should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nln(11.453) returns 2.438251704415579.\n\n\n\nlog \n(Function)\n\n\nReturns the logarithm (base=base) of number.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log(\nINT|LONG|FLOAT|DOUBLE\n number, \nINT|LONG|FLOAT|DOUBLE\n base)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nnumber\n\n        \nThe value of whose base should be changed\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbase\n\n        \nThe base value of the ouput\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;\n\n\n\n\n\nlog(34, 2f) returns 5.08746284125034.\n\n\n\nlog10 \n(Function)\n\n\nReturns the base 10 logarithm of p1.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log10(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose base 10 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nlog10(19.234) returns 1.2840696117100832.\n\n\n\nlog2 \n(Function)\n\n\nReturns the base 2 logarithm of p1.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log2(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose base 2 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nlog2(91d) returns 6.507794640198696.\n\n\n\nmax \n(Function)\n\n\nReturns the greater value out of p1 and p2.\n\n\n\nSyntax\n\n\nDOUBLE\n math:max(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nValue one to be compared in finding largest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nValue two to be compared in finding largest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;\n\n\n\n\n\nmax(123.67d, 91) returns 123.67.\n\n\n\nmin \n(Function)\n\n\nReturns the smaller value out of p1 and p2.\n\n\n\nSyntax\n\n\nDOUBLE\n math:min(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nValue one to be compared in finding smallest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nValue two to be compared in finding smallest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;\n\n\n\n\n\nmin(123.67d, 91) returns 91.\n\n\n\noct \n(Function)\n\n\nConverts p1 to octal.\n\n\n\nSyntax\n\n\nSTRING\n math:oct(\nINT|LONG\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose octal representation should be found.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\n\noct(99l) returns \"143\".\n\n\n\nparseDouble \n(Function)\n\n\nReturns str as a double.\n\n\n\nSyntax\n\n\nDOUBLE\n math:parseDouble(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a double\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseDouble(\"123\") returns 123.0.\n\n\n\nparseFloat \n(Function)\n\n\nReturns str as a float.\n\n\n\nSyntax\n\n\nFLOAT\n math:parseFloat(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a float\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseFloat(\"123\") returns 123.0.\n\n\n\nparseInt \n(Function)\n\n\nReturns str as a int.\n\n\n\nSyntax\n\n\nINT\n math:parseInt(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a int\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseInt(\"123\") returns 123.\n\n\n\nparseLong \n(Function)\n\n\nReturns str as a long.\n\n\n\nSyntax\n\n\nLONG\n math:parseLong(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a long\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseLong(\"123\") returns 123.\n\n\n\npi \n(Function)\n\n\nReturns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter). \n\n\n\nSyntax\n\n\nDOUBLE\n math:pi()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;\n\n\n\n\n\npi() always returns 3.141592653589793.\n\n\n\npower \n(Function)\n\n\nReturns value raised to the power of toPower.\n\n\n\nSyntax\n\n\nDOUBLE\n math:power(\nINT|LONG|FLOAT|DOUBLE\n value, \nINT|LONG|FLOAT|DOUBLE\n to.power)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value that should be raised to the power of 'to.power' input parameter\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.power\n\n        \nThe power that 'value' input parameter should be raised to\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;\n\n\n\n\n\npower(5.6d, 3.0d) returns 175.61599999999996.\n\n\n\nrand \n(Function)\n\n\n1.  A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally.\n2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. \n\n\n\nSyntax\n\n\nDOUBLE\n math:rand(\nINT|LONG\n seed)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nseed\n\n        \nAn optional seed value that will be used to generate the random number sequence\n\n        \ndefaultSeed\n\n        \nINT\nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\n\nA random double value between 0 and 1 will be generated using math:rand()\n\n\n\nround \n(Function)\n\n\nReturns the closest integer/long (depending on the input) value to the argument.\n\n\n\nSyntax\n\n\nINT|LONG\n math:round(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be rounded to the closest integer/long.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;\n\n\n\n\n\nround(3252.353) returns 3252.\n\n\n\nsignum \n(Function)\n\n\nIf a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function.\n\n\n\nSyntax\n\n\nINT\n math:signum(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if positive or negative or otherwise\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;\n\n\n\n\n\nsignum(-6.32d) returns -1.\n\n\n\nsin \n(Function)\n\n\nReturns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sin(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose sine value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;\n\n\n\n\n\nsin(6d) returns -0.27941549819892586.\n\n\n\nsinh \n(Function)\n\n\nReturns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function. \n\n\n\nSyntax\n\n\nDOUBLE\n math:sinh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic sine value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;\n\n\n\n\n\nsinh(6d) returns 201.71315737027922.\n\n\n\nsqrt \n(Function)\n\n\nReturns the square-root of p1. This function wraps the java.lang.Math.sqrt() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sqrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose square-root value should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;\n\n\n\n\n\nsqrt(4d) returns 2.\n\n\n\ntan \n(Function)\n\n\nReturns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tan(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose tan value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;\n\n\n\n\n\ntan(6d) returns -0.29100619138474915.\n\n\n\ntanh \n(Function)\n\n\nReturns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tanh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic tangent value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;\n\n\n\n\n\ntanh(6d) returns 0.9999877116507956.\n\n\n\ntoDegrees \n(Function)\n\n\nConverts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toDegrees(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe radians value that should be converted to degrees\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;\n\n\n\n\n\ntoDegrees(6d) returns 343.77467707849394.\n\n\n\ntoRadians \n(Function)\n\n\nConverts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toRadians(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe degrees value that should be converted to radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;\n\n\n\n\n\ntoRadians(6d) returns 0.10471975511965977.", 
            "title": "4.0.14"
        }, 
        {
            "location": "/api/4.0.14/#api-docs-v4014", 
            "text": "", 
            "title": "API Docs - v4.0.14"
        }, 
        {
            "location": "/api/4.0.14/#math", 
            "text": "", 
            "title": "Math"
        }, 
        {
            "location": "/api/4.0.14/#percentile-aggregate-function", 
            "text": "Returns the pth percentile value of the arg values.  Syntax  DOUBLE  math:percentile( INT|LONG|FLOAT|DOUBLE  arg,  DOUBLE  p)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The values of which the percentile should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p \n         Estimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100 \n         \n         DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;  math:percentile(temperature, 97.0)", 
            "title": "percentile (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.14/#abs-function", 
            "text": "Returns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function.  Syntax  DOUBLE  math:abs( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the absolute value should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;  Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.", 
            "title": "abs (Function)"
        }, 
        {
            "location": "/api/4.0.14/#acos-function", 
            "text": "If -1  = p1  = 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function.  Syntax  DOUBLE  math:acos( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-cosine (inverse cosine) should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;  acos(0.5) returns 1.0471975511965979.", 
            "title": "acos (Function)"
        }, 
        {
            "location": "/api/4.0.14/#asin-function", 
            "text": "If -1  = p1  = 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function.  Syntax  DOUBLE  math:asin( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-sin (inverse sine) should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;  asin(0.5) returns 0.5235987755982989.", 
            "title": "asin (Function)"
        }, 
        {
            "location": "/api/4.0.14/#atan-function", 
            "text": "1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function. 2. Returns the arc-tangent (inverse tangent) of  p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function.  Syntax  DOUBLE  math:atan( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p1 \n         This optional parameter represents the y coordinate of the (x,y) coordinate pair \n         0D \n         INT LONG FLOAT DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;  atan(12d, 5d) returns 1.1760052070951352.", 
            "title": "atan (Function)"
        }, 
        {
            "location": "/api/4.0.14/#bin-function", 
            "text": "Returns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods.  Syntax  STRING  math:bin( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to an unsigned integer of base 2 \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;  bin(9) returns \"1001\".", 
            "title": "bin (Function)"
        }, 
        {
            "location": "/api/4.0.14/#cbrt-function", 
            "text": "Returns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function.  Syntax  DOUBLE  math:cbrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose cube-root should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;  cbrt(17d) returns 2.5712815906582356.", 
            "title": "cbrt (Function)"
        }, 
        {
            "location": "/api/4.0.14/#ceil-function", 
            "text": "Returns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method.  Syntax  DOUBLE  math:ceil( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose ceiling value should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;  ceil(423.187d) returns 424.0.", 
            "title": "ceil (Function)"
        }, 
        {
            "location": "/api/4.0.14/#conv-function", 
            "text": "Converts a from the fromBase base to the toBase base.  Syntax  STRING  math:conv( STRING  a,  INT  from.base,  INT  to.base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         a \n         The value whose base should be changed. Input should be as a String \n         \n         STRING \n         No \n         No \n     \n     \n         from.base \n         The source base of the input parameter 'a' \n         \n         INT \n         No \n         No \n     \n     \n         to.base \n         The target base that input parameter 'a' should be converted to \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;  conv(\"7f\", 16, 10) returns \"127\".", 
            "title": "conv (Function)"
        }, 
        {
            "location": "/api/4.0.14/#copysign-function", 
            "text": "Returns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function.  Syntax  DOUBLE  math:copySign( INT|LONG|FLOAT|DOUBLE  magnitude,  INT|LONG|FLOAT|DOUBLE  sign)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         magnitude \n         This parameters magnitude will be used for output attribute \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         sign \n         This parameters sign will be used for output attribute \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;  copySign(5.6d, -3.0d) returns -5.6.", 
            "title": "copySign (Function)"
        }, 
        {
            "location": "/api/4.0.14/#cos-function", 
            "text": "Returns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function.  Syntax  DOUBLE  math:cos( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose cosine value should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;  cos(6d) returns 0.9601702866503661.", 
            "title": "cos (Function)"
        }, 
        {
            "location": "/api/4.0.14/#cosh-function", 
            "text": "Returns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function.  Syntax  DOUBLE  math:cosh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic cosine should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;  cosh (6d) returns 201.7156361224559.", 
            "title": "cosh (Function)"
        }, 
        {
            "location": "/api/4.0.14/#e-function", 
            "text": "Returns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms).  Syntax  DOUBLE  math:e()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;  e() returns 2.7182818284590452354.", 
            "title": "e (Function)"
        }, 
        {
            "location": "/api/4.0.14/#exp-function", 
            "text": "Returns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function.  Syntax  DOUBLE  math:exp( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The power that the Euler's number e should be raised to \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;  exp(10.23) returns 27722.51006805505.", 
            "title": "exp (Function)"
        }, 
        {
            "location": "/api/4.0.14/#floor-function", 
            "text": "This function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer.  Syntax  DOUBLE  math:floor( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose floor value should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;  floor(10.23) returns 10.0.", 
            "title": "floor (Function)"
        }, 
        {
            "location": "/api/4.0.14/#getexponent-function", 
            "text": "Returns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function.  Syntax  INT  math:getExponent( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose unbiased exponent representation should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;  getExponent(60984.1) returns 15.", 
            "title": "getExponent (Function)"
        }, 
        {
            "location": "/api/4.0.14/#hex-function", 
            "text": "This function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1.  Syntax  STRING  math:hex( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hexadecimal representation should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;  hex(200) returns \"c8\".", 
            "title": "hex (Function)"
        }, 
        {
            "location": "/api/4.0.14/#isinfinite-function", 
            "text": "This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise.  Syntax  BOOL  math:isInfinite( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if infinite \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;  isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.", 
            "title": "isInfinite (Function)"
        }, 
        {
            "location": "/api/4.0.14/#isnan-function", 
            "text": "This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise.  Syntax  BOOL  math:isNan( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if it is a number \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;  isNan(java.lang.Math.log(-12d)) returns true.", 
            "title": "isNan (Function)"
        }, 
        {
            "location": "/api/4.0.14/#ln-function", 
            "text": "Returns the natural logarithm (base e) of p1.  Syntax  DOUBLE  math:ln( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose natural logarithm (base e) should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;  ln(11.453) returns 2.438251704415579.", 
            "title": "ln (Function)"
        }, 
        {
            "location": "/api/4.0.14/#log-function", 
            "text": "Returns the logarithm (base=base) of number.  Syntax  DOUBLE  math:log( INT|LONG|FLOAT|DOUBLE  number,  INT|LONG|FLOAT|DOUBLE  base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         number \n         The value of whose base should be changed \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         base \n         The base value of the ouput \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;  log(34, 2f) returns 5.08746284125034.", 
            "title": "log (Function)"
        }, 
        {
            "location": "/api/4.0.14/#log10-function", 
            "text": "Returns the base 10 logarithm of p1.  Syntax  DOUBLE  math:log10( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose base 10 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;  log10(19.234) returns 1.2840696117100832.", 
            "title": "log10 (Function)"
        }, 
        {
            "location": "/api/4.0.14/#log2-function", 
            "text": "Returns the base 2 logarithm of p1.  Syntax  DOUBLE  math:log2( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose base 2 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;  log2(91d) returns 6.507794640198696.", 
            "title": "log2 (Function)"
        }, 
        {
            "location": "/api/4.0.14/#max-function", 
            "text": "Returns the greater value out of p1 and p2.  Syntax  DOUBLE  math:max( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         Value one to be compared in finding largest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         Value two to be compared in finding largest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;  max(123.67d, 91) returns 123.67.", 
            "title": "max (Function)"
        }, 
        {
            "location": "/api/4.0.14/#min-function", 
            "text": "Returns the smaller value out of p1 and p2.  Syntax  DOUBLE  math:min( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         Value one to be compared in finding smallest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         Value two to be compared in finding smallest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;  min(123.67d, 91) returns 91.", 
            "title": "min (Function)"
        }, 
        {
            "location": "/api/4.0.14/#oct-function", 
            "text": "Converts p1 to octal.  Syntax  STRING  math:oct( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose octal representation should be found. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  oct(99l) returns \"143\".", 
            "title": "oct (Function)"
        }, 
        {
            "location": "/api/4.0.14/#parsedouble-function", 
            "text": "Returns str as a double.  Syntax  DOUBLE  math:parseDouble( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a double \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;  parseDouble(\"123\") returns 123.0.", 
            "title": "parseDouble (Function)"
        }, 
        {
            "location": "/api/4.0.14/#parsefloat-function", 
            "text": "Returns str as a float.  Syntax  FLOAT  math:parseFloat( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a float \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;  parseFloat(\"123\") returns 123.0.", 
            "title": "parseFloat (Function)"
        }, 
        {
            "location": "/api/4.0.14/#parseint-function", 
            "text": "Returns str as a int.  Syntax  INT  math:parseInt( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a int \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;  parseInt(\"123\") returns 123.", 
            "title": "parseInt (Function)"
        }, 
        {
            "location": "/api/4.0.14/#parselong-function", 
            "text": "Returns str as a long.  Syntax  LONG  math:parseLong( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a long \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;  parseLong(\"123\") returns 123.", 
            "title": "parseLong (Function)"
        }, 
        {
            "location": "/api/4.0.14/#pi-function", 
            "text": "Returns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter).   Syntax  DOUBLE  math:pi()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;  pi() always returns 3.141592653589793.", 
            "title": "pi (Function)"
        }, 
        {
            "location": "/api/4.0.14/#power-function", 
            "text": "Returns value raised to the power of toPower.  Syntax  DOUBLE  math:power( INT|LONG|FLOAT|DOUBLE  value,  INT|LONG|FLOAT|DOUBLE  to.power)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value that should be raised to the power of 'to.power' input parameter \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         to.power \n         The power that 'value' input parameter should be raised to \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;  power(5.6d, 3.0d) returns 175.61599999999996.", 
            "title": "power (Function)"
        }, 
        {
            "location": "/api/4.0.14/#rand-function", 
            "text": "1.  A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. 2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally.   Syntax  DOUBLE  math:rand( INT|LONG  seed)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         seed \n         An optional seed value that will be used to generate the random number sequence \n         defaultSeed \n         INT LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  A random double value between 0 and 1 will be generated using math:rand()", 
            "title": "rand (Function)"
        }, 
        {
            "location": "/api/4.0.14/#round-function", 
            "text": "Returns the closest integer/long (depending on the input) value to the argument.  Syntax  INT|LONG  math:round( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be rounded to the closest integer/long. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;  round(3252.353) returns 3252.", 
            "title": "round (Function)"
        }, 
        {
            "location": "/api/4.0.14/#signum-function", 
            "text": "If a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function.  Syntax  INT  math:signum( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if positive or negative or otherwise \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;  signum(-6.32d) returns -1.", 
            "title": "signum (Function)"
        }, 
        {
            "location": "/api/4.0.14/#sin-function", 
            "text": "Returns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function.  Syntax  DOUBLE  math:sin( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose sine value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;  sin(6d) returns -0.27941549819892586.", 
            "title": "sin (Function)"
        }, 
        {
            "location": "/api/4.0.14/#sinh-function", 
            "text": "Returns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function.   Syntax  DOUBLE  math:sinh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic sine value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;  sinh(6d) returns 201.71315737027922.", 
            "title": "sinh (Function)"
        }, 
        {
            "location": "/api/4.0.14/#sqrt-function", 
            "text": "Returns the square-root of p1. This function wraps the java.lang.Math.sqrt() function.  Syntax  DOUBLE  math:sqrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose square-root value should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;  sqrt(4d) returns 2.", 
            "title": "sqrt (Function)"
        }, 
        {
            "location": "/api/4.0.14/#tan-function", 
            "text": "Returns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function.  Syntax  DOUBLE  math:tan( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose tan value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;  tan(6d) returns -0.29100619138474915.", 
            "title": "tan (Function)"
        }, 
        {
            "location": "/api/4.0.14/#tanh-function", 
            "text": "Returns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function.  Syntax  DOUBLE  math:tanh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic tangent value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;  tanh(6d) returns 0.9999877116507956.", 
            "title": "tanh (Function)"
        }, 
        {
            "location": "/api/4.0.14/#todegrees-function", 
            "text": "Converts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function.  Syntax  DOUBLE  math:toDegrees( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The radians value that should be converted to degrees \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;  toDegrees(6d) returns 343.77467707849394.", 
            "title": "toDegrees (Function)"
        }, 
        {
            "location": "/api/4.0.14/#toradians-function", 
            "text": "Converts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function.  Syntax  DOUBLE  math:toRadians( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The degrees value that should be converted to radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;  toRadians(6d) returns 0.10471975511965977.", 
            "title": "toRadians (Function)"
        }, 
        {
            "location": "/api/4.0.13/", 
            "text": "API Docs - v4.0.13\n\n\nMath\n\n\npercentile \n(Aggregate Function)\n\n\nReturns the pth percentile value of the arg values.\n\n\n\nSyntax\n\n\nDOUBLE\n math:percentile(\nINT|LONG|FLOAT|DOUBLE\n arg, \nDOUBLE\n p)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe values of which the percentile should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np\n\n        \nEstimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;\n\n\n\n\n\nmath:percentile(temperature, 97.0)\n\n\n\nabs \n(Function)\n\n\nReturns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:abs(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the absolute value should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;\n\n\n\n\n\nBoth abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.\n\n\n\nacos \n(Function)\n\n\nIf -1 \n= p1 \n= 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:acos(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-cosine (inverse cosine) should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;\n\n\n\n\n\nacos(0.5) returns 1.0471975511965979.\n\n\n\nasin \n(Function)\n\n\nIf -1 \n= p1 \n= 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:asin(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-sin (inverse sine) should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;\n\n\n\n\n\nasin(0.5) returns 0.5235987755982989.\n\n\n\natan \n(Function)\n\n\n1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function.\n2. Returns the arc-tangent (inverse tangent) of  p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:atan(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np1\n\n        \nThis optional parameter represents the y coordinate of the (x,y) coordinate pair\n\n        \n0D\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\n\natan(12d, 5d) returns 1.1760052070951352.\n\n\n\nbin \n(Function)\n\n\nReturns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods.\n\n\n\nSyntax\n\n\nSTRING\n math:bin(\nINT|LONG\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to an unsigned integer of base 2\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;\n\n\n\n\n\nbin(9) returns \"1001\".\n\n\n\ncbrt \n(Function)\n\n\nReturns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cbrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose cube-root should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;\n\n\n\n\n\ncbrt(17d) returns 2.5712815906582356.\n\n\n\nceil \n(Function)\n\n\nReturns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ceil(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose ceiling value should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;\n\n\n\n\n\nceil(423.187d) returns 424.0.\n\n\n\nconv \n(Function)\n\n\nConverts a from the fromBase base to the toBase base.\n\n\n\nSyntax\n\n\nSTRING\n math:conv(\nSTRING\n a, \nINT\n from.base, \nINT\n to.base)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \na\n\n        \nThe value whose base should be changed. Input should be as a String\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfrom.base\n\n        \nThe source base of the input parameter 'a'\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.base\n\n        \nThe target base that input parameter 'a' should be converted to\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\n\nconv(\"7f\", 16, 10) returns \"127\".\n\n\n\ncopySign \n(Function)\n\n\nReturns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:copySign(\nINT|LONG|FLOAT|DOUBLE\n magnitude, \nINT|LONG|FLOAT|DOUBLE\n sign)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmagnitude\n\n        \nThis parameters magnitude will be used for output attribute\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsign\n\n        \nThis parameters sign will be used for output attribute\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;\n\n\n\n\n\ncopySign(5.6d, -3.0d) returns -5.6.\n\n\n\ncos \n(Function)\n\n\nReturns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cos(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose cosine value should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\n\ncos(6d) returns 0.9601702866503661.\n\n\n\ncosh \n(Function)\n\n\nReturns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cosh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic cosine should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\n\ncosh (6d) returns 201.7156361224559.\n\n\n\ne \n(Function)\n\n\nReturns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms).\n\n\n\nSyntax\n\n\nDOUBLE\n math:e()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;\n\n\n\n\n\ne() returns 2.7182818284590452354.\n\n\n\nexp \n(Function)\n\n\nReturns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:exp(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe power that the Euler's number e should be raised to\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\n\nexp(10.23) returns 27722.51006805505.\n\n\n\nfloor \n(Function)\n\n\nThis function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer.\n\n\n\nSyntax\n\n\nDOUBLE\n math:floor(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose floor value should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;\n\n\n\n\n\nfloor(10.23) returns 10.0.\n\n\n\ngetExponent \n(Function)\n\n\nReturns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function.\n\n\n\nSyntax\n\n\nINT\n math:getExponent(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose unbiased exponent representation should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\n\ngetExponent(60984.1) returns 15.\n\n\n\nhex \n(Function)\n\n\nThis function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1.\n\n\n\nSyntax\n\n\nSTRING\n math:hex(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hexadecimal representation should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;\n\n\n\n\n\nhex(200) returns \"c8\".\n\n\n\nisInfinite \n(Function)\n\n\nThis function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isInfinite(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if infinite\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;\n\n\n\n\n\nisInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.\n\n\n\nisNan \n(Function)\n\n\nThis function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isNan(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if it is a number\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;\n\n\n\n\n\nisNan(java.lang.Math.log(-12d)) returns true.\n\n\n\nln \n(Function)\n\n\nReturns the natural logarithm (base e) of p1.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ln(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose natural logarithm (base e) should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nln(11.453) returns 2.438251704415579.\n\n\n\nlog \n(Function)\n\n\nReturns the logarithm (base=base) of number.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log(\nINT|LONG|FLOAT|DOUBLE\n number, \nINT|LONG|FLOAT|DOUBLE\n base)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nnumber\n\n        \nThe value of whose base should be changed\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbase\n\n        \nThe base value of the ouput\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;\n\n\n\n\n\nlog(34, 2f) returns 5.08746284125034.\n\n\n\nlog10 \n(Function)\n\n\nReturns the base 10 logarithm of p1.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log10(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose base 10 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nlog10(19.234) returns 1.2840696117100832.\n\n\n\nlog2 \n(Function)\n\n\nReturns the base 2 logarithm of p1.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log2(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose base 2 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nlog2(91d) returns 6.507794640198696.\n\n\n\nmax \n(Function)\n\n\nReturns the greater value out of p1 and p2.\n\n\n\nSyntax\n\n\nDOUBLE\n math:max(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nValue one to be compared in finding largest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nValue two to be compared in finding largest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;\n\n\n\n\n\nmax(123.67d, 91) returns 123.67.\n\n\n\nmin \n(Function)\n\n\nReturns the smaller value out of p1 and p2.\n\n\n\nSyntax\n\n\nDOUBLE\n math:min(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nValue one to be compared in finding smallest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nValue two to be compared in finding smallest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;\n\n\n\n\n\nmin(123.67d, 91) returns 91.\n\n\n\noct \n(Function)\n\n\nConverts p1 to octal.\n\n\n\nSyntax\n\n\nSTRING\n math:oct(\nINT|LONG\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose octal representation should be found.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\n\noct(99l) returns \"143\".\n\n\n\nparseDouble \n(Function)\n\n\nReturns str as a double.\n\n\n\nSyntax\n\n\nDOUBLE\n math:parseDouble(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a double\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseDouble(\"123\") returns 123.0.\n\n\n\nparseFloat \n(Function)\n\n\nReturns str as a float.\n\n\n\nSyntax\n\n\nFLOAT\n math:parseFloat(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a float\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseFloat(\"123\") returns 123.0.\n\n\n\nparseInt \n(Function)\n\n\nReturns str as a int.\n\n\n\nSyntax\n\n\nINT\n math:parseInt(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a int\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseInt(\"123\") returns 123.\n\n\n\nparseLong \n(Function)\n\n\nReturns str as a long.\n\n\n\nSyntax\n\n\nLONG\n math:parseLong(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a long\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseLong(\"123\") returns 123.\n\n\n\npi \n(Function)\n\n\nReturns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter). \n\n\n\nSyntax\n\n\nDOUBLE\n math:pi()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;\n\n\n\n\n\npi() always returns 3.141592653589793.\n\n\n\npower \n(Function)\n\n\nReturns value raised to the power of toPower.\n\n\n\nSyntax\n\n\nDOUBLE\n math:power(\nINT|LONG|FLOAT|DOUBLE\n value, \nINT|LONG|FLOAT|DOUBLE\n to.power)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value that should be raised to the power of 'to.power' input parameter\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.power\n\n        \nThe power that 'value' input parameter should be raised to\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;\n\n\n\n\n\npower(5.6d, 3.0d) returns 175.61599999999996.\n\n\n\nrand \n(Function)\n\n\n1.  A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally.\n2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. \n\n\n\nSyntax\n\n\nDOUBLE\n math:rand(\nINT|LONG\n seed)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nseed\n\n        \nAn optional seed value that will be used to generate the random number sequence\n\n        \ndefaultSeed\n\n        \nINT\nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\n\nA random double value between 0 and 1 will be generated using math:rand()\n\n\n\nround \n(Function)\n\n\nReturns the closest integer/long (depending on the input) value to the argument.\n\n\n\nSyntax\n\n\nINT|LONG\n math:round(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be rounded to the closest integer/long.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;\n\n\n\n\n\nround(3252.353) returns 3252.\n\n\n\nsignum \n(Function)\n\n\nIf a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function.\n\n\n\nSyntax\n\n\nINT\n math:signum(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if positive or negative or otherwise\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;\n\n\n\n\n\nsignum(-6.32d) returns -1.\n\n\n\nsin \n(Function)\n\n\nReturns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sin(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose sine value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;\n\n\n\n\n\nsin(6d) returns -0.27941549819892586.\n\n\n\nsinh \n(Function)\n\n\nReturns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function. \n\n\n\nSyntax\n\n\nDOUBLE\n math:sinh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic sine value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;\n\n\n\n\n\nsinh(6d) returns 201.71315737027922.\n\n\n\nsqrt \n(Function)\n\n\nReturns the square-root of p1. This function wraps the java.lang.Math.sqrt() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sqrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose square-root value should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;\n\n\n\n\n\nsqrt(4d) returns 2.\n\n\n\ntan \n(Function)\n\n\nReturns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tan(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose tan value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;\n\n\n\n\n\ntan(6d) returns -0.29100619138474915.\n\n\n\ntanh \n(Function)\n\n\nReturns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tanh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic tangent value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;\n\n\n\n\n\ntanh(6d) returns 0.9999877116507956.\n\n\n\ntoDegrees \n(Function)\n\n\nConverts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toDegrees(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe radians value that should be converted to degrees\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;\n\n\n\n\n\ntoDegrees(6d) returns 343.77467707849394.\n\n\n\ntoRadians \n(Function)\n\n\nConverts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toRadians(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe degrees value that should be converted to radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;\n\n\n\n\n\ntoRadians(6d) returns 0.10471975511965977.", 
            "title": "4.0.13"
        }, 
        {
            "location": "/api/4.0.13/#api-docs-v4013", 
            "text": "", 
            "title": "API Docs - v4.0.13"
        }, 
        {
            "location": "/api/4.0.13/#math", 
            "text": "", 
            "title": "Math"
        }, 
        {
            "location": "/api/4.0.13/#percentile-aggregate-function", 
            "text": "Returns the pth percentile value of the arg values.  Syntax  DOUBLE  math:percentile( INT|LONG|FLOAT|DOUBLE  arg,  DOUBLE  p)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The values of which the percentile should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p \n         Estimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100 \n         \n         DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;  math:percentile(temperature, 97.0)", 
            "title": "percentile (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.13/#abs-function", 
            "text": "Returns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function.  Syntax  DOUBLE  math:abs( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the absolute value should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;  Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.", 
            "title": "abs (Function)"
        }, 
        {
            "location": "/api/4.0.13/#acos-function", 
            "text": "If -1  = p1  = 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function.  Syntax  DOUBLE  math:acos( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-cosine (inverse cosine) should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;  acos(0.5) returns 1.0471975511965979.", 
            "title": "acos (Function)"
        }, 
        {
            "location": "/api/4.0.13/#asin-function", 
            "text": "If -1  = p1  = 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function.  Syntax  DOUBLE  math:asin( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-sin (inverse sine) should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;  asin(0.5) returns 0.5235987755982989.", 
            "title": "asin (Function)"
        }, 
        {
            "location": "/api/4.0.13/#atan-function", 
            "text": "1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function. 2. Returns the arc-tangent (inverse tangent) of  p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function.  Syntax  DOUBLE  math:atan( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p1 \n         This optional parameter represents the y coordinate of the (x,y) coordinate pair \n         0D \n         INT LONG FLOAT DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;  atan(12d, 5d) returns 1.1760052070951352.", 
            "title": "atan (Function)"
        }, 
        {
            "location": "/api/4.0.13/#bin-function", 
            "text": "Returns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods.  Syntax  STRING  math:bin( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to an unsigned integer of base 2 \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;  bin(9) returns \"1001\".", 
            "title": "bin (Function)"
        }, 
        {
            "location": "/api/4.0.13/#cbrt-function", 
            "text": "Returns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function.  Syntax  DOUBLE  math:cbrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose cube-root should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;  cbrt(17d) returns 2.5712815906582356.", 
            "title": "cbrt (Function)"
        }, 
        {
            "location": "/api/4.0.13/#ceil-function", 
            "text": "Returns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method.  Syntax  DOUBLE  math:ceil( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose ceiling value should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;  ceil(423.187d) returns 424.0.", 
            "title": "ceil (Function)"
        }, 
        {
            "location": "/api/4.0.13/#conv-function", 
            "text": "Converts a from the fromBase base to the toBase base.  Syntax  STRING  math:conv( STRING  a,  INT  from.base,  INT  to.base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         a \n         The value whose base should be changed. Input should be as a String \n         \n         STRING \n         No \n         No \n     \n     \n         from.base \n         The source base of the input parameter 'a' \n         \n         INT \n         No \n         No \n     \n     \n         to.base \n         The target base that input parameter 'a' should be converted to \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;  conv(\"7f\", 16, 10) returns \"127\".", 
            "title": "conv (Function)"
        }, 
        {
            "location": "/api/4.0.13/#copysign-function", 
            "text": "Returns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function.  Syntax  DOUBLE  math:copySign( INT|LONG|FLOAT|DOUBLE  magnitude,  INT|LONG|FLOAT|DOUBLE  sign)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         magnitude \n         This parameters magnitude will be used for output attribute \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         sign \n         This parameters sign will be used for output attribute \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;  copySign(5.6d, -3.0d) returns -5.6.", 
            "title": "copySign (Function)"
        }, 
        {
            "location": "/api/4.0.13/#cos-function", 
            "text": "Returns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function.  Syntax  DOUBLE  math:cos( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose cosine value should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;  cos(6d) returns 0.9601702866503661.", 
            "title": "cos (Function)"
        }, 
        {
            "location": "/api/4.0.13/#cosh-function", 
            "text": "Returns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function.  Syntax  DOUBLE  math:cosh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic cosine should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;  cosh (6d) returns 201.7156361224559.", 
            "title": "cosh (Function)"
        }, 
        {
            "location": "/api/4.0.13/#e-function", 
            "text": "Returns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms).  Syntax  DOUBLE  math:e()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;  e() returns 2.7182818284590452354.", 
            "title": "e (Function)"
        }, 
        {
            "location": "/api/4.0.13/#exp-function", 
            "text": "Returns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function.  Syntax  DOUBLE  math:exp( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The power that the Euler's number e should be raised to \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;  exp(10.23) returns 27722.51006805505.", 
            "title": "exp (Function)"
        }, 
        {
            "location": "/api/4.0.13/#floor-function", 
            "text": "This function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer.  Syntax  DOUBLE  math:floor( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose floor value should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;  floor(10.23) returns 10.0.", 
            "title": "floor (Function)"
        }, 
        {
            "location": "/api/4.0.13/#getexponent-function", 
            "text": "Returns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function.  Syntax  INT  math:getExponent( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose unbiased exponent representation should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;  getExponent(60984.1) returns 15.", 
            "title": "getExponent (Function)"
        }, 
        {
            "location": "/api/4.0.13/#hex-function", 
            "text": "This function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1.  Syntax  STRING  math:hex( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hexadecimal representation should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;  hex(200) returns \"c8\".", 
            "title": "hex (Function)"
        }, 
        {
            "location": "/api/4.0.13/#isinfinite-function", 
            "text": "This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise.  Syntax  BOOL  math:isInfinite( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if infinite \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;  isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.", 
            "title": "isInfinite (Function)"
        }, 
        {
            "location": "/api/4.0.13/#isnan-function", 
            "text": "This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise.  Syntax  BOOL  math:isNan( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if it is a number \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;  isNan(java.lang.Math.log(-12d)) returns true.", 
            "title": "isNan (Function)"
        }, 
        {
            "location": "/api/4.0.13/#ln-function", 
            "text": "Returns the natural logarithm (base e) of p1.  Syntax  DOUBLE  math:ln( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose natural logarithm (base e) should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;  ln(11.453) returns 2.438251704415579.", 
            "title": "ln (Function)"
        }, 
        {
            "location": "/api/4.0.13/#log-function", 
            "text": "Returns the logarithm (base=base) of number.  Syntax  DOUBLE  math:log( INT|LONG|FLOAT|DOUBLE  number,  INT|LONG|FLOAT|DOUBLE  base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         number \n         The value of whose base should be changed \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         base \n         The base value of the ouput \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;  log(34, 2f) returns 5.08746284125034.", 
            "title": "log (Function)"
        }, 
        {
            "location": "/api/4.0.13/#log10-function", 
            "text": "Returns the base 10 logarithm of p1.  Syntax  DOUBLE  math:log10( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose base 10 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;  log10(19.234) returns 1.2840696117100832.", 
            "title": "log10 (Function)"
        }, 
        {
            "location": "/api/4.0.13/#log2-function", 
            "text": "Returns the base 2 logarithm of p1.  Syntax  DOUBLE  math:log2( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose base 2 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;  log2(91d) returns 6.507794640198696.", 
            "title": "log2 (Function)"
        }, 
        {
            "location": "/api/4.0.13/#max-function", 
            "text": "Returns the greater value out of p1 and p2.  Syntax  DOUBLE  math:max( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         Value one to be compared in finding largest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         Value two to be compared in finding largest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;  max(123.67d, 91) returns 123.67.", 
            "title": "max (Function)"
        }, 
        {
            "location": "/api/4.0.13/#min-function", 
            "text": "Returns the smaller value out of p1 and p2.  Syntax  DOUBLE  math:min( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         Value one to be compared in finding smallest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         Value two to be compared in finding smallest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;  min(123.67d, 91) returns 91.", 
            "title": "min (Function)"
        }, 
        {
            "location": "/api/4.0.13/#oct-function", 
            "text": "Converts p1 to octal.  Syntax  STRING  math:oct( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose octal representation should be found. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  oct(99l) returns \"143\".", 
            "title": "oct (Function)"
        }, 
        {
            "location": "/api/4.0.13/#parsedouble-function", 
            "text": "Returns str as a double.  Syntax  DOUBLE  math:parseDouble( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a double \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;  parseDouble(\"123\") returns 123.0.", 
            "title": "parseDouble (Function)"
        }, 
        {
            "location": "/api/4.0.13/#parsefloat-function", 
            "text": "Returns str as a float.  Syntax  FLOAT  math:parseFloat( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a float \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;  parseFloat(\"123\") returns 123.0.", 
            "title": "parseFloat (Function)"
        }, 
        {
            "location": "/api/4.0.13/#parseint-function", 
            "text": "Returns str as a int.  Syntax  INT  math:parseInt( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a int \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;  parseInt(\"123\") returns 123.", 
            "title": "parseInt (Function)"
        }, 
        {
            "location": "/api/4.0.13/#parselong-function", 
            "text": "Returns str as a long.  Syntax  LONG  math:parseLong( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a long \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;  parseLong(\"123\") returns 123.", 
            "title": "parseLong (Function)"
        }, 
        {
            "location": "/api/4.0.13/#pi-function", 
            "text": "Returns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter).   Syntax  DOUBLE  math:pi()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;  pi() always returns 3.141592653589793.", 
            "title": "pi (Function)"
        }, 
        {
            "location": "/api/4.0.13/#power-function", 
            "text": "Returns value raised to the power of toPower.  Syntax  DOUBLE  math:power( INT|LONG|FLOAT|DOUBLE  value,  INT|LONG|FLOAT|DOUBLE  to.power)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value that should be raised to the power of 'to.power' input parameter \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         to.power \n         The power that 'value' input parameter should be raised to \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;  power(5.6d, 3.0d) returns 175.61599999999996.", 
            "title": "power (Function)"
        }, 
        {
            "location": "/api/4.0.13/#rand-function", 
            "text": "1.  A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. 2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally.   Syntax  DOUBLE  math:rand( INT|LONG  seed)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         seed \n         An optional seed value that will be used to generate the random number sequence \n         defaultSeed \n         INT LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  A random double value between 0 and 1 will be generated using math:rand()", 
            "title": "rand (Function)"
        }, 
        {
            "location": "/api/4.0.13/#round-function", 
            "text": "Returns the closest integer/long (depending on the input) value to the argument.  Syntax  INT|LONG  math:round( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be rounded to the closest integer/long. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;  round(3252.353) returns 3252.", 
            "title": "round (Function)"
        }, 
        {
            "location": "/api/4.0.13/#signum-function", 
            "text": "If a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function.  Syntax  INT  math:signum( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if positive or negative or otherwise \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;  signum(-6.32d) returns -1.", 
            "title": "signum (Function)"
        }, 
        {
            "location": "/api/4.0.13/#sin-function", 
            "text": "Returns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function.  Syntax  DOUBLE  math:sin( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose sine value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;  sin(6d) returns -0.27941549819892586.", 
            "title": "sin (Function)"
        }, 
        {
            "location": "/api/4.0.13/#sinh-function", 
            "text": "Returns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function.   Syntax  DOUBLE  math:sinh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic sine value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;  sinh(6d) returns 201.71315737027922.", 
            "title": "sinh (Function)"
        }, 
        {
            "location": "/api/4.0.13/#sqrt-function", 
            "text": "Returns the square-root of p1. This function wraps the java.lang.Math.sqrt() function.  Syntax  DOUBLE  math:sqrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose square-root value should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;  sqrt(4d) returns 2.", 
            "title": "sqrt (Function)"
        }, 
        {
            "location": "/api/4.0.13/#tan-function", 
            "text": "Returns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function.  Syntax  DOUBLE  math:tan( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose tan value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;  tan(6d) returns -0.29100619138474915.", 
            "title": "tan (Function)"
        }, 
        {
            "location": "/api/4.0.13/#tanh-function", 
            "text": "Returns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function.  Syntax  DOUBLE  math:tanh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic tangent value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;  tanh(6d) returns 0.9999877116507956.", 
            "title": "tanh (Function)"
        }, 
        {
            "location": "/api/4.0.13/#todegrees-function", 
            "text": "Converts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function.  Syntax  DOUBLE  math:toDegrees( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The radians value that should be converted to degrees \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;  toDegrees(6d) returns 343.77467707849394.", 
            "title": "toDegrees (Function)"
        }, 
        {
            "location": "/api/4.0.13/#toradians-function", 
            "text": "Converts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function.  Syntax  DOUBLE  math:toRadians( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The degrees value that should be converted to radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;  toRadians(6d) returns 0.10471975511965977.", 
            "title": "toRadians (Function)"
        }, 
        {
            "location": "/api/4.0.12/", 
            "text": "API Docs - v4.0.12\n\n\nMath\n\n\npercentile \n(Aggregate Function)\n\n\nReturns the pth percentile value of the arg values.\n\n\n\nSyntax\n\n\nDOUBLE\n math:percentile(\nINT|LONG|FLOAT|DOUBLE\n arg, \nDOUBLE\n p)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe values of which the percentile should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np\n\n        \nEstimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;\n\n\n\n\n\nmath:percentile(temperature, 97.0)\n\n\n\nabs \n(Function)\n\n\nReturns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:abs(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the absolute value should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;\n\n\n\n\n\nBoth abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.\n\n\n\nacos \n(Function)\n\n\nIf -1 \n= p1 \n= 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:acos(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-cosine (inverse cosine) should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;\n\n\n\n\n\nacos(0.5) returns 1.0471975511965979.\n\n\n\nasin \n(Function)\n\n\nIf -1 \n= p1 \n= 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:asin(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-sin (inverse sine) should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;\n\n\n\n\n\nasin(0.5) returns 0.5235987755982989.\n\n\n\natan \n(Function)\n\n\n1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function.\n2. Returns the arc-tangent (inverse tangent) of  p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:atan(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np1\n\n        \nThis optional parameter represents the y coordinate of the (x,y) coordinate pair\n\n        \n0D\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\n\natan(12d, 5d) returns 1.1760052070951352.\n\n\n\nbin \n(Function)\n\n\nReturns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods.\n\n\n\nSyntax\n\n\nSTRING\n math:bin(\nINT|LONG\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to an unsigned integer of base 2\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;\n\n\n\n\n\nbin(9) returns \"1001\".\n\n\n\ncbrt \n(Function)\n\n\nReturns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cbrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose cube-root should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;\n\n\n\n\n\ncbrt(17d) returns 2.5712815906582356.\n\n\n\nceil \n(Function)\n\n\nReturns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ceil(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose ceiling value should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;\n\n\n\n\n\nceil(423.187d) returns 424.0.\n\n\n\nconv \n(Function)\n\n\nConverts a from the fromBase base to the toBase base.\n\n\n\nSyntax\n\n\nSTRING\n math:conv(\nSTRING\n a, \nINT\n from.base, \nINT\n to.base)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \na\n\n        \nThe value whose base should be changed. Input should be as a String\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfrom.base\n\n        \nThe source base of the input parameter 'a'\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.base\n\n        \nThe target base that input parameter 'a' should be converted to\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\n\nconv(\"7f\", 16, 10) returns \"127\".\n\n\n\ncopySign \n(Function)\n\n\nReturns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:copySign(\nINT|LONG|FLOAT|DOUBLE\n magnitude, \nINT|LONG|FLOAT|DOUBLE\n sign)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmagnitude\n\n        \nThis parameters magnitude will be used for output attribute\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsign\n\n        \nThis parameters sign will be used for output attribute\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;\n\n\n\n\n\ncopySign(5.6d, -3.0d) returns -5.6.\n\n\n\ncos \n(Function)\n\n\nReturns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cos(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose cosine value should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\n\ncos(6d) returns 0.9601702866503661.\n\n\n\ncosh \n(Function)\n\n\nReturns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cosh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic cosine should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\n\ncosh (6d) returns 201.7156361224559.\n\n\n\ne \n(Function)\n\n\nReturns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms).\n\n\n\nSyntax\n\n\nDOUBLE\n math:e()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;\n\n\n\n\n\ne() returns 2.7182818284590452354.\n\n\n\nexp \n(Function)\n\n\nReturns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:exp(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe power that the Euler's number e should be raised to\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\n\nexp(10.23) returns 27722.51006805505.\n\n\n\nfloor \n(Function)\n\n\nThis function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer.\n\n\n\nSyntax\n\n\nDOUBLE\n math:floor(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose floor value should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;\n\n\n\n\n\nfloor(10.23) returns 10.0.\n\n\n\ngetExponent \n(Function)\n\n\nReturns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function.\n\n\n\nSyntax\n\n\nINT\n math:getExponent(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose unbiased exponent representation should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\n\ngetExponent(60984.1) returns 15.\n\n\n\nhex \n(Function)\n\n\nThis function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1.\n\n\n\nSyntax\n\n\nSTRING\n math:hex(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hexadecimal representation should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;\n\n\n\n\n\nhex(200) returns \"c8\".\n\n\n\nisInfinite \n(Function)\n\n\nThis function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isInfinite(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if infinite\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;\n\n\n\n\n\nisInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.\n\n\n\nisNan \n(Function)\n\n\nThis function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isNan(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if it is a number\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;\n\n\n\n\n\nisNan(java.lang.Math.log(-12d)) returns true.\n\n\n\nln \n(Function)\n\n\nReturns the natural logarithm (base e) of p1.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ln(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose natural logarithm (base e) should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nln(11.453) returns 2.438251704415579.\n\n\n\nlog \n(Function)\n\n\nReturns the logarithm (base=base) of number.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log(\nINT|LONG|FLOAT|DOUBLE\n number, \nINT|LONG|FLOAT|DOUBLE\n base)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nnumber\n\n        \nThe value of whose base should be changed\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbase\n\n        \nThe base value of the ouput\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;\n\n\n\n\n\nlog(34, 2f) returns 5.08746284125034.\n\n\n\nlog10 \n(Function)\n\n\nReturns the base 10 logarithm of p1.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log10(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose base 10 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nlog10(19.234) returns 1.2840696117100832.\n\n\n\nlog2 \n(Function)\n\n\nReturns the base 2 logarithm of p1.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log2(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose base 2 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nlog2(91d) returns 6.507794640198696.\n\n\n\nmax \n(Function)\n\n\nReturns the greater value out of p1 and p2.\n\n\n\nSyntax\n\n\nDOUBLE\n math:max(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nValue one to be compared in finding largest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nValue two to be compared in finding largest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;\n\n\n\n\n\nmax(123.67d, 91) returns 123.67.\n\n\n\nmin \n(Function)\n\n\nReturns the smaller value out of p1 and p2.\n\n\n\nSyntax\n\n\nDOUBLE\n math:min(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nValue one to be compared in finding smallest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nValue two to be compared in finding smallest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;\n\n\n\n\n\nmin(123.67d, 91) returns 91.\n\n\n\noct \n(Function)\n\n\nConverts p1 to octal.\n\n\n\nSyntax\n\n\nSTRING\n math:oct(\nINT|LONG\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose octal representation should be found.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\n\noct(99l) returns \"143\".\n\n\n\nparseDouble \n(Function)\n\n\nReturns str as a double.\n\n\n\nSyntax\n\n\nDOUBLE\n math:parseDouble(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a double\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseDouble(\"123\") returns 123.0.\n\n\n\nparseFloat \n(Function)\n\n\nReturns str as a float.\n\n\n\nSyntax\n\n\nFLOAT\n math:parseFloat(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a float\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseFloat(\"123\") returns 123.0.\n\n\n\nparseInt \n(Function)\n\n\nReturns str as a int.\n\n\n\nSyntax\n\n\nINT\n math:parseInt(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a int\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseInt(\"123\") returns 123.\n\n\n\nparseLong \n(Function)\n\n\nReturns str as a long.\n\n\n\nSyntax\n\n\nLONG\n math:parseLong(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a long\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseLong(\"123\") returns 123.\n\n\n\npi \n(Function)\n\n\nReturns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter). \n\n\n\nSyntax\n\n\nDOUBLE\n math:pi()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;\n\n\n\n\n\npi() always returns 3.141592653589793.\n\n\n\npower \n(Function)\n\n\nReturns value raised to the power of toPower.\n\n\n\nSyntax\n\n\nDOUBLE\n math:power(\nINT|LONG|FLOAT|DOUBLE\n value, \nINT|LONG|FLOAT|DOUBLE\n to.power)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value that should be raised to the power of 'to.power' input parameter\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.power\n\n        \nThe power that 'value' input parameter should be raised to\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;\n\n\n\n\n\npower(5.6d, 3.0d) returns 175.61599999999996.\n\n\n\nrand \n(Function)\n\n\n1.  A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally.\n2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. \n\n\n\nSyntax\n\n\nDOUBLE\n math:rand(\nINT|LONG\n seed)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nseed\n\n        \nAn optional seed value that will be used to generate the random number sequence\n\n        \ndefaultSeed\n\n        \nINT\nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\n\nA random double value between 0 and 1 will be generated using math:rand()\n\n\n\nround \n(Function)\n\n\nReturns the closest integer/long (depending on the input) value to the argument.\n\n\n\nSyntax\n\n\nINT|LONG\n math:round(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be rounded to the closest integer/long.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;\n\n\n\n\n\nround(3252.353) returns 3252.\n\n\n\nsignum \n(Function)\n\n\nIf a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function.\n\n\n\nSyntax\n\n\nINT\n math:signum(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if positive or negative or otherwise\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;\n\n\n\n\n\nsignum(-6.32d) returns -1.\n\n\n\nsin \n(Function)\n\n\nReturns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sin(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose sine value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;\n\n\n\n\n\nsin(6d) returns -0.27941549819892586.\n\n\n\nsinh \n(Function)\n\n\nReturns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function. \n\n\n\nSyntax\n\n\nDOUBLE\n math:sinh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic sine value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;\n\n\n\n\n\nsinh(6d) returns 201.71315737027922.\n\n\n\nsqrt \n(Function)\n\n\nReturns the square-root of p1. This function wraps the java.lang.Math.sqrt() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sqrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose square-root value should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;\n\n\n\n\n\nsqrt(4d) returns 2.\n\n\n\ntan \n(Function)\n\n\nReturns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tan(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose tan value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;\n\n\n\n\n\ntan(6d) returns -0.29100619138474915.\n\n\n\ntanh \n(Function)\n\n\nReturns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tanh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic tangent value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;\n\n\n\n\n\ntanh(6d) returns 0.9999877116507956.\n\n\n\ntoDegrees \n(Function)\n\n\nConverts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toDegrees(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe radians value that should be converted to degrees\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;\n\n\n\n\n\ntoDegrees(6d) returns 343.77467707849394.\n\n\n\ntoRadians \n(Function)\n\n\nConverts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toRadians(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe degrees value that should be converted to radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;\n\n\n\n\n\ntoRadians(6d) returns 0.10471975511965977.", 
            "title": "4.0.12"
        }, 
        {
            "location": "/api/4.0.12/#api-docs-v4012", 
            "text": "", 
            "title": "API Docs - v4.0.12"
        }, 
        {
            "location": "/api/4.0.12/#math", 
            "text": "", 
            "title": "Math"
        }, 
        {
            "location": "/api/4.0.12/#percentile-aggregate-function", 
            "text": "Returns the pth percentile value of the arg values.  Syntax  DOUBLE  math:percentile( INT|LONG|FLOAT|DOUBLE  arg,  DOUBLE  p)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The values of which the percentile should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p \n         Estimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100 \n         \n         DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;  math:percentile(temperature, 97.0)", 
            "title": "percentile (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.12/#abs-function", 
            "text": "Returns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function.  Syntax  DOUBLE  math:abs( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the absolute value should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;  Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.", 
            "title": "abs (Function)"
        }, 
        {
            "location": "/api/4.0.12/#acos-function", 
            "text": "If -1  = p1  = 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function.  Syntax  DOUBLE  math:acos( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-cosine (inverse cosine) should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;  acos(0.5) returns 1.0471975511965979.", 
            "title": "acos (Function)"
        }, 
        {
            "location": "/api/4.0.12/#asin-function", 
            "text": "If -1  = p1  = 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function.  Syntax  DOUBLE  math:asin( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-sin (inverse sine) should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;  asin(0.5) returns 0.5235987755982989.", 
            "title": "asin (Function)"
        }, 
        {
            "location": "/api/4.0.12/#atan-function", 
            "text": "1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function. 2. Returns the arc-tangent (inverse tangent) of  p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function.  Syntax  DOUBLE  math:atan( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p1 \n         This optional parameter represents the y coordinate of the (x,y) coordinate pair \n         0D \n         INT LONG FLOAT DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;  atan(12d, 5d) returns 1.1760052070951352.", 
            "title": "atan (Function)"
        }, 
        {
            "location": "/api/4.0.12/#bin-function", 
            "text": "Returns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods.  Syntax  STRING  math:bin( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to an unsigned integer of base 2 \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;  bin(9) returns \"1001\".", 
            "title": "bin (Function)"
        }, 
        {
            "location": "/api/4.0.12/#cbrt-function", 
            "text": "Returns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function.  Syntax  DOUBLE  math:cbrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose cube-root should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;  cbrt(17d) returns 2.5712815906582356.", 
            "title": "cbrt (Function)"
        }, 
        {
            "location": "/api/4.0.12/#ceil-function", 
            "text": "Returns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method.  Syntax  DOUBLE  math:ceil( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose ceiling value should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;  ceil(423.187d) returns 424.0.", 
            "title": "ceil (Function)"
        }, 
        {
            "location": "/api/4.0.12/#conv-function", 
            "text": "Converts a from the fromBase base to the toBase base.  Syntax  STRING  math:conv( STRING  a,  INT  from.base,  INT  to.base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         a \n         The value whose base should be changed. Input should be as a String \n         \n         STRING \n         No \n         No \n     \n     \n         from.base \n         The source base of the input parameter 'a' \n         \n         INT \n         No \n         No \n     \n     \n         to.base \n         The target base that input parameter 'a' should be converted to \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;  conv(\"7f\", 16, 10) returns \"127\".", 
            "title": "conv (Function)"
        }, 
        {
            "location": "/api/4.0.12/#copysign-function", 
            "text": "Returns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function.  Syntax  DOUBLE  math:copySign( INT|LONG|FLOAT|DOUBLE  magnitude,  INT|LONG|FLOAT|DOUBLE  sign)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         magnitude \n         This parameters magnitude will be used for output attribute \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         sign \n         This parameters sign will be used for output attribute \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;  copySign(5.6d, -3.0d) returns -5.6.", 
            "title": "copySign (Function)"
        }, 
        {
            "location": "/api/4.0.12/#cos-function", 
            "text": "Returns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function.  Syntax  DOUBLE  math:cos( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose cosine value should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;  cos(6d) returns 0.9601702866503661.", 
            "title": "cos (Function)"
        }, 
        {
            "location": "/api/4.0.12/#cosh-function", 
            "text": "Returns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function.  Syntax  DOUBLE  math:cosh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic cosine should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;  cosh (6d) returns 201.7156361224559.", 
            "title": "cosh (Function)"
        }, 
        {
            "location": "/api/4.0.12/#e-function", 
            "text": "Returns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms).  Syntax  DOUBLE  math:e()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;  e() returns 2.7182818284590452354.", 
            "title": "e (Function)"
        }, 
        {
            "location": "/api/4.0.12/#exp-function", 
            "text": "Returns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function.  Syntax  DOUBLE  math:exp( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The power that the Euler's number e should be raised to \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;  exp(10.23) returns 27722.51006805505.", 
            "title": "exp (Function)"
        }, 
        {
            "location": "/api/4.0.12/#floor-function", 
            "text": "This function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer.  Syntax  DOUBLE  math:floor( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose floor value should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;  floor(10.23) returns 10.0.", 
            "title": "floor (Function)"
        }, 
        {
            "location": "/api/4.0.12/#getexponent-function", 
            "text": "Returns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function.  Syntax  INT  math:getExponent( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose unbiased exponent representation should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;  getExponent(60984.1) returns 15.", 
            "title": "getExponent (Function)"
        }, 
        {
            "location": "/api/4.0.12/#hex-function", 
            "text": "This function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1.  Syntax  STRING  math:hex( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hexadecimal representation should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;  hex(200) returns \"c8\".", 
            "title": "hex (Function)"
        }, 
        {
            "location": "/api/4.0.12/#isinfinite-function", 
            "text": "This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise.  Syntax  BOOL  math:isInfinite( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if infinite \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;  isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.", 
            "title": "isInfinite (Function)"
        }, 
        {
            "location": "/api/4.0.12/#isnan-function", 
            "text": "This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise.  Syntax  BOOL  math:isNan( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if it is a number \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;  isNan(java.lang.Math.log(-12d)) returns true.", 
            "title": "isNan (Function)"
        }, 
        {
            "location": "/api/4.0.12/#ln-function", 
            "text": "Returns the natural logarithm (base e) of p1.  Syntax  DOUBLE  math:ln( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose natural logarithm (base e) should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;  ln(11.453) returns 2.438251704415579.", 
            "title": "ln (Function)"
        }, 
        {
            "location": "/api/4.0.12/#log-function", 
            "text": "Returns the logarithm (base=base) of number.  Syntax  DOUBLE  math:log( INT|LONG|FLOAT|DOUBLE  number,  INT|LONG|FLOAT|DOUBLE  base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         number \n         The value of whose base should be changed \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         base \n         The base value of the ouput \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;  log(34, 2f) returns 5.08746284125034.", 
            "title": "log (Function)"
        }, 
        {
            "location": "/api/4.0.12/#log10-function", 
            "text": "Returns the base 10 logarithm of p1.  Syntax  DOUBLE  math:log10( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose base 10 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;  log10(19.234) returns 1.2840696117100832.", 
            "title": "log10 (Function)"
        }, 
        {
            "location": "/api/4.0.12/#log2-function", 
            "text": "Returns the base 2 logarithm of p1.  Syntax  DOUBLE  math:log2( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose base 2 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;  log2(91d) returns 6.507794640198696.", 
            "title": "log2 (Function)"
        }, 
        {
            "location": "/api/4.0.12/#max-function", 
            "text": "Returns the greater value out of p1 and p2.  Syntax  DOUBLE  math:max( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         Value one to be compared in finding largest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         Value two to be compared in finding largest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;  max(123.67d, 91) returns 123.67.", 
            "title": "max (Function)"
        }, 
        {
            "location": "/api/4.0.12/#min-function", 
            "text": "Returns the smaller value out of p1 and p2.  Syntax  DOUBLE  math:min( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         Value one to be compared in finding smallest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         Value two to be compared in finding smallest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;  min(123.67d, 91) returns 91.", 
            "title": "min (Function)"
        }, 
        {
            "location": "/api/4.0.12/#oct-function", 
            "text": "Converts p1 to octal.  Syntax  STRING  math:oct( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose octal representation should be found. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  oct(99l) returns \"143\".", 
            "title": "oct (Function)"
        }, 
        {
            "location": "/api/4.0.12/#parsedouble-function", 
            "text": "Returns str as a double.  Syntax  DOUBLE  math:parseDouble( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a double \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;  parseDouble(\"123\") returns 123.0.", 
            "title": "parseDouble (Function)"
        }, 
        {
            "location": "/api/4.0.12/#parsefloat-function", 
            "text": "Returns str as a float.  Syntax  FLOAT  math:parseFloat( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a float \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;  parseFloat(\"123\") returns 123.0.", 
            "title": "parseFloat (Function)"
        }, 
        {
            "location": "/api/4.0.12/#parseint-function", 
            "text": "Returns str as a int.  Syntax  INT  math:parseInt( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a int \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;  parseInt(\"123\") returns 123.", 
            "title": "parseInt (Function)"
        }, 
        {
            "location": "/api/4.0.12/#parselong-function", 
            "text": "Returns str as a long.  Syntax  LONG  math:parseLong( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a long \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;  parseLong(\"123\") returns 123.", 
            "title": "parseLong (Function)"
        }, 
        {
            "location": "/api/4.0.12/#pi-function", 
            "text": "Returns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter).   Syntax  DOUBLE  math:pi()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;  pi() always returns 3.141592653589793.", 
            "title": "pi (Function)"
        }, 
        {
            "location": "/api/4.0.12/#power-function", 
            "text": "Returns value raised to the power of toPower.  Syntax  DOUBLE  math:power( INT|LONG|FLOAT|DOUBLE  value,  INT|LONG|FLOAT|DOUBLE  to.power)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value that should be raised to the power of 'to.power' input parameter \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         to.power \n         The power that 'value' input parameter should be raised to \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;  power(5.6d, 3.0d) returns 175.61599999999996.", 
            "title": "power (Function)"
        }, 
        {
            "location": "/api/4.0.12/#rand-function", 
            "text": "1.  A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. 2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally.   Syntax  DOUBLE  math:rand( INT|LONG  seed)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         seed \n         An optional seed value that will be used to generate the random number sequence \n         defaultSeed \n         INT LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  A random double value between 0 and 1 will be generated using math:rand()", 
            "title": "rand (Function)"
        }, 
        {
            "location": "/api/4.0.12/#round-function", 
            "text": "Returns the closest integer/long (depending on the input) value to the argument.  Syntax  INT|LONG  math:round( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be rounded to the closest integer/long. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;  round(3252.353) returns 3252.", 
            "title": "round (Function)"
        }, 
        {
            "location": "/api/4.0.12/#signum-function", 
            "text": "If a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function.  Syntax  INT  math:signum( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if positive or negative or otherwise \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;  signum(-6.32d) returns -1.", 
            "title": "signum (Function)"
        }, 
        {
            "location": "/api/4.0.12/#sin-function", 
            "text": "Returns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function.  Syntax  DOUBLE  math:sin( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose sine value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;  sin(6d) returns -0.27941549819892586.", 
            "title": "sin (Function)"
        }, 
        {
            "location": "/api/4.0.12/#sinh-function", 
            "text": "Returns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function.   Syntax  DOUBLE  math:sinh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic sine value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;  sinh(6d) returns 201.71315737027922.", 
            "title": "sinh (Function)"
        }, 
        {
            "location": "/api/4.0.12/#sqrt-function", 
            "text": "Returns the square-root of p1. This function wraps the java.lang.Math.sqrt() function.  Syntax  DOUBLE  math:sqrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose square-root value should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;  sqrt(4d) returns 2.", 
            "title": "sqrt (Function)"
        }, 
        {
            "location": "/api/4.0.12/#tan-function", 
            "text": "Returns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function.  Syntax  DOUBLE  math:tan( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose tan value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;  tan(6d) returns -0.29100619138474915.", 
            "title": "tan (Function)"
        }, 
        {
            "location": "/api/4.0.12/#tanh-function", 
            "text": "Returns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function.  Syntax  DOUBLE  math:tanh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic tangent value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;  tanh(6d) returns 0.9999877116507956.", 
            "title": "tanh (Function)"
        }, 
        {
            "location": "/api/4.0.12/#todegrees-function", 
            "text": "Converts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function.  Syntax  DOUBLE  math:toDegrees( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The radians value that should be converted to degrees \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;  toDegrees(6d) returns 343.77467707849394.", 
            "title": "toDegrees (Function)"
        }, 
        {
            "location": "/api/4.0.12/#toradians-function", 
            "text": "Converts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function.  Syntax  DOUBLE  math:toRadians( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The degrees value that should be converted to radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;  toRadians(6d) returns 0.10471975511965977.", 
            "title": "toRadians (Function)"
        }, 
        {
            "location": "/api/4.0.11/", 
            "text": "API Docs - v4.0.11\n\n\nMath\n\n\npercentile \n(Aggregate Function)\n\n\nReturns the pth percentile value of the arg values.\n\n\n\nSyntax\n\n\nDOUBLE\n math:percentile(\nINT|LONG|FLOAT|DOUBLE\n arg, \nDOUBLE\n p)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe values of which the percentile should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np\n\n        \nEstimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;\n\n\n\n\n\nmath:percentile(temperature, 97.0)\n\n\n\nabs \n(Function)\n\n\nReturns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:abs(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the absolute value should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;\n\n\n\n\n\nBoth abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.\n\n\n\nacos \n(Function)\n\n\nIf -1 \n= p1 \n= 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:acos(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-cosine (inverse cosine) should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;\n\n\n\n\n\nacos(0.5) returns 1.0471975511965979.\n\n\n\nasin \n(Function)\n\n\nIf -1 \n= p1 \n= 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:asin(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-sin (inverse sine) should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;\n\n\n\n\n\nasin(0.5) returns 0.5235987755982989.\n\n\n\natan \n(Function)\n\n\n1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function.\n2. Returns the arc-tangent (inverse tangent) of  p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:atan(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np1\n\n        \nThis optional parameter represents the y coordinate of the (x,y) coordinate pair\n\n        \n0D\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\n\natan(12d, 5d) returns 1.1760052070951352.\n\n\n\nbin \n(Function)\n\n\nReturns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods.\n\n\n\nSyntax\n\n\nSTRING\n math:bin(\nINT|LONG\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to an unsigned integer of base 2\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;\n\n\n\n\n\nbin(9) returns \"1001\".\n\n\n\ncbrt \n(Function)\n\n\nReturns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cbrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose cube-root should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;\n\n\n\n\n\ncbrt(17d) returns 2.5712815906582356.\n\n\n\nceil \n(Function)\n\n\nReturns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ceil(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose ceiling value should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;\n\n\n\n\n\nceil(423.187d) returns 424.0.\n\n\n\nconv \n(Function)\n\n\nConverts a from the fromBase base to the toBase base.\n\n\n\nSyntax\n\n\nSTRING\n math:conv(\nSTRING\n a, \nINT\n from.base, \nINT\n to.base)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \na\n\n        \nThe value whose base should be changed. Input should be as a String\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfrom.base\n\n        \nThe source base of the input parameter 'a'\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.base\n\n        \nThe target base that input parameter 'a' should be converted to\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\n\nconv(\"7f\", 16, 10) returns \"127\".\n\n\n\ncopySign \n(Function)\n\n\nReturns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:copySign(\nINT|LONG|FLOAT|DOUBLE\n magnitude, \nINT|LONG|FLOAT|DOUBLE\n sign)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmagnitude\n\n        \nThis parameters magnitude will be used for output attribute\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsign\n\n        \nThis parameters sign will be used for output attribute\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;\n\n\n\n\n\ncopySign(5.6d, -3.0d) returns -5.6.\n\n\n\ncos \n(Function)\n\n\nReturns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cos(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose cosine value should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\n\ncos(6d) returns 0.9601702866503661.\n\n\n\ncosh \n(Function)\n\n\nReturns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cosh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic cosine should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\n\ncosh (6d) returns 201.7156361224559.\n\n\n\ne \n(Function)\n\n\nReturns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms).\n\n\n\nSyntax\n\n\nDOUBLE\n math:e()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;\n\n\n\n\n\ne() returns 2.7182818284590452354.\n\n\n\nexp \n(Function)\n\n\nReturns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:exp(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe power that the Euler's number e should be raised to\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\n\nexp(10.23) returns 27722.51006805505.\n\n\n\nfloor \n(Function)\n\n\nThis function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer.\n\n\n\nSyntax\n\n\nDOUBLE\n math:floor(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose floor value should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;\n\n\n\n\n\nfloor(10.23) returns 10.0.\n\n\n\ngetExponent \n(Function)\n\n\nReturns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function.\n\n\n\nSyntax\n\n\nINT\n math:getExponent(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose unbiased exponent representation should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\n\ngetExponent(60984.1) returns 15.\n\n\n\nhex \n(Function)\n\n\nThis function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1.\n\n\n\nSyntax\n\n\nSTRING\n math:hex(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hexadecimal representation should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;\n\n\n\n\n\nhex(200) returns \"c8\".\n\n\n\nisInfinite \n(Function)\n\n\nThis function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isInfinite(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if infinite\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;\n\n\n\n\n\nisInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.\n\n\n\nisNan \n(Function)\n\n\nThis function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isNan(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if it is a number\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;\n\n\n\n\n\nisNan(java.lang.Math.log(-12d)) returns true.\n\n\n\nln \n(Function)\n\n\nReturns the natural logarithm (base e) of p1.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ln(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose natural logarithm (base e) should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nln(11.453) returns 2.438251704415579.\n\n\n\nlog \n(Function)\n\n\nReturns the logarithm (base=base) of number.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log(\nINT|LONG|FLOAT|DOUBLE\n number, \nINT|LONG|FLOAT|DOUBLE\n base)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nnumber\n\n        \nThe value of whose base should be changed\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbase\n\n        \nThe base value of the ouput\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;\n\n\n\n\n\nlog(34, 2f) returns 5.08746284125034.\n\n\n\nlog10 \n(Function)\n\n\nReturns the base 10 logarithm of p1.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log10(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose base 10 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nlog10(19.234) returns 1.2840696117100832.\n\n\n\nlog2 \n(Function)\n\n\nReturns the base 2 logarithm of p1.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log2(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose base 2 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nlog2(91d) returns 6.507794640198696.\n\n\n\nmax \n(Function)\n\n\nReturns the greater value out of p1 and p2.\n\n\n\nSyntax\n\n\nDOUBLE\n math:max(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nValue one to be compared in finding largest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nValue two to be compared in finding largest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;\n\n\n\n\n\nmax(123.67d, 91) returns 123.67.\n\n\n\nmin \n(Function)\n\n\nReturns the smaller value out of p1 and p2.\n\n\n\nSyntax\n\n\nDOUBLE\n math:min(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nValue one to be compared in finding smallest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nValue two to be compared in finding smallest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;\n\n\n\n\n\nmin(123.67d, 91) returns 91.\n\n\n\noct \n(Function)\n\n\nConverts p1 to octal.\n\n\n\nSyntax\n\n\nSTRING\n math:oct(\nINT|LONG\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose octal representation should be found.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\n\noct(99l) returns \"143\".\n\n\n\nparseDouble \n(Function)\n\n\nReturns str as a double.\n\n\n\nSyntax\n\n\nDOUBLE\n math:parseDouble(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a double\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseDouble(\"123\") returns 123.0.\n\n\n\nparseFloat \n(Function)\n\n\nReturns str as a float.\n\n\n\nSyntax\n\n\nFLOAT\n math:parseFloat(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a float\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseFloat(\"123\") returns 123.0.\n\n\n\nparseInt \n(Function)\n\n\nReturns str as a int.\n\n\n\nSyntax\n\n\nINT\n math:parseInt(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a int\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseInt(\"123\") returns 123.\n\n\n\nparseLong \n(Function)\n\n\nReturns str as a long.\n\n\n\nSyntax\n\n\nLONG\n math:parseLong(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a long\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseLong(\"123\") returns 123.\n\n\n\npi \n(Function)\n\n\nReturns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter). \n\n\n\nSyntax\n\n\nDOUBLE\n math:pi()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;\n\n\n\n\n\npi() always returns 3.141592653589793.\n\n\n\npower \n(Function)\n\n\nReturns value raised to the power of toPower.\n\n\n\nSyntax\n\n\nDOUBLE\n math:power(\nINT|LONG|FLOAT|DOUBLE\n value, \nINT|LONG|FLOAT|DOUBLE\n to.power)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value that should be raised to the power of 'to.power' input parameter\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.power\n\n        \nThe power that 'value' input parameter should be raised to\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;\n\n\n\n\n\npower(5.6d, 3.0d) returns 175.61599999999996.\n\n\n\nrand \n(Function)\n\n\n1.  A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally.\n2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. \n\n\n\nSyntax\n\n\nDOUBLE\n math:rand(\nINT|LONG\n seed)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nseed\n\n        \nAn optional seed value that will be used to generate the random number sequence\n\n        \ndefaultSeed\n\n        \nINT\nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\n\nA random double value between 0 and 1 will be generated using math:rand()\n\n\n\nround \n(Function)\n\n\nReturns the closest integer/long (depending on the input) value to the argument.\n\n\n\nSyntax\n\n\nINT|LONG\n math:round(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be rounded to the closest integer/long.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;\n\n\n\n\n\nround(3252.353) returns 3252.\n\n\n\nsignum \n(Function)\n\n\nIf a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function.\n\n\n\nSyntax\n\n\nINT\n math:signum(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if positive or negative or otherwise\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;\n\n\n\n\n\nsignum(-6.32d) returns -1.\n\n\n\nsin \n(Function)\n\n\nReturns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sin(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose sine value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;\n\n\n\n\n\nsin(6d) returns -0.27941549819892586.\n\n\n\nsinh \n(Function)\n\n\nReturns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function. \n\n\n\nSyntax\n\n\nDOUBLE\n math:sinh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic sine value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;\n\n\n\n\n\nsinh(6d) returns 201.71315737027922.\n\n\n\nsqrt \n(Function)\n\n\nReturns the square-root of p1. This function wraps the java.lang.Math.sqrt() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sqrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose square-root value should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;\n\n\n\n\n\nsqrt(4d) returns 2.\n\n\n\ntan \n(Function)\n\n\nReturns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tan(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose tan value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;\n\n\n\n\n\ntan(6d) returns -0.29100619138474915.\n\n\n\ntanh \n(Function)\n\n\nReturns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tanh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic tangent value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;\n\n\n\n\n\ntanh(6d) returns 0.9999877116507956.\n\n\n\ntoDegrees \n(Function)\n\n\nConverts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toDegrees(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe radians value that should be converted to degrees\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;\n\n\n\n\n\ntoDegrees(6d) returns 343.77467707849394.\n\n\n\ntoRadians \n(Function)\n\n\nConverts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toRadians(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe degrees value that should be converted to radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;\n\n\n\n\n\ntoRadians(6d) returns 0.10471975511965977.", 
            "title": "4.0.11"
        }, 
        {
            "location": "/api/4.0.11/#api-docs-v4011", 
            "text": "", 
            "title": "API Docs - v4.0.11"
        }, 
        {
            "location": "/api/4.0.11/#math", 
            "text": "", 
            "title": "Math"
        }, 
        {
            "location": "/api/4.0.11/#percentile-aggregate-function", 
            "text": "Returns the pth percentile value of the arg values.  Syntax  DOUBLE  math:percentile( INT|LONG|FLOAT|DOUBLE  arg,  DOUBLE  p)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The values of which the percentile should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p \n         Estimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100 \n         \n         DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;  math:percentile(temperature, 97.0)", 
            "title": "percentile (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.11/#abs-function", 
            "text": "Returns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function.  Syntax  DOUBLE  math:abs( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the absolute value should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;  Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.", 
            "title": "abs (Function)"
        }, 
        {
            "location": "/api/4.0.11/#acos-function", 
            "text": "If -1  = p1  = 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function.  Syntax  DOUBLE  math:acos( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-cosine (inverse cosine) should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;  acos(0.5) returns 1.0471975511965979.", 
            "title": "acos (Function)"
        }, 
        {
            "location": "/api/4.0.11/#asin-function", 
            "text": "If -1  = p1  = 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function.  Syntax  DOUBLE  math:asin( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-sin (inverse sine) should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;  asin(0.5) returns 0.5235987755982989.", 
            "title": "asin (Function)"
        }, 
        {
            "location": "/api/4.0.11/#atan-function", 
            "text": "1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function. 2. Returns the arc-tangent (inverse tangent) of  p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function.  Syntax  DOUBLE  math:atan( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p1 \n         This optional parameter represents the y coordinate of the (x,y) coordinate pair \n         0D \n         INT LONG FLOAT DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;  atan(12d, 5d) returns 1.1760052070951352.", 
            "title": "atan (Function)"
        }, 
        {
            "location": "/api/4.0.11/#bin-function", 
            "text": "Returns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods.  Syntax  STRING  math:bin( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to an unsigned integer of base 2 \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;  bin(9) returns \"1001\".", 
            "title": "bin (Function)"
        }, 
        {
            "location": "/api/4.0.11/#cbrt-function", 
            "text": "Returns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function.  Syntax  DOUBLE  math:cbrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose cube-root should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;  cbrt(17d) returns 2.5712815906582356.", 
            "title": "cbrt (Function)"
        }, 
        {
            "location": "/api/4.0.11/#ceil-function", 
            "text": "Returns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method.  Syntax  DOUBLE  math:ceil( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose ceiling value should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;  ceil(423.187d) returns 424.0.", 
            "title": "ceil (Function)"
        }, 
        {
            "location": "/api/4.0.11/#conv-function", 
            "text": "Converts a from the fromBase base to the toBase base.  Syntax  STRING  math:conv( STRING  a,  INT  from.base,  INT  to.base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         a \n         The value whose base should be changed. Input should be as a String \n         \n         STRING \n         No \n         No \n     \n     \n         from.base \n         The source base of the input parameter 'a' \n         \n         INT \n         No \n         No \n     \n     \n         to.base \n         The target base that input parameter 'a' should be converted to \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;  conv(\"7f\", 16, 10) returns \"127\".", 
            "title": "conv (Function)"
        }, 
        {
            "location": "/api/4.0.11/#copysign-function", 
            "text": "Returns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function.  Syntax  DOUBLE  math:copySign( INT|LONG|FLOAT|DOUBLE  magnitude,  INT|LONG|FLOAT|DOUBLE  sign)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         magnitude \n         This parameters magnitude will be used for output attribute \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         sign \n         This parameters sign will be used for output attribute \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;  copySign(5.6d, -3.0d) returns -5.6.", 
            "title": "copySign (Function)"
        }, 
        {
            "location": "/api/4.0.11/#cos-function", 
            "text": "Returns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function.  Syntax  DOUBLE  math:cos( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose cosine value should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;  cos(6d) returns 0.9601702866503661.", 
            "title": "cos (Function)"
        }, 
        {
            "location": "/api/4.0.11/#cosh-function", 
            "text": "Returns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function.  Syntax  DOUBLE  math:cosh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic cosine should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;  cosh (6d) returns 201.7156361224559.", 
            "title": "cosh (Function)"
        }, 
        {
            "location": "/api/4.0.11/#e-function", 
            "text": "Returns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms).  Syntax  DOUBLE  math:e()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;  e() returns 2.7182818284590452354.", 
            "title": "e (Function)"
        }, 
        {
            "location": "/api/4.0.11/#exp-function", 
            "text": "Returns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function.  Syntax  DOUBLE  math:exp( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The power that the Euler's number e should be raised to \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;  exp(10.23) returns 27722.51006805505.", 
            "title": "exp (Function)"
        }, 
        {
            "location": "/api/4.0.11/#floor-function", 
            "text": "This function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer.  Syntax  DOUBLE  math:floor( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose floor value should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;  floor(10.23) returns 10.0.", 
            "title": "floor (Function)"
        }, 
        {
            "location": "/api/4.0.11/#getexponent-function", 
            "text": "Returns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function.  Syntax  INT  math:getExponent( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose unbiased exponent representation should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;  getExponent(60984.1) returns 15.", 
            "title": "getExponent (Function)"
        }, 
        {
            "location": "/api/4.0.11/#hex-function", 
            "text": "This function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1.  Syntax  STRING  math:hex( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hexadecimal representation should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;  hex(200) returns \"c8\".", 
            "title": "hex (Function)"
        }, 
        {
            "location": "/api/4.0.11/#isinfinite-function", 
            "text": "This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise.  Syntax  BOOL  math:isInfinite( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if infinite \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;  isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.", 
            "title": "isInfinite (Function)"
        }, 
        {
            "location": "/api/4.0.11/#isnan-function", 
            "text": "This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise.  Syntax  BOOL  math:isNan( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if it is a number \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;  isNan(java.lang.Math.log(-12d)) returns true.", 
            "title": "isNan (Function)"
        }, 
        {
            "location": "/api/4.0.11/#ln-function", 
            "text": "Returns the natural logarithm (base e) of p1.  Syntax  DOUBLE  math:ln( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose natural logarithm (base e) should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;  ln(11.453) returns 2.438251704415579.", 
            "title": "ln (Function)"
        }, 
        {
            "location": "/api/4.0.11/#log-function", 
            "text": "Returns the logarithm (base=base) of number.  Syntax  DOUBLE  math:log( INT|LONG|FLOAT|DOUBLE  number,  INT|LONG|FLOAT|DOUBLE  base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         number \n         The value of whose base should be changed \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         base \n         The base value of the ouput \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;  log(34, 2f) returns 5.08746284125034.", 
            "title": "log (Function)"
        }, 
        {
            "location": "/api/4.0.11/#log10-function", 
            "text": "Returns the base 10 logarithm of p1.  Syntax  DOUBLE  math:log10( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose base 10 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;  log10(19.234) returns 1.2840696117100832.", 
            "title": "log10 (Function)"
        }, 
        {
            "location": "/api/4.0.11/#log2-function", 
            "text": "Returns the base 2 logarithm of p1.  Syntax  DOUBLE  math:log2( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose base 2 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;  log2(91d) returns 6.507794640198696.", 
            "title": "log2 (Function)"
        }, 
        {
            "location": "/api/4.0.11/#max-function", 
            "text": "Returns the greater value out of p1 and p2.  Syntax  DOUBLE  math:max( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         Value one to be compared in finding largest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         Value two to be compared in finding largest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;  max(123.67d, 91) returns 123.67.", 
            "title": "max (Function)"
        }, 
        {
            "location": "/api/4.0.11/#min-function", 
            "text": "Returns the smaller value out of p1 and p2.  Syntax  DOUBLE  math:min( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         Value one to be compared in finding smallest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         Value two to be compared in finding smallest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;  min(123.67d, 91) returns 91.", 
            "title": "min (Function)"
        }, 
        {
            "location": "/api/4.0.11/#oct-function", 
            "text": "Converts p1 to octal.  Syntax  STRING  math:oct( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose octal representation should be found. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  oct(99l) returns \"143\".", 
            "title": "oct (Function)"
        }, 
        {
            "location": "/api/4.0.11/#parsedouble-function", 
            "text": "Returns str as a double.  Syntax  DOUBLE  math:parseDouble( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a double \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;  parseDouble(\"123\") returns 123.0.", 
            "title": "parseDouble (Function)"
        }, 
        {
            "location": "/api/4.0.11/#parsefloat-function", 
            "text": "Returns str as a float.  Syntax  FLOAT  math:parseFloat( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a float \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;  parseFloat(\"123\") returns 123.0.", 
            "title": "parseFloat (Function)"
        }, 
        {
            "location": "/api/4.0.11/#parseint-function", 
            "text": "Returns str as a int.  Syntax  INT  math:parseInt( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a int \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;  parseInt(\"123\") returns 123.", 
            "title": "parseInt (Function)"
        }, 
        {
            "location": "/api/4.0.11/#parselong-function", 
            "text": "Returns str as a long.  Syntax  LONG  math:parseLong( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a long \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;  parseLong(\"123\") returns 123.", 
            "title": "parseLong (Function)"
        }, 
        {
            "location": "/api/4.0.11/#pi-function", 
            "text": "Returns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter).   Syntax  DOUBLE  math:pi()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;  pi() always returns 3.141592653589793.", 
            "title": "pi (Function)"
        }, 
        {
            "location": "/api/4.0.11/#power-function", 
            "text": "Returns value raised to the power of toPower.  Syntax  DOUBLE  math:power( INT|LONG|FLOAT|DOUBLE  value,  INT|LONG|FLOAT|DOUBLE  to.power)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value that should be raised to the power of 'to.power' input parameter \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         to.power \n         The power that 'value' input parameter should be raised to \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;  power(5.6d, 3.0d) returns 175.61599999999996.", 
            "title": "power (Function)"
        }, 
        {
            "location": "/api/4.0.11/#rand-function", 
            "text": "1.  A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. 2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally.   Syntax  DOUBLE  math:rand( INT|LONG  seed)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         seed \n         An optional seed value that will be used to generate the random number sequence \n         defaultSeed \n         INT LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  A random double value between 0 and 1 will be generated using math:rand()", 
            "title": "rand (Function)"
        }, 
        {
            "location": "/api/4.0.11/#round-function", 
            "text": "Returns the closest integer/long (depending on the input) value to the argument.  Syntax  INT|LONG  math:round( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be rounded to the closest integer/long. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;  round(3252.353) returns 3252.", 
            "title": "round (Function)"
        }, 
        {
            "location": "/api/4.0.11/#signum-function", 
            "text": "If a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function.  Syntax  INT  math:signum( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if positive or negative or otherwise \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;  signum(-6.32d) returns -1.", 
            "title": "signum (Function)"
        }, 
        {
            "location": "/api/4.0.11/#sin-function", 
            "text": "Returns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function.  Syntax  DOUBLE  math:sin( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose sine value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;  sin(6d) returns -0.27941549819892586.", 
            "title": "sin (Function)"
        }, 
        {
            "location": "/api/4.0.11/#sinh-function", 
            "text": "Returns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function.   Syntax  DOUBLE  math:sinh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic sine value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;  sinh(6d) returns 201.71315737027922.", 
            "title": "sinh (Function)"
        }, 
        {
            "location": "/api/4.0.11/#sqrt-function", 
            "text": "Returns the square-root of p1. This function wraps the java.lang.Math.sqrt() function.  Syntax  DOUBLE  math:sqrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose square-root value should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;  sqrt(4d) returns 2.", 
            "title": "sqrt (Function)"
        }, 
        {
            "location": "/api/4.0.11/#tan-function", 
            "text": "Returns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function.  Syntax  DOUBLE  math:tan( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose tan value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;  tan(6d) returns -0.29100619138474915.", 
            "title": "tan (Function)"
        }, 
        {
            "location": "/api/4.0.11/#tanh-function", 
            "text": "Returns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function.  Syntax  DOUBLE  math:tanh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic tangent value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;  tanh(6d) returns 0.9999877116507956.", 
            "title": "tanh (Function)"
        }, 
        {
            "location": "/api/4.0.11/#todegrees-function", 
            "text": "Converts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function.  Syntax  DOUBLE  math:toDegrees( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The radians value that should be converted to degrees \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;  toDegrees(6d) returns 343.77467707849394.", 
            "title": "toDegrees (Function)"
        }, 
        {
            "location": "/api/4.0.11/#toradians-function", 
            "text": "Converts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function.  Syntax  DOUBLE  math:toRadians( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The degrees value that should be converted to radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;  toRadians(6d) returns 0.10471975511965977.", 
            "title": "toRadians (Function)"
        }, 
        {
            "location": "/api/4.0.10/", 
            "text": "API Docs - v4.0.10\n\n\nMath\n\n\npercentile \n(Aggregate Function)\n\n\nReturns the pth percentile value of the arg values.\n\n\n\nSyntax\n\n\nDOUBLE\n math:percentile(\nINT|LONG|FLOAT|DOUBLE\n arg, \nDOUBLE\n p)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe values of which the percentile should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np\n\n        \nEstimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;\n\n\n\n\n\nmath:percentile(temperature, 97.0)\n\n\n\nabs \n(Function)\n\n\nReturns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:abs(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the absolute value should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;\n\n\n\n\n\nBoth abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.\n\n\n\nacos \n(Function)\n\n\nIf -1 \n= p1 \n= 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:acos(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-cosine (inverse cosine) should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;\n\n\n\n\n\nacos(0.5) returns 1.0471975511965979.\n\n\n\nasin \n(Function)\n\n\nIf -1 \n= p1 \n= 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:asin(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-sin (inverse sine) should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;\n\n\n\n\n\nasin(0.5) returns 0.5235987755982989.\n\n\n\natan \n(Function)\n\n\n1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function.\n2. Returns the arc-tangent (inverse tangent) of  p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:atan(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np1\n\n        \nThis optional parameter represents the y coordinate of the (x,y) coordinate pair\n\n        \n0D\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\n\natan(12d, 5d) returns 1.1760052070951352.\n\n\n\nbin \n(Function)\n\n\nReturns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods.\n\n\n\nSyntax\n\n\nSTRING\n math:bin(\nINT|LONG\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to an unsigned integer of base 2\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;\n\n\n\n\n\nbin(9) returns \"1001\".\n\n\n\ncbrt \n(Function)\n\n\nReturns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cbrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose cube-root should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;\n\n\n\n\n\ncbrt(17d) returns 2.5712815906582356.\n\n\n\nceil \n(Function)\n\n\nReturns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ceil(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose ceiling value should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;\n\n\n\n\n\nceil(423.187d) returns 424.0.\n\n\n\nconv \n(Function)\n\n\nConverts a from the fromBase base to the toBase base.\n\n\n\nSyntax\n\n\nSTRING\n math:conv(\nSTRING\n a, \nINT\n from.base, \nINT\n to.base)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \na\n\n        \nThe value whose base should be changed. Input should be as a String\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfrom.base\n\n        \nThe source base of the input parameter 'a'\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.base\n\n        \nThe target base that input parameter 'a' should be converted to\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\n\nconv(\"7f\", 16, 10) returns \"127\".\n\n\n\ncopySign \n(Function)\n\n\nReturns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:copySign(\nINT|LONG|FLOAT|DOUBLE\n magnitude, \nINT|LONG|FLOAT|DOUBLE\n sign)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmagnitude\n\n        \nThis parameters magnitude will be used for output attribute\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsign\n\n        \nThis parameters sign will be used for output attribute\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;\n\n\n\n\n\ncopySign(5.6d, -3.0d) returns -5.6.\n\n\n\ncos \n(Function)\n\n\nReturns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cos(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose cosine value should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\n\ncos(6d) returns 0.9601702866503661.\n\n\n\ncosh \n(Function)\n\n\nReturns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cosh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic cosine should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\n\ncosh (6d) returns 201.7156361224559.\n\n\n\ne \n(Function)\n\n\nReturns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms).\n\n\n\nSyntax\n\n\nDOUBLE\n math:e()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;\n\n\n\n\n\ne() returns 2.7182818284590452354.\n\n\n\nexp \n(Function)\n\n\nReturns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:exp(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe power that the Euler's number e should be raised to\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\n\nexp(10.23) returns 27722.51006805505.\n\n\n\nfloor \n(Function)\n\n\nThis function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer.\n\n\n\nSyntax\n\n\nDOUBLE\n math:floor(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose floor value should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;\n\n\n\n\n\nfloor(10.23) returns 10.0.\n\n\n\ngetExponent \n(Function)\n\n\nReturns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function.\n\n\n\nSyntax\n\n\nINT\n math:getExponent(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose unbiased exponent representation should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\n\ngetExponent(60984.1) returns 15.\n\n\n\nhex \n(Function)\n\n\nThis function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1.\n\n\n\nSyntax\n\n\nSTRING\n math:hex(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hexadecimal representation should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;\n\n\n\n\n\nhex(200) returns \"c8\".\n\n\n\nisInfinite \n(Function)\n\n\nThis function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isInfinite(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if infinite\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;\n\n\n\n\n\nisInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.\n\n\n\nisNan \n(Function)\n\n\nThis function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isNan(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if it is a number\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;\n\n\n\n\n\nisNan(java.lang.Math.log(-12d)) returns true.\n\n\n\nln \n(Function)\n\n\nReturns the natural logarithm (base e) of p1.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ln(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose natural logarithm (base e) should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nln(11.453) returns 2.438251704415579.\n\n\n\nlog \n(Function)\n\n\nReturns the logarithm (base=base) of number.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log(\nINT|LONG|FLOAT|DOUBLE\n number, \nINT|LONG|FLOAT|DOUBLE\n base)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nnumber\n\n        \nThe value of whose base should be changed\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbase\n\n        \nThe base value of the ouput\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;\n\n\n\n\n\nlog(34, 2f) returns 5.08746284125034.\n\n\n\nlog10 \n(Function)\n\n\nReturns the base 10 logarithm of p1.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log10(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose base 10 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nlog10(19.234) returns 1.2840696117100832.\n\n\n\nlog2 \n(Function)\n\n\nReturns the base 2 logarithm of p1.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log2(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose base 2 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nlog2(91d) returns 6.507794640198696.\n\n\n\nmax \n(Function)\n\n\nReturns the greater value out of p1 and p2.\n\n\n\nSyntax\n\n\nDOUBLE\n math:max(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nValue one to be compared in finding largest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nValue two to be compared in finding largest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;\n\n\n\n\n\nmax(123.67d, 91) returns 123.67.\n\n\n\nmin \n(Function)\n\n\nReturns the smaller value out of p1 and p2.\n\n\n\nSyntax\n\n\nDOUBLE\n math:min(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nValue one to be compared in finding smallest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nValue two to be compared in finding smallest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;\n\n\n\n\n\nmin(123.67d, 91) returns 91.\n\n\n\noct \n(Function)\n\n\nConverts p1 to octal.\n\n\n\nSyntax\n\n\nSTRING\n math:oct(\nINT|LONG\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose octal representation should be found.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\n\noct(99l) returns \"143\".\n\n\n\nparseDouble \n(Function)\n\n\nReturns str as a double.\n\n\n\nSyntax\n\n\nDOUBLE\n math:parseDouble(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a double\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseDouble(\"123\") returns 123.0.\n\n\n\nparseFloat \n(Function)\n\n\nReturns str as a float.\n\n\n\nSyntax\n\n\nFLOAT\n math:parseFloat(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a float\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseFloat(\"123\") returns 123.0.\n\n\n\nparseInt \n(Function)\n\n\nReturns str as a int.\n\n\n\nSyntax\n\n\nINT\n math:parseInt(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a int\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseInt(\"123\") returns 123.\n\n\n\nparseLong \n(Function)\n\n\nReturns str as a long.\n\n\n\nSyntax\n\n\nLONG\n math:parseLong(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a long\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseLong(\"123\") returns 123.\n\n\n\npi \n(Function)\n\n\nReturns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter). \n\n\n\nSyntax\n\n\nDOUBLE\n math:pi()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;\n\n\n\n\n\npi() always returns 3.141592653589793.\n\n\n\npower \n(Function)\n\n\nReturns value raised to the power of toPower.\n\n\n\nSyntax\n\n\nDOUBLE\n math:power(\nINT|LONG|FLOAT|DOUBLE\n value, \nINT|LONG|FLOAT|DOUBLE\n to.power)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value that should be raised to the power of 'to.power' input parameter\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.power\n\n        \nThe power that 'value' input parameter should be raised to\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;\n\n\n\n\n\npower(5.6d, 3.0d) returns 175.61599999999996.\n\n\n\nrand \n(Function)\n\n\n1.  A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally.\n2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. \n\n\n\nSyntax\n\n\nDOUBLE\n math:rand(\nINT|LONG\n seed)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nseed\n\n        \nAn optional seed value that will be used to generate the random number sequence\n\n        \ndefaultSeed\n\n        \nINT\nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\n\nA random double value between 0 and 1 will be generated using math:rand()\n\n\n\nround \n(Function)\n\n\nReturns the closest integer/long (depending on the input) value to the argument.\n\n\n\nSyntax\n\n\nINT|LONG\n math:round(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be rounded to the closest integer/long.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;\n\n\n\n\n\nround(3252.353) returns 3252.\n\n\n\nsignum \n(Function)\n\n\nIf a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function.\n\n\n\nSyntax\n\n\nINT\n math:signum(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if positive or negative or otherwise\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;\n\n\n\n\n\nsignum(-6.32d) returns -1.\n\n\n\nsin \n(Function)\n\n\nReturns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sin(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose sine value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;\n\n\n\n\n\nsin(6d) returns -0.27941549819892586.\n\n\n\nsinh \n(Function)\n\n\nReturns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function. \n\n\n\nSyntax\n\n\nDOUBLE\n math:sinh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic sine value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;\n\n\n\n\n\nsinh(6d) returns 201.71315737027922.\n\n\n\nsqrt \n(Function)\n\n\nReturns the square-root of p1. This function wraps the java.lang.Math.sqrt() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sqrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose square-root value should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;\n\n\n\n\n\nsqrt(4d) returns 2.\n\n\n\ntan \n(Function)\n\n\nReturns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tan(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose tan value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;\n\n\n\n\n\ntan(6d) returns -0.29100619138474915.\n\n\n\ntanh \n(Function)\n\n\nReturns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tanh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic tangent value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;\n\n\n\n\n\ntanh(6d) returns 0.9999877116507956.\n\n\n\ntoDegrees \n(Function)\n\n\nConverts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toDegrees(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe radians value that should be converted to degrees\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;\n\n\n\n\n\ntoDegrees(6d) returns 343.77467707849394.\n\n\n\ntoRadians \n(Function)\n\n\nConverts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toRadians(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe degrees value that should be converted to radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;\n\n\n\n\n\ntoRadians(6d) returns 0.10471975511965977.", 
            "title": "4.0.10"
        }, 
        {
            "location": "/api/4.0.10/#api-docs-v4010", 
            "text": "", 
            "title": "API Docs - v4.0.10"
        }, 
        {
            "location": "/api/4.0.10/#math", 
            "text": "", 
            "title": "Math"
        }, 
        {
            "location": "/api/4.0.10/#percentile-aggregate-function", 
            "text": "Returns the pth percentile value of the arg values.  Syntax  DOUBLE  math:percentile( INT|LONG|FLOAT|DOUBLE  arg,  DOUBLE  p)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The values of which the percentile should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p \n         Estimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100 \n         \n         DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;  math:percentile(temperature, 97.0)", 
            "title": "percentile (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.10/#abs-function", 
            "text": "Returns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function.  Syntax  DOUBLE  math:abs( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the absolute value should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;  Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.", 
            "title": "abs (Function)"
        }, 
        {
            "location": "/api/4.0.10/#acos-function", 
            "text": "If -1  = p1  = 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function.  Syntax  DOUBLE  math:acos( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-cosine (inverse cosine) should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;  acos(0.5) returns 1.0471975511965979.", 
            "title": "acos (Function)"
        }, 
        {
            "location": "/api/4.0.10/#asin-function", 
            "text": "If -1  = p1  = 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function.  Syntax  DOUBLE  math:asin( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-sin (inverse sine) should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;  asin(0.5) returns 0.5235987755982989.", 
            "title": "asin (Function)"
        }, 
        {
            "location": "/api/4.0.10/#atan-function", 
            "text": "1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function. 2. Returns the arc-tangent (inverse tangent) of  p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function.  Syntax  DOUBLE  math:atan( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p1 \n         This optional parameter represents the y coordinate of the (x,y) coordinate pair \n         0D \n         INT LONG FLOAT DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;  atan(12d, 5d) returns 1.1760052070951352.", 
            "title": "atan (Function)"
        }, 
        {
            "location": "/api/4.0.10/#bin-function", 
            "text": "Returns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods.  Syntax  STRING  math:bin( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to an unsigned integer of base 2 \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;  bin(9) returns \"1001\".", 
            "title": "bin (Function)"
        }, 
        {
            "location": "/api/4.0.10/#cbrt-function", 
            "text": "Returns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function.  Syntax  DOUBLE  math:cbrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose cube-root should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;  cbrt(17d) returns 2.5712815906582356.", 
            "title": "cbrt (Function)"
        }, 
        {
            "location": "/api/4.0.10/#ceil-function", 
            "text": "Returns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method.  Syntax  DOUBLE  math:ceil( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose ceiling value should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;  ceil(423.187d) returns 424.0.", 
            "title": "ceil (Function)"
        }, 
        {
            "location": "/api/4.0.10/#conv-function", 
            "text": "Converts a from the fromBase base to the toBase base.  Syntax  STRING  math:conv( STRING  a,  INT  from.base,  INT  to.base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         a \n         The value whose base should be changed. Input should be as a String \n         \n         STRING \n         No \n         No \n     \n     \n         from.base \n         The source base of the input parameter 'a' \n         \n         INT \n         No \n         No \n     \n     \n         to.base \n         The target base that input parameter 'a' should be converted to \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;  conv(\"7f\", 16, 10) returns \"127\".", 
            "title": "conv (Function)"
        }, 
        {
            "location": "/api/4.0.10/#copysign-function", 
            "text": "Returns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function.  Syntax  DOUBLE  math:copySign( INT|LONG|FLOAT|DOUBLE  magnitude,  INT|LONG|FLOAT|DOUBLE  sign)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         magnitude \n         This parameters magnitude will be used for output attribute \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         sign \n         This parameters sign will be used for output attribute \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;  copySign(5.6d, -3.0d) returns -5.6.", 
            "title": "copySign (Function)"
        }, 
        {
            "location": "/api/4.0.10/#cos-function", 
            "text": "Returns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function.  Syntax  DOUBLE  math:cos( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose cosine value should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;  cos(6d) returns 0.9601702866503661.", 
            "title": "cos (Function)"
        }, 
        {
            "location": "/api/4.0.10/#cosh-function", 
            "text": "Returns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function.  Syntax  DOUBLE  math:cosh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic cosine should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;  cosh (6d) returns 201.7156361224559.", 
            "title": "cosh (Function)"
        }, 
        {
            "location": "/api/4.0.10/#e-function", 
            "text": "Returns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms).  Syntax  DOUBLE  math:e()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;  e() returns 2.7182818284590452354.", 
            "title": "e (Function)"
        }, 
        {
            "location": "/api/4.0.10/#exp-function", 
            "text": "Returns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function.  Syntax  DOUBLE  math:exp( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The power that the Euler's number e should be raised to \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;  exp(10.23) returns 27722.51006805505.", 
            "title": "exp (Function)"
        }, 
        {
            "location": "/api/4.0.10/#floor-function", 
            "text": "This function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer.  Syntax  DOUBLE  math:floor( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose floor value should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;  floor(10.23) returns 10.0.", 
            "title": "floor (Function)"
        }, 
        {
            "location": "/api/4.0.10/#getexponent-function", 
            "text": "Returns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function.  Syntax  INT  math:getExponent( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose unbiased exponent representation should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;  getExponent(60984.1) returns 15.", 
            "title": "getExponent (Function)"
        }, 
        {
            "location": "/api/4.0.10/#hex-function", 
            "text": "This function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1.  Syntax  STRING  math:hex( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hexadecimal representation should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;  hex(200) returns \"c8\".", 
            "title": "hex (Function)"
        }, 
        {
            "location": "/api/4.0.10/#isinfinite-function", 
            "text": "This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise.  Syntax  BOOL  math:isInfinite( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if infinite \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;  isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.", 
            "title": "isInfinite (Function)"
        }, 
        {
            "location": "/api/4.0.10/#isnan-function", 
            "text": "This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise.  Syntax  BOOL  math:isNan( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if it is a number \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;  isNan(java.lang.Math.log(-12d)) returns true.", 
            "title": "isNan (Function)"
        }, 
        {
            "location": "/api/4.0.10/#ln-function", 
            "text": "Returns the natural logarithm (base e) of p1.  Syntax  DOUBLE  math:ln( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose natural logarithm (base e) should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;  ln(11.453) returns 2.438251704415579.", 
            "title": "ln (Function)"
        }, 
        {
            "location": "/api/4.0.10/#log-function", 
            "text": "Returns the logarithm (base=base) of number.  Syntax  DOUBLE  math:log( INT|LONG|FLOAT|DOUBLE  number,  INT|LONG|FLOAT|DOUBLE  base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         number \n         The value of whose base should be changed \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         base \n         The base value of the ouput \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;  log(34, 2f) returns 5.08746284125034.", 
            "title": "log (Function)"
        }, 
        {
            "location": "/api/4.0.10/#log10-function", 
            "text": "Returns the base 10 logarithm of p1.  Syntax  DOUBLE  math:log10( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose base 10 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;  log10(19.234) returns 1.2840696117100832.", 
            "title": "log10 (Function)"
        }, 
        {
            "location": "/api/4.0.10/#log2-function", 
            "text": "Returns the base 2 logarithm of p1.  Syntax  DOUBLE  math:log2( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose base 2 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;  log2(91d) returns 6.507794640198696.", 
            "title": "log2 (Function)"
        }, 
        {
            "location": "/api/4.0.10/#max-function", 
            "text": "Returns the greater value out of p1 and p2.  Syntax  DOUBLE  math:max( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         Value one to be compared in finding largest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         Value two to be compared in finding largest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;  max(123.67d, 91) returns 123.67.", 
            "title": "max (Function)"
        }, 
        {
            "location": "/api/4.0.10/#min-function", 
            "text": "Returns the smaller value out of p1 and p2.  Syntax  DOUBLE  math:min( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         Value one to be compared in finding smallest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         Value two to be compared in finding smallest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;  min(123.67d, 91) returns 91.", 
            "title": "min (Function)"
        }, 
        {
            "location": "/api/4.0.10/#oct-function", 
            "text": "Converts p1 to octal.  Syntax  STRING  math:oct( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose octal representation should be found. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  oct(99l) returns \"143\".", 
            "title": "oct (Function)"
        }, 
        {
            "location": "/api/4.0.10/#parsedouble-function", 
            "text": "Returns str as a double.  Syntax  DOUBLE  math:parseDouble( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a double \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;  parseDouble(\"123\") returns 123.0.", 
            "title": "parseDouble (Function)"
        }, 
        {
            "location": "/api/4.0.10/#parsefloat-function", 
            "text": "Returns str as a float.  Syntax  FLOAT  math:parseFloat( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a float \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;  parseFloat(\"123\") returns 123.0.", 
            "title": "parseFloat (Function)"
        }, 
        {
            "location": "/api/4.0.10/#parseint-function", 
            "text": "Returns str as a int.  Syntax  INT  math:parseInt( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a int \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;  parseInt(\"123\") returns 123.", 
            "title": "parseInt (Function)"
        }, 
        {
            "location": "/api/4.0.10/#parselong-function", 
            "text": "Returns str as a long.  Syntax  LONG  math:parseLong( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a long \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;  parseLong(\"123\") returns 123.", 
            "title": "parseLong (Function)"
        }, 
        {
            "location": "/api/4.0.10/#pi-function", 
            "text": "Returns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter).   Syntax  DOUBLE  math:pi()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;  pi() always returns 3.141592653589793.", 
            "title": "pi (Function)"
        }, 
        {
            "location": "/api/4.0.10/#power-function", 
            "text": "Returns value raised to the power of toPower.  Syntax  DOUBLE  math:power( INT|LONG|FLOAT|DOUBLE  value,  INT|LONG|FLOAT|DOUBLE  to.power)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value that should be raised to the power of 'to.power' input parameter \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         to.power \n         The power that 'value' input parameter should be raised to \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;  power(5.6d, 3.0d) returns 175.61599999999996.", 
            "title": "power (Function)"
        }, 
        {
            "location": "/api/4.0.10/#rand-function", 
            "text": "1.  A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. 2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally.   Syntax  DOUBLE  math:rand( INT|LONG  seed)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         seed \n         An optional seed value that will be used to generate the random number sequence \n         defaultSeed \n         INT LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  A random double value between 0 and 1 will be generated using math:rand()", 
            "title": "rand (Function)"
        }, 
        {
            "location": "/api/4.0.10/#round-function", 
            "text": "Returns the closest integer/long (depending on the input) value to the argument.  Syntax  INT|LONG  math:round( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be rounded to the closest integer/long. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;  round(3252.353) returns 3252.", 
            "title": "round (Function)"
        }, 
        {
            "location": "/api/4.0.10/#signum-function", 
            "text": "If a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function.  Syntax  INT  math:signum( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if positive or negative or otherwise \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;  signum(-6.32d) returns -1.", 
            "title": "signum (Function)"
        }, 
        {
            "location": "/api/4.0.10/#sin-function", 
            "text": "Returns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function.  Syntax  DOUBLE  math:sin( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose sine value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;  sin(6d) returns -0.27941549819892586.", 
            "title": "sin (Function)"
        }, 
        {
            "location": "/api/4.0.10/#sinh-function", 
            "text": "Returns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function.   Syntax  DOUBLE  math:sinh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic sine value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;  sinh(6d) returns 201.71315737027922.", 
            "title": "sinh (Function)"
        }, 
        {
            "location": "/api/4.0.10/#sqrt-function", 
            "text": "Returns the square-root of p1. This function wraps the java.lang.Math.sqrt() function.  Syntax  DOUBLE  math:sqrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose square-root value should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;  sqrt(4d) returns 2.", 
            "title": "sqrt (Function)"
        }, 
        {
            "location": "/api/4.0.10/#tan-function", 
            "text": "Returns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function.  Syntax  DOUBLE  math:tan( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose tan value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;  tan(6d) returns -0.29100619138474915.", 
            "title": "tan (Function)"
        }, 
        {
            "location": "/api/4.0.10/#tanh-function", 
            "text": "Returns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function.  Syntax  DOUBLE  math:tanh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic tangent value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;  tanh(6d) returns 0.9999877116507956.", 
            "title": "tanh (Function)"
        }, 
        {
            "location": "/api/4.0.10/#todegrees-function", 
            "text": "Converts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function.  Syntax  DOUBLE  math:toDegrees( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The radians value that should be converted to degrees \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;  toDegrees(6d) returns 343.77467707849394.", 
            "title": "toDegrees (Function)"
        }, 
        {
            "location": "/api/4.0.10/#toradians-function", 
            "text": "Converts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function.  Syntax  DOUBLE  math:toRadians( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The degrees value that should be converted to radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;  toRadians(6d) returns 0.10471975511965977.", 
            "title": "toRadians (Function)"
        }, 
        {
            "location": "/api/4.0.9/", 
            "text": "API Docs - v4.0.9\n\n\nMath\n\n\npercentile \n(Aggregate Function)\n\n\nReturns the pth percentile value of the arg values.\n\n\n\nSyntax\n\n\nDOUBLE\n math:percentile(\nINT|LONG|FLOAT|DOUBLE\n arg, \nDOUBLE\n p)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe values of which the percentile should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np\n\n        \nEstimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;\n\n\n\n\n\nmath:percentile(temperature, 97.0)\n\n\n\nabs \n(Function)\n\n\nReturns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:abs(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the absolute value should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;\n\n\n\n\n\nBoth abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.\n\n\n\nacos \n(Function)\n\n\nIf -1 \n= p1 \n= 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:acos(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-cosine (inverse cosine) should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;\n\n\n\n\n\nacos(0.5) returns 1.0471975511965979.\n\n\n\nasin \n(Function)\n\n\nIf -1 \n= p1 \n= 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:asin(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-sin (inverse sine) should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;\n\n\n\n\n\nasin(0.5) returns 0.5235987755982989.\n\n\n\natan \n(Function)\n\n\n1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function.\n2. Returns the arc-tangent (inverse tangent) of  p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:atan(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np1\n\n        \nThis optional parameter represents the y coordinate of the (x,y) coordinate pair\n\n        \n0D\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\n\natan(12d, 5d) returns 1.1760052070951352.\n\n\n\nbin \n(Function)\n\n\nReturns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods.\n\n\n\nSyntax\n\n\nSTRING\n math:bin(\nINT|LONG\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to an unsigned integer of base 2\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;\n\n\n\n\n\nbin(9) returns \"1001\".\n\n\n\ncbrt \n(Function)\n\n\nReturns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cbrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose cube-root should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;\n\n\n\n\n\ncbrt(17d) returns 2.5712815906582356.\n\n\n\nceil \n(Function)\n\n\nReturns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ceil(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose ceiling value should be found\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;\n\n\n\n\n\nceil(423.187d) returns 424.0.\n\n\n\nconv \n(Function)\n\n\nConverts a from the fromBase base to the toBase base.\n\n\n\nSyntax\n\n\nSTRING\n math:conv(\nSTRING\n a, \nINT\n from.base, \nINT\n to.base)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \na\n\n        \nThe value whose base should be changed. Input should be as a String\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfrom.base\n\n        \nThe source base of the input parameter 'a'\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.base\n\n        \nThe target base that input parameter 'a' should be converted to\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\n\nconv(\"7f\", 16, 10) returns \"127\".\n\n\n\ncopySign \n(Function)\n\n\nReturns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:copySign(\nINT|LONG|FLOAT|DOUBLE\n magnitude, \nINT|LONG|FLOAT|DOUBLE\n sign)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmagnitude\n\n        \nThis parameters magnitude will be used for output attribute\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsign\n\n        \nThis parameters sign will be used for output attribute\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;\n\n\n\n\n\ncopySign(5.6d, -3.0d) returns -5.6.\n\n\n\ncos \n(Function)\n\n\nReturns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cos(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose cosine value should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\n\ncos(6d) returns 0.9601702866503661.\n\n\n\ncosh \n(Function)\n\n\nReturns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cosh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic cosine should be found. Input must be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\n\ncosh (6d) returns 201.7156361224559.\n\n\n\ne \n(Function)\n\n\nReturns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms).\n\n\n\nSyntax\n\n\nDOUBLE\n math:e()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;\n\n\n\n\n\ne() returns 2.7182818284590452354.\n\n\n\nexp \n(Function)\n\n\nReturns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:exp(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe power that the Euler's number e should be raised to\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\n\nexp(10.23) returns 27722.51006805505.\n\n\n\nfloor \n(Function)\n\n\nThis function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer.\n\n\n\nSyntax\n\n\nDOUBLE\n math:floor(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose floor value should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;\n\n\n\n\n\nfloor(10.23) returns 10.0.\n\n\n\ngetExponent \n(Function)\n\n\nReturns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function.\n\n\n\nSyntax\n\n\nINT\n math:getExponent(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose unbiased exponent representation should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\n\ngetExponent(60984.1) returns 15.\n\n\n\nhex \n(Function)\n\n\nThis function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1.\n\n\n\nSyntax\n\n\nSTRING\n math:hex(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hexadecimal representation should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;\n\n\n\n\n\nhex(200) returns \"c8\".\n\n\n\nisInfinite \n(Function)\n\n\nThis function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isInfinite(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if infinite\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;\n\n\n\n\n\nisInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.\n\n\n\nisNan \n(Function)\n\n\nThis function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isNan(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if it is a number\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;\n\n\n\n\n\nisNan(java.lang.Math.log(-12d)) returns true.\n\n\n\nln \n(Function)\n\n\nReturns the natural logarithm (base e) of p1.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ln(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose natural logarithm (base e) should be found\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nln(11.453) returns 2.438251704415579.\n\n\n\nlog \n(Function)\n\n\nReturns the logarithm (base=base) of number.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log(\nINT|LONG|FLOAT|DOUBLE\n number, \nINT|LONG|FLOAT|DOUBLE\n base)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nnumber\n\n        \nThe value of whose base should be changed\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbase\n\n        \nThe base value of the ouput\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;\n\n\n\n\n\nlog(34, 2f) returns 5.08746284125034.\n\n\n\nlog10 \n(Function)\n\n\nReturns the base 10 logarithm of p1.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log10(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose base 10 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nlog10(19.234) returns 1.2840696117100832.\n\n\n\nlog2 \n(Function)\n\n\nReturns the base 2 logarithm of p1.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log2(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose base 2 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nlog2(91d) returns 6.507794640198696.\n\n\n\nmax \n(Function)\n\n\nReturns the greater value out of p1 and p2.\n\n\n\nSyntax\n\n\nDOUBLE\n math:max(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nValue one to be compared in finding largest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nValue two to be compared in finding largest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;\n\n\n\n\n\nmax(123.67d, 91) returns 123.67.\n\n\n\nmin \n(Function)\n\n\nReturns the smaller value out of p1 and p2.\n\n\n\nSyntax\n\n\nDOUBLE\n math:min(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nValue one to be compared in finding smallest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nValue two to be compared in finding smallest value\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;\n\n\n\n\n\nmin(123.67d, 91) returns 91.\n\n\n\noct \n(Function)\n\n\nConverts p1 to octal.\n\n\n\nSyntax\n\n\nSTRING\n math:oct(\nINT|LONG\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose octal representation should be found.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\n\noct(99l) returns \"143\".\n\n\n\nparseDouble \n(Function)\n\n\nReturns str as a double.\n\n\n\nSyntax\n\n\nDOUBLE\n math:parseDouble(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a double\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseDouble(\"123\") returns 123.0.\n\n\n\nparseFloat \n(Function)\n\n\nReturns str as a float.\n\n\n\nSyntax\n\n\nFLOAT\n math:parseFloat(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a float\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseFloat(\"123\") returns 123.0.\n\n\n\nparseInt \n(Function)\n\n\nReturns str as a int.\n\n\n\nSyntax\n\n\nINT\n math:parseInt(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a int\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseInt(\"123\") returns 123.\n\n\n\nparseLong \n(Function)\n\n\nReturns str as a long.\n\n\n\nSyntax\n\n\nLONG\n math:parseLong(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a long\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nparseLong(\"123\") returns 123.\n\n\n\npi \n(Function)\n\n\nReturns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter). \n\n\n\nSyntax\n\n\nDOUBLE\n math:pi()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;\n\n\n\n\n\npi() always returns 3.141592653589793.\n\n\n\npower \n(Function)\n\n\nReturns value raised to the power of toPower.\n\n\n\nSyntax\n\n\nDOUBLE\n math:power(\nINT|LONG|FLOAT|DOUBLE\n value, \nINT|LONG|FLOAT|DOUBLE\n to.power)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value that should be raised to the power of 'to.power' input parameter\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.power\n\n        \nThe power that 'value' input parameter should be raised to\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;\n\n\n\n\n\npower(5.6d, 3.0d) returns 175.61599999999996.\n\n\n\nrand \n(Function)\n\n\n1.  A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally.\n2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. \n\n\n\nSyntax\n\n\nDOUBLE\n math:rand(\nINT|LONG\n seed)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nseed\n\n        \nAn optional seed value that will be used to generate the random number sequence\n\n        \ndefaultSeed\n\n        \nINT\nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\n\nA random double value between 0 and 1 will be generated using math:rand()\n\n\n\nround \n(Function)\n\n\nReturns the closest integer/long (depending on the input) value to the argument.\n\n\n\nSyntax\n\n\nINT|LONG\n math:round(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be rounded to the closest integer/long.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;\n\n\n\n\n\nround(3252.353) returns 3252.\n\n\n\nsignum \n(Function)\n\n\nIf a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function.\n\n\n\nSyntax\n\n\nINT\n math:signum(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked if positive or negative or otherwise\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;\n\n\n\n\n\nsignum(-6.32d) returns -1.\n\n\n\nsin \n(Function)\n\n\nReturns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sin(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose sine value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;\n\n\n\n\n\nsin(6d) returns -0.27941549819892586.\n\n\n\nsinh \n(Function)\n\n\nReturns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function. \n\n\n\nSyntax\n\n\nDOUBLE\n math:sinh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic sine value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;\n\n\n\n\n\nsinh(6d) returns 201.71315737027922.\n\n\n\nsqrt \n(Function)\n\n\nReturns the square-root of p1. This function wraps the java.lang.Math.sqrt() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sqrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose square-root value should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;\n\n\n\n\n\nsqrt(4d) returns 2.\n\n\n\ntan \n(Function)\n\n\nReturns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tan(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose tan value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;\n\n\n\n\n\ntan(6d) returns -0.29100619138474915.\n\n\n\ntanh \n(Function)\n\n\nReturns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tanh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose hyperbolic tangent value should be found. Input should be in radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;\n\n\n\n\n\ntanh(6d) returns 0.9999877116507956.\n\n\n\ntoDegrees \n(Function)\n\n\nConverts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toDegrees(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe radians value that should be converted to degrees\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;\n\n\n\n\n\ntoDegrees(6d) returns 343.77467707849394.\n\n\n\ntoRadians \n(Function)\n\n\nConverts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toRadians(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe degrees value that should be converted to radians\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;\n\n\n\n\n\ntoRadians(6d) returns 0.10471975511965977.", 
            "title": "4.0.9"
        }, 
        {
            "location": "/api/4.0.9/#api-docs-v409", 
            "text": "", 
            "title": "API Docs - v4.0.9"
        }, 
        {
            "location": "/api/4.0.9/#math", 
            "text": "", 
            "title": "Math"
        }, 
        {
            "location": "/api/4.0.9/#percentile-aggregate-function", 
            "text": "Returns the pth percentile value of the arg values.  Syntax  DOUBLE  math:percentile( INT|LONG|FLOAT|DOUBLE  arg,  DOUBLE  p)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The values of which the percentile should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p \n         Estimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100 \n         \n         DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;  math:percentile(temperature, 97.0)", 
            "title": "percentile (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.9/#abs-function", 
            "text": "Returns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function.  Syntax  DOUBLE  math:abs( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the absolute value should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;  Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.", 
            "title": "abs (Function)"
        }, 
        {
            "location": "/api/4.0.9/#acos-function", 
            "text": "If -1  = p1  = 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function.  Syntax  DOUBLE  math:acos( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-cosine (inverse cosine) should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;  acos(0.5) returns 1.0471975511965979.", 
            "title": "acos (Function)"
        }, 
        {
            "location": "/api/4.0.9/#asin-function", 
            "text": "If -1  = p1  = 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function.  Syntax  DOUBLE  math:asin( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-sin (inverse sine) should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;  asin(0.5) returns 0.5235987755982989.", 
            "title": "asin (Function)"
        }, 
        {
            "location": "/api/4.0.9/#atan-function", 
            "text": "1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function. 2. Returns the arc-tangent (inverse tangent) of  p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function.  Syntax  DOUBLE  math:atan( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p1 \n         This optional parameter represents the y coordinate of the (x,y) coordinate pair \n         0D \n         INT LONG FLOAT DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;  atan(12d, 5d) returns 1.1760052070951352.", 
            "title": "atan (Function)"
        }, 
        {
            "location": "/api/4.0.9/#bin-function", 
            "text": "Returns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods.  Syntax  STRING  math:bin( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to an unsigned integer of base 2 \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;  bin(9) returns \"1001\".", 
            "title": "bin (Function)"
        }, 
        {
            "location": "/api/4.0.9/#cbrt-function", 
            "text": "Returns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function.  Syntax  DOUBLE  math:cbrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose cube-root should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;  cbrt(17d) returns 2.5712815906582356.", 
            "title": "cbrt (Function)"
        }, 
        {
            "location": "/api/4.0.9/#ceil-function", 
            "text": "Returns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method.  Syntax  DOUBLE  math:ceil( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose ceiling value should be found \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;  ceil(423.187d) returns 424.0.", 
            "title": "ceil (Function)"
        }, 
        {
            "location": "/api/4.0.9/#conv-function", 
            "text": "Converts a from the fromBase base to the toBase base.  Syntax  STRING  math:conv( STRING  a,  INT  from.base,  INT  to.base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         a \n         The value whose base should be changed. Input should be as a String \n         \n         STRING \n         No \n         No \n     \n     \n         from.base \n         The source base of the input parameter 'a' \n         \n         INT \n         No \n         No \n     \n     \n         to.base \n         The target base that input parameter 'a' should be converted to \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;  conv(\"7f\", 16, 10) returns \"127\".", 
            "title": "conv (Function)"
        }, 
        {
            "location": "/api/4.0.9/#copysign-function", 
            "text": "Returns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function.  Syntax  DOUBLE  math:copySign( INT|LONG|FLOAT|DOUBLE  magnitude,  INT|LONG|FLOAT|DOUBLE  sign)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         magnitude \n         This parameters magnitude will be used for output attribute \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         sign \n         This parameters sign will be used for output attribute \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;  copySign(5.6d, -3.0d) returns -5.6.", 
            "title": "copySign (Function)"
        }, 
        {
            "location": "/api/4.0.9/#cos-function", 
            "text": "Returns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function.  Syntax  DOUBLE  math:cos( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose cosine value should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;  cos(6d) returns 0.9601702866503661.", 
            "title": "cos (Function)"
        }, 
        {
            "location": "/api/4.0.9/#cosh-function", 
            "text": "Returns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function.  Syntax  DOUBLE  math:cosh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic cosine should be found. Input must be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;  cosh (6d) returns 201.7156361224559.", 
            "title": "cosh (Function)"
        }, 
        {
            "location": "/api/4.0.9/#e-function", 
            "text": "Returns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms).  Syntax  DOUBLE  math:e()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;  e() returns 2.7182818284590452354.", 
            "title": "e (Function)"
        }, 
        {
            "location": "/api/4.0.9/#exp-function", 
            "text": "Returns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function.  Syntax  DOUBLE  math:exp( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The power that the Euler's number e should be raised to \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;  exp(10.23) returns 27722.51006805505.", 
            "title": "exp (Function)"
        }, 
        {
            "location": "/api/4.0.9/#floor-function", 
            "text": "This function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer.  Syntax  DOUBLE  math:floor( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose floor value should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;  floor(10.23) returns 10.0.", 
            "title": "floor (Function)"
        }, 
        {
            "location": "/api/4.0.9/#getexponent-function", 
            "text": "Returns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function.  Syntax  INT  math:getExponent( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose unbiased exponent representation should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;  getExponent(60984.1) returns 15.", 
            "title": "getExponent (Function)"
        }, 
        {
            "location": "/api/4.0.9/#hex-function", 
            "text": "This function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1.  Syntax  STRING  math:hex( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hexadecimal representation should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;  hex(200) returns \"c8\".", 
            "title": "hex (Function)"
        }, 
        {
            "location": "/api/4.0.9/#isinfinite-function", 
            "text": "This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise.  Syntax  BOOL  math:isInfinite( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if infinite \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;  isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.", 
            "title": "isInfinite (Function)"
        }, 
        {
            "location": "/api/4.0.9/#isnan-function", 
            "text": "This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise.  Syntax  BOOL  math:isNan( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if it is a number \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;  isNan(java.lang.Math.log(-12d)) returns true.", 
            "title": "isNan (Function)"
        }, 
        {
            "location": "/api/4.0.9/#ln-function", 
            "text": "Returns the natural logarithm (base e) of p1.  Syntax  DOUBLE  math:ln( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose natural logarithm (base e) should be found \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;  ln(11.453) returns 2.438251704415579.", 
            "title": "ln (Function)"
        }, 
        {
            "location": "/api/4.0.9/#log-function", 
            "text": "Returns the logarithm (base=base) of number.  Syntax  DOUBLE  math:log( INT|LONG|FLOAT|DOUBLE  number,  INT|LONG|FLOAT|DOUBLE  base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         number \n         The value of whose base should be changed \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         base \n         The base value of the ouput \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;  log(34, 2f) returns 5.08746284125034.", 
            "title": "log (Function)"
        }, 
        {
            "location": "/api/4.0.9/#log10-function", 
            "text": "Returns the base 10 logarithm of p1.  Syntax  DOUBLE  math:log10( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose base 10 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;  log10(19.234) returns 1.2840696117100832.", 
            "title": "log10 (Function)"
        }, 
        {
            "location": "/api/4.0.9/#log2-function", 
            "text": "Returns the base 2 logarithm of p1.  Syntax  DOUBLE  math:log2( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose base 2 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;  log2(91d) returns 6.507794640198696.", 
            "title": "log2 (Function)"
        }, 
        {
            "location": "/api/4.0.9/#max-function", 
            "text": "Returns the greater value out of p1 and p2.  Syntax  DOUBLE  math:max( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         Value one to be compared in finding largest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         Value two to be compared in finding largest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;  max(123.67d, 91) returns 123.67.", 
            "title": "max (Function)"
        }, 
        {
            "location": "/api/4.0.9/#min-function", 
            "text": "Returns the smaller value out of p1 and p2.  Syntax  DOUBLE  math:min( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         Value one to be compared in finding smallest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         Value two to be compared in finding smallest value \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;  min(123.67d, 91) returns 91.", 
            "title": "min (Function)"
        }, 
        {
            "location": "/api/4.0.9/#oct-function", 
            "text": "Converts p1 to octal.  Syntax  STRING  math:oct( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose octal representation should be found. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  oct(99l) returns \"143\".", 
            "title": "oct (Function)"
        }, 
        {
            "location": "/api/4.0.9/#parsedouble-function", 
            "text": "Returns str as a double.  Syntax  DOUBLE  math:parseDouble( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a double \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;  parseDouble(\"123\") returns 123.0.", 
            "title": "parseDouble (Function)"
        }, 
        {
            "location": "/api/4.0.9/#parsefloat-function", 
            "text": "Returns str as a float.  Syntax  FLOAT  math:parseFloat( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a float \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;  parseFloat(\"123\") returns 123.0.", 
            "title": "parseFloat (Function)"
        }, 
        {
            "location": "/api/4.0.9/#parseint-function", 
            "text": "Returns str as a int.  Syntax  INT  math:parseInt( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a int \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;  parseInt(\"123\") returns 123.", 
            "title": "parseInt (Function)"
        }, 
        {
            "location": "/api/4.0.9/#parselong-function", 
            "text": "Returns str as a long.  Syntax  LONG  math:parseLong( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a long \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;  parseLong(\"123\") returns 123.", 
            "title": "parseLong (Function)"
        }, 
        {
            "location": "/api/4.0.9/#pi-function", 
            "text": "Returns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter).   Syntax  DOUBLE  math:pi()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;  pi() always returns 3.141592653589793.", 
            "title": "pi (Function)"
        }, 
        {
            "location": "/api/4.0.9/#power-function", 
            "text": "Returns value raised to the power of toPower.  Syntax  DOUBLE  math:power( INT|LONG|FLOAT|DOUBLE  value,  INT|LONG|FLOAT|DOUBLE  to.power)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value that should be raised to the power of 'to.power' input parameter \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         to.power \n         The power that 'value' input parameter should be raised to \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;  power(5.6d, 3.0d) returns 175.61599999999996.", 
            "title": "power (Function)"
        }, 
        {
            "location": "/api/4.0.9/#rand-function", 
            "text": "1.  A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. 2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally.   Syntax  DOUBLE  math:rand( INT|LONG  seed)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         seed \n         An optional seed value that will be used to generate the random number sequence \n         defaultSeed \n         INT LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  A random double value between 0 and 1 will be generated using math:rand()", 
            "title": "rand (Function)"
        }, 
        {
            "location": "/api/4.0.9/#round-function", 
            "text": "Returns the closest integer/long (depending on the input) value to the argument.  Syntax  INT|LONG  math:round( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be rounded to the closest integer/long. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;  round(3252.353) returns 3252.", 
            "title": "round (Function)"
        }, 
        {
            "location": "/api/4.0.9/#signum-function", 
            "text": "If a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function.  Syntax  INT  math:signum( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked if positive or negative or otherwise \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;  signum(-6.32d) returns -1.", 
            "title": "signum (Function)"
        }, 
        {
            "location": "/api/4.0.9/#sin-function", 
            "text": "Returns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function.  Syntax  DOUBLE  math:sin( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose sine value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;  sin(6d) returns -0.27941549819892586.", 
            "title": "sin (Function)"
        }, 
        {
            "location": "/api/4.0.9/#sinh-function", 
            "text": "Returns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function.   Syntax  DOUBLE  math:sinh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic sine value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;  sinh(6d) returns 201.71315737027922.", 
            "title": "sinh (Function)"
        }, 
        {
            "location": "/api/4.0.9/#sqrt-function", 
            "text": "Returns the square-root of p1. This function wraps the java.lang.Math.sqrt() function.  Syntax  DOUBLE  math:sqrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose square-root value should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;  sqrt(4d) returns 2.", 
            "title": "sqrt (Function)"
        }, 
        {
            "location": "/api/4.0.9/#tan-function", 
            "text": "Returns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function.  Syntax  DOUBLE  math:tan( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose tan value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;  tan(6d) returns -0.29100619138474915.", 
            "title": "tan (Function)"
        }, 
        {
            "location": "/api/4.0.9/#tanh-function", 
            "text": "Returns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function.  Syntax  DOUBLE  math:tanh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose hyperbolic tangent value should be found. Input should be in radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;  tanh(6d) returns 0.9999877116507956.", 
            "title": "tanh (Function)"
        }, 
        {
            "location": "/api/4.0.9/#todegrees-function", 
            "text": "Converts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function.  Syntax  DOUBLE  math:toDegrees( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The radians value that should be converted to degrees \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;  toDegrees(6d) returns 343.77467707849394.", 
            "title": "toDegrees (Function)"
        }, 
        {
            "location": "/api/4.0.9/#toradians-function", 
            "text": "Converts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function.  Syntax  DOUBLE  math:toRadians( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The degrees value that should be converted to radians \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;  toRadians(6d) returns 0.10471975511965977.", 
            "title": "toRadians (Function)"
        }, 
        {
            "location": "/api/latest/", 
            "text": "API Docs - v4.1.1\n\n\nMath\n\n\npercentile \n(Aggregate Function)\n\n\nThis functions returns the pth percentile value of a given argument.\n\n\n\nSyntax\n\n\nDOUBLE\n math:percentile(\nINT|LONG|FLOAT|DOUBLE\n arg, \nDOUBLE\n p)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value of the parameter whose percentile should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np\n\n        \nEstimate of the percentile to be found (pth percentile) where p is any number greater than 0 or lesser than or equal to 100.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;\n\n\n\n\n\nThis function returns the percentile value based on the argument given. For example, math:percentile(temperature, 97.0) returns the 97th percentile value of all the temperature events.\n\n\n\nabs \n(Function)\n\n\nThis function returns the absolute value of the given parameter. It wraps the \njava.lang.Math.abs()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:abs(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe parameter whose absolute value is found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;\n\n\n\n\n\nIrrespective of whether the 'invalue' in the input stream holds a value of abs(3) or abs(-3),the function returns 3 since the absolute value of both 3 and -3 is 3. The result directed to OutMediationStream stream.\n\n\n\nacos \n(Function)\n\n\nIf -1 \n= p1 \n= 1, this function returns the arc-cosine (inverse cosine) value of p1.If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.acos() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:acos(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose arc-cosine (inverse cosine) value is found.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the input stream is given, the function calculates the arc-cosine value of it and returns the arc-cosine value to the output stream, OutMediationStream. For example, acos(0.5) returns 1.0471975511965979.\n\n\n\nasin \n(Function)\n\n\nIf -1 \n= p1 \n= 1, this function returns the arc-sin (inverse sine) value of p1. If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.asin() function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:asin(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose arc-sin (inverse sine) value is found.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the input stream is given, the function calculates the arc-sin value of it and returns the arc-sin value to the output stream, OutMediationStream. For example, asin(0.5) returns 0.5235987755982989.\n\n\n\natan \n(Function)\n\n\n1. If a single \np1\n is received, this function returns the arc-tangent (inverse tangent) value of \np1\n. \n2. If \np1\n is received along with an optional \np1\n, it considers them as x and y coordinates and returns the arc-tangent (inverse tangent) value. \nThe returned value is in radian scale. This function wraps the \njava.lang.Math.atan()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:atan(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose arc-tangent (inverse tangent) is found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np1\n\n        \nThis optional parameter represents the y coordinate of the (x,y) coordinate pair.\n\n        \n0D\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue1' in the input stream is given, the function calculates the arc-tangent value of it and returns the arc-tangent value to the output stream, OutMediationStream. If both the 'inValue1' and 'inValue2' are given, then the function considers them to be x and y coordinates respectively and returns the calculated arc-tangent value to the output stream, OutMediationStream. For example, atan(12d, 5d) returns 1.1760052070951352.\n\n\n\nbin \n(Function)\n\n\nThis function returns a string representation of the p1 argument, that is of either 'integer' or 'long' data type, as an unsigned integer in base 2. It wraps the \njava.lang.Integer.toBinaryString\n and java.lang.Long.toBinaryString` methods.\n\n\n\nSyntax\n\n\nSTRING\n math:bin(\nINT|LONG\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value in either 'integer' or 'long', that should be converted into an unsigned integer of base 2.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the input stream is given, the function converts it into an unsigned integer in base 2 and directs the output to the output stream, OutMediationStream. For example, bin(9) returns '1001'.\n\n\n\ncbrt \n(Function)\n\n\nThis function returns the cube-root of 'p1' which is in radians. It wraps the \njava.lang.Math.cbrt()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cbrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose cube-root should be found. Input is required to be in radians.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' is given, the function calculates the cube-root value for the same and directs the output to the output stream, OutMediationStream. For example, cbrt(17d) returns 2.5712815906582356.\n\n\n\nceil \n(Function)\n\n\nThis function returns the smallest double value, i.e., the closest to the negative infinity, that is greater than or equal to the \np1\n argument, and is equal to a mathematical integer. It wraps the \njava.lang.Math.ceil()\n method.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ceil(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose ceiling value is found.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;\n\n\n\n\n\nThis function calculates the ceiling value of the given 'inValue' and directs the result to 'OutMediationStream' output stream. For example, ceil(423.187d) returns 424.0.\n\n\n\nconv \n(Function)\n\n\nThis function converts \na\n from the \nfromBase\n base to the \ntoBase\n base.\n\n\n\nSyntax\n\n\nSTRING\n math:conv(\nSTRING\n a, \nINT\n from.base, \nINT\n to.base)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \na\n\n        \nThe value whose base should be changed. Input should be given as a 'String'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfrom.base\n\n        \nThe source base of the input parameter 'a'.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.base\n\n        \nThe target base that the input parameter 'a' should be converted into.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the input stream is given, and the base in which it currently resides in and the base to which it should be converted to is specified, the function converts it into a string in the target base and directs it to the output stream, OutMediationStream. For example, conv(\"7f\", 16, 10) returns \"127\".\n\n\n\ncopySign \n(Function)\n\n\nThis function returns a value of an input with the received \nmagnitude\n and \nsign\n of another input. It wraps the \njava.lang.Math.copySign()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:copySign(\nINT|LONG|FLOAT|DOUBLE\n magnitude, \nINT|LONG|FLOAT|DOUBLE\n sign)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmagnitude\n\n        \nThe magnitude of this parameter is used in the output attribute.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsign\n\n        \nThe sign of this parameter is used in the output attribute.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf two values are provided as 'inValue1' and 'inValue2', the function copies the magnitude and sign of the second argument into the first one and directs the result to the output stream, OutMediatonStream. For example, copySign(5.6d, -3.0d) returns -5.6.\n\n\n\ncos \n(Function)\n\n\nThis function returns the cosine of \np1\n which is in radians. It wraps the \njava.lang.Math.cos()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cos(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose cosine value should be found.The input is required to be in radians.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' is given, the function calculates the cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cos(6d) returns 0.9601702866503661.\n\n\n\ncosh \n(Function)\n\n\nThis function returns the hyperbolic cosine of \np1\n which is in radians. It wraps the \njava.lang.Math.cosh()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:cosh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose hyperbolic cosine should be found. The input is required to be in radians.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' is given, the function calculates the hyperbolic cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cosh (6d) returns 201.7156361224559.\n\n\n\ne \n(Function)\n\n\nThis function returns the \njava.lang.Math.E\n constant, which is the closest double value to e, where e is the base of the natural logarithms. \n\n\n\nSyntax\n\n\nDOUBLE\n math:e()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;\n\n\n\n\n\nThis function returns the constant, 2.7182818284590452354 which is the closest double value to e and directs the output to 'OutMediationStream' output stream.\n\n\n\nexp \n(Function)\n\n\nThis function returns the Euler's number \ne\n raised to the power of \np1\n. It wraps the \njava.lang.Math.exp()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:exp(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe power that the Euler's number e is raised to.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the inputstream holds a value, this function calculates the corresponding Euler's number 'e' and directs it to the output stream, OutMediationStream. For example, exp(10.23) returns 27722.51006805505.\n\n\n\nfloor \n(Function)\n\n\nThis function wraps the \njava.lang.Math.floor()\n function and returns the largest value, i.e., closest to the positive infinity, that is less than or equal to \np1\n, and is equal to a mathematical integer.\n\n\n\nSyntax\n\n\nDOUBLE\n math:floor(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose floor value should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;\n\n\n\n\n\nThis function calculates the floor value of the given 'inValue' input and directs the output to the 'OutMediationStream' output stream. For example, (10.23) returns 10.0.\n\n\n\ngetExponent \n(Function)\n\n\nThis function returns the unbiased exponent that is used in the representation of \np1\n. This function wraps the \njava.lang.Math.getExponent()\n function.\n\n\n\nSyntax\n\n\nINT\n math:getExponent(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of whose unbiased exponent representation should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;\n\n\n\n\n\nThis function calculates the unbiased exponent of a given input, 'inValue' and directs the result to the 'OutMediationStream' output stream. For example, getExponent(60984.1) returns 15.\n\n\n\nhex \n(Function)\n\n\nThis function wraps the \njava.lang.Double.toHexString() function. It returns a hexadecimal string representation of the input, \np1`.\n\n\n\nSyntax\n\n\nSTRING\n math:hex(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose hexadecimal value should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the input stream is provided, the function converts this into its corresponding hexadecimal format and directs the output to the output stream, OutMediationStream. For example, hex(200) returns \"c8\".\n\n\n\nisInfinite \n(Function)\n\n\nThis function wraps the \njava.lang.Float.isInfinite()\n and \njava.lang.Double.isInfinite()\n and returns \ntrue\n if \np1\n is infinitely large in magnitude and \nfalse\n if otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isInfinite(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThis is the value of the parameter that the function determines to be either infinite or finite.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;\n\n\n\n\n\nIf the value given in the 'inValue' in the input stream is of infinitely large magnitude, the function returns the value, 'true' and directs the result to the output stream, OutMediationStream'. For example, isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.\n\n\n\nisNan \n(Function)\n\n\nThis function wraps the \njava.lang.Float.isNaN()\n and \njava.lang.Double.isNaN()\n functions and returns \ntrue\n if \np1\n is NaN (Not-a-Number), and returns \nfalse\n if otherwise.\n\n\n\nSyntax\n\n\nBOOL\n math:isNan(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter which the function determines to be either NaN or a number.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue1' in the input stream has a value that is undefined, then the function considers it as an 'NaN' value and directs 'True' to the output stream, OutMediationStream. For example, isNan(java.lang.Math.log(-12d)) returns true.\n\n\n\nln \n(Function)\n\n\nThis function returns the natural logarithm (base e) of \np1\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:ln(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose natural logarithm (base e) should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the input stream is given, the function calculates its natural logarithm (base e) and directs the results to the output stream, 'OutMeditionStream'. For example, ln(11.453) returns 2.438251704415579.\n\n\n\nlog \n(Function)\n\n\nThis function returns the logarithm of the received \nnumber\n as per the given \nbase\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log(\nINT|LONG|FLOAT|DOUBLE\n number, \nINT|LONG|FLOAT|DOUBLE\n base)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nnumber\n\n        \nThe value of the parameter whose base should be changed.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbase\n\n        \nThe base value of the ouput.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the number and the base to which it has to be converted into is given in the input stream, the function calculates the number to the base specified and directs the result to the output stream, OutMediationStream. For example, log(34, 2f) returns 5.08746284125034.\n\n\n\nlog10 \n(Function)\n\n\nThis function returns the base 10 logarithm of \np1\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log10(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose base 10 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the input stream is given, the function calculates the base 10 logarithm of the same and directs the result to the output stream, OutMediatioStream. For example, log10(19.234) returns 1.2840696117100832.\n\n\n\nlog2 \n(Function)\n\n\nThis function returns the base 2 logarithm of \np1\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:log2(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose base 2 logarithm should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the input stream is given, the function calculates the base 2 logarithm of the same and returns the value to the output stream, OutMediationStream. For example log2(91d) returns 6.507794640198696.\n\n\n\nmax \n(Function)\n\n\nThis function returns the greater value of \np1\n and \np2\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:max(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nOne of the input values to be compared in order to find the larger value of the two\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nThe input value to be compared with 'p1' in order to find the larger value of the two.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf two input values 'inValue1, and 'inValue2' are given, the function compares them and directs the larger value to the output stream, OutMediationStream. For example, max(123.67d, 91) returns 123.67.\n\n\n\nmin \n(Function)\n\n\nThis function returns the smaller value of \np1\n and \np2\n.\n\n\n\nSyntax\n\n\nDOUBLE\n math:min(\nINT|LONG|FLOAT|DOUBLE\n p1, \nINT|LONG|FLOAT|DOUBLE\n p2)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nOne of the input values that are to be compared in order to find the smaller value.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \np2\n\n        \nThe input value that is to be compared with 'p1' in order to find the smaller value.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf two input values, 'inValue1' and 'inValue2' are given, the function compares them and directs the smaller value of the two to the output stream, OutMediationStream. For example, min(123.67d, 91) returns 91.\n\n\n\noct \n(Function)\n\n\nThis function converts the input parameter \np1\n to octal.\n\n\n\nSyntax\n\n\nSTRING\n math:oct(\nINT|LONG\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose octal representation should be found.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the input stream is given, this function calculates the octal value corresponding to the same and directs it to the output stream, OutMediationStream. For example, oct(99l) returns \"143\".\n\n\n\nparseDouble \n(Function)\n\n\nThis function returns the double value of the string received.\n\n\n\nSyntax\n\n\nDOUBLE\n math:parseDouble(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted into a double value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inValue' in the input stream holds a value, this function converts it into the corresponding double value and directs it to the output stream, OutMediationStream. For example, parseDouble(\"123\") returns 123.0.\n\n\n\nparseFloat \n(Function)\n\n\nThis function returns the float value of the received string.\n\n\n\nSyntax\n\n\nFLOAT\n math:parseFloat(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted into a float value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nThe function converts the input value given in 'inValue',into its corresponding float value and directs the result into the output stream, OutMediationStream. For example, parseFloat(\"123\") returns 123.0.\n\n\n\nparseInt \n(Function)\n\n\nThis function returns the integer value of the received string.\n\n\n\nSyntax\n\n\nINT\n math:parseInt(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to an integer.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nThe  function converts the 'inValue' into its corresponding integer value and directs the output to the output stream, OutMediationStream. For example, parseInt(\"123\") returns 123.\n\n\n\nparseLong \n(Function)\n\n\nThis function returns the long value of the string received.\n\n\n\nSyntax\n\n\nLONG\n math:parseLong(\nSTRING\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be converted to a long value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;\n\n\n\n\n\nThe function converts the 'inValue' to its corresponding long value and directs the result to the output stream, OutMediationStream. For example, parseLong(\"123\") returns 123.\n\n\n\npi \n(Function)\n\n\nThis function returns the \njava.lang.Math.PI\n constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter. \n\n\n\nSyntax\n\n\nDOUBLE\n math:pi()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;\n\n\n\n\n\npi() always returns 3.141592653589793.\n\n\n\npower \n(Function)\n\n\nThis function raises the given value to a given power.\n\n\n\nSyntax\n\n\nDOUBLE\n math:power(\nINT|LONG|FLOAT|DOUBLE\n value, \nINT|LONG|FLOAT|DOUBLE\n to.power)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value that should be raised to the power of 'to.power' input parameter.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nto.power\n\n        \nThe power to which the 'value' input parameter should be raised.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;\n\n\n\n\n\nThis function raises the 'inValue1' to the power of 'inValue2' and directs the output to the output stream, 'OutMediationStream. For example, (5.6d, 3.0d) returns 175.61599999999996.\n\n\n\nrand \n(Function)\n\n\nThis returns a stream of pseudo-random numbers when a sequence of calls are sent to the \nrand()\n. Optionally, it is possible to define a seed, i.e., \nrand(seed)\n using which the pseudo-random numbers are generated. These functions internally use the \njava.util.Random\n class.\n\n\n\nSyntax\n\n\nDOUBLE\n math:rand(\nINT|LONG\n seed)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nseed\n\n        \nAn optional seed value that will be used to generate the random number sequence.\n\n        \ndefaultSeed\n\n        \nINT\nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;\n\n\n\n\n\nIn the example given above, a random double value between 0 and 1 will be generated using math:rand().\n\n\n\nround \n(Function)\n\n\nThis function returns the value of the input argument rounded off to the closest integer/long value.\n\n\n\nSyntax\n\n\nINT|LONG\n math:round(\nFLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be rounded off to the closest integer/long value.\n\n        \n\n        \nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;\n\n\n\n\n\nThe function rounds off 'inValue1' to the closest int/long value and directs the output to the output stream, 'OutMediationStream'. For example, round(3252.353) returns 3252.\n\n\n\nsignum \n(Function)\n\n\nThis returns +1, 0, or -1 for the given positive, zero and negative values respectively. This function wraps the \njava.lang.Math.signum()\n function.\n\n\n\nSyntax\n\n\nINT\n math:signum(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value that should be checked to be positive, negative or zero.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;\n\n\n\n\n\nThe function evaluates the 'inValue' given to be positive, negative or zero and directs the result to the output stream, 'OutMediationStream'. For example, signum(-6.32d) returns -1.\n\n\n\nsin \n(Function)\n\n\nThis returns the sine of the value given in radians. This function wraps the \njava.lang.Math.sin()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sin(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose sine value should be found. Input is required to be in radians.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;\n\n\n\n\n\nThe function calculates the sine value of the given 'inValue' and directs the output to the output stream, 'OutMediationStream. For example, sin(6d) returns -0.27941549819892586.\n\n\n\nsinh \n(Function)\n\n\nThis returns the hyperbolic sine of the value given in radians. This function wraps the \njava.lang.Math.sinh()\n function. \n\n\n\nSyntax\n\n\nDOUBLE\n math:sinh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose hyperbolic sine value should be found. Input is required to be in radians.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;\n\n\n\n\n\nThis function calculates the hyperbolic sine value of 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sinh(6d) returns 201.71315737027922.\n\n\n\nsqrt \n(Function)\n\n\nThis function returns the square-root of the given value. It wraps the \njava.lang.Math.sqrt()\ns function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:sqrt(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose square-root value should be found.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;\n\n\n\n\n\nThe function calculates the square-root value of the 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sqrt(4d) returns 2.\n\n\n\ntan \n(Function)\n\n\nThis function returns the tan of the given value in radians. It wraps the \njava.lang.Math.tan()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tan(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose tan value should be found. Input is required to be in radians.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;\n\n\n\n\n\nThis function calculates the tan value of the 'inValue' given and directs the output to the output stream, 'OutMediationStream'. For example, tan(6d) returns -0.29100619138474915.\n\n\n\ntanh \n(Function)\n\n\nThis function returns the hyperbolic tangent of the value given in radians. It wraps the \njava.lang.Math.tanh()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:tanh(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe value of the parameter whose hyperbolic tangent value should be found. Input is required to be in radians.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;\n\n\n\n\n\nIf the 'inVaue' in the input stream is given, this function calculates the hyperbolic tangent value of the same and directs the output to 'OutMediationStream' stream. For example, tanh(6d) returns 0.9999877116507956.\n\n\n\ntoDegrees \n(Function)\n\n\nThis function converts the value given in radians to degrees. It wraps the \njava.lang.Math.toDegrees()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toDegrees(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe input value in radians that should be converted to degrees.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;\n\n\n\n\n\nThe function converts the 'inValue' in the input stream from radians to degrees and directs the output to 'OutMediationStream' output stream. For example, toDegrees(6d) returns 343.77467707849394.\n\n\n\ntoRadians \n(Function)\n\n\nThis function converts the value given in degrees to radians. It wraps the \njava.lang.Math.toRadians()\n function.\n\n\n\nSyntax\n\n\nDOUBLE\n math:toRadians(\nINT|LONG|FLOAT|DOUBLE\n p1)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \np1\n\n        \nThe input value in degrees that should be converted to radians.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;\n\n\n\n\n\nThis function converts the input, from degrees to radians and directs the result to 'OutMediationStream' output stream. For example, toRadians(6d) returns 0.10471975511965977.", 
            "title": "latest"
        }, 
        {
            "location": "/api/latest/#api-docs-v411", 
            "text": "", 
            "title": "API Docs - v4.1.1"
        }, 
        {
            "location": "/api/latest/#math", 
            "text": "", 
            "title": "Math"
        }, 
        {
            "location": "/api/latest/#percentile-aggregate-function", 
            "text": "This functions returns the pth percentile value of a given argument.  Syntax  DOUBLE  math:percentile( INT|LONG|FLOAT|DOUBLE  arg,  DOUBLE  p)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value of the parameter whose percentile should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p \n         Estimate of the percentile to be found (pth percentile) where p is any number greater than 0 or lesser than or equal to 100. \n         \n         DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (sensorId int, temperature double); \nfrom InValueStream \nselect math:percentile(temperature, 97.0) as percentile \ninsert into OutMediationStream;  This function returns the percentile value based on the argument given. For example, math:percentile(temperature, 97.0) returns the 97th percentile value of all the temperature events.", 
            "title": "percentile (Aggregate Function)"
        }, 
        {
            "location": "/api/latest/#abs-function", 
            "text": "This function returns the absolute value of the given parameter. It wraps the  java.lang.Math.abs()  function.  Syntax  DOUBLE  math:abs( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The parameter whose absolute value is found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:abs(inValue) as absValue \ninsert into OutMediationStream;  Irrespective of whether the 'invalue' in the input stream holds a value of abs(3) or abs(-3),the function returns 3 since the absolute value of both 3 and -3 is 3. The result directed to OutMediationStream stream.", 
            "title": "abs (Function)"
        }, 
        {
            "location": "/api/latest/#acos-function", 
            "text": "If -1  = p1  = 1, this function returns the arc-cosine (inverse cosine) value of p1.If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.acos() function.  Syntax  DOUBLE  math:acos( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose arc-cosine (inverse cosine) value is found. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:acos(inValue) as acosValue \ninsert into OutMediationStream;  If the 'inValue' in the input stream is given, the function calculates the arc-cosine value of it and returns the arc-cosine value to the output stream, OutMediationStream. For example, acos(0.5) returns 1.0471975511965979.", 
            "title": "acos (Function)"
        }, 
        {
            "location": "/api/latest/#asin-function", 
            "text": "If -1  = p1  = 1, this function returns the arc-sin (inverse sine) value of p1. If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.asin() function.  Syntax  DOUBLE  math:asin( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose arc-sin (inverse sine) value is found. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:asin(inValue) as asinValue \ninsert into OutMediationStream;  If the 'inValue' in the input stream is given, the function calculates the arc-sin value of it and returns the arc-sin value to the output stream, OutMediationStream. For example, asin(0.5) returns 0.5235987755982989.", 
            "title": "asin (Function)"
        }, 
        {
            "location": "/api/latest/#atan-function", 
            "text": "1. If a single  p1  is received, this function returns the arc-tangent (inverse tangent) value of  p1 .  2. If  p1  is received along with an optional  p1 , it considers them as x and y coordinates and returns the arc-tangent (inverse tangent) value.  The returned value is in radian scale. This function wraps the  java.lang.Math.atan()  function.  Syntax  DOUBLE  math:atan( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose arc-tangent (inverse tangent) is found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p1 \n         This optional parameter represents the y coordinate of the (x,y) coordinate pair. \n         0D \n         INT LONG FLOAT DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:atan(inValue1, inValue2) as convertedValue \ninsert into OutMediationStream;  If the 'inValue1' in the input stream is given, the function calculates the arc-tangent value of it and returns the arc-tangent value to the output stream, OutMediationStream. If both the 'inValue1' and 'inValue2' are given, then the function considers them to be x and y coordinates respectively and returns the calculated arc-tangent value to the output stream, OutMediationStream. For example, atan(12d, 5d) returns 1.1760052070951352.", 
            "title": "atan (Function)"
        }, 
        {
            "location": "/api/latest/#bin-function", 
            "text": "This function returns a string representation of the p1 argument, that is of either 'integer' or 'long' data type, as an unsigned integer in base 2. It wraps the  java.lang.Integer.toBinaryString  and java.lang.Long.toBinaryString` methods.  Syntax  STRING  math:bin( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value in either 'integer' or 'long', that should be converted into an unsigned integer of base 2. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:bin(inValue) as binValue \ninsert into OutMediationStream;  If the 'inValue' in the input stream is given, the function converts it into an unsigned integer in base 2 and directs the output to the output stream, OutMediationStream. For example, bin(9) returns '1001'.", 
            "title": "bin (Function)"
        }, 
        {
            "location": "/api/latest/#cbrt-function", 
            "text": "This function returns the cube-root of 'p1' which is in radians. It wraps the  java.lang.Math.cbrt()  function.  Syntax  DOUBLE  math:cbrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose cube-root should be found. Input is required to be in radians. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cbrt(inValue) as cbrtValue \ninsert into OutMediationStream;  If the 'inValue' is given, the function calculates the cube-root value for the same and directs the output to the output stream, OutMediationStream. For example, cbrt(17d) returns 2.5712815906582356.", 
            "title": "cbrt (Function)"
        }, 
        {
            "location": "/api/latest/#ceil-function", 
            "text": "This function returns the smallest double value, i.e., the closest to the negative infinity, that is greater than or equal to the  p1  argument, and is equal to a mathematical integer. It wraps the  java.lang.Math.ceil()  method.  Syntax  DOUBLE  math:ceil( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose ceiling value is found. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ceil(inValue) as ceilingValue \ninsert into OutMediationStream;  This function calculates the ceiling value of the given 'inValue' and directs the result to 'OutMediationStream' output stream. For example, ceil(423.187d) returns 424.0.", 
            "title": "ceil (Function)"
        }, 
        {
            "location": "/api/latest/#conv-function", 
            "text": "This function converts  a  from the  fromBase  base to the  toBase  base.  Syntax  STRING  math:conv( STRING  a,  INT  from.base,  INT  to.base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         a \n         The value whose base should be changed. Input should be given as a 'String'. \n         \n         STRING \n         No \n         No \n     \n     \n         from.base \n         The source base of the input parameter 'a'. \n         \n         INT \n         No \n         No \n     \n     \n         to.base \n         The target base that the input parameter 'a' should be converted into. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string,fromBase int,toBase int); \nfrom InValueStream \nselect math:conv(inValue,fromBase,toBase) as convertedValue \ninsert into OutMediationStream;  If the 'inValue' in the input stream is given, and the base in which it currently resides in and the base to which it should be converted to is specified, the function converts it into a string in the target base and directs it to the output stream, OutMediationStream. For example, conv(\"7f\", 16, 10) returns \"127\".", 
            "title": "conv (Function)"
        }, 
        {
            "location": "/api/latest/#copysign-function", 
            "text": "This function returns a value of an input with the received  magnitude  and  sign  of another input. It wraps the  java.lang.Math.copySign()  function.  Syntax  DOUBLE  math:copySign( INT|LONG|FLOAT|DOUBLE  magnitude,  INT|LONG|FLOAT|DOUBLE  sign)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         magnitude \n         The magnitude of this parameter is used in the output attribute. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         sign \n         The sign of this parameter is used in the output attribute. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:copySign(inValue1,inValue2) as copysignValue \ninsert into OutMediationStream;  If two values are provided as 'inValue1' and 'inValue2', the function copies the magnitude and sign of the second argument into the first one and directs the result to the output stream, OutMediatonStream. For example, copySign(5.6d, -3.0d) returns -5.6.", 
            "title": "copySign (Function)"
        }, 
        {
            "location": "/api/latest/#cos-function", 
            "text": "This function returns the cosine of  p1  which is in radians. It wraps the  java.lang.Math.cos()  function.  Syntax  DOUBLE  math:cos( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose cosine value should be found.The input is required to be in radians. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cos(inValue) as cosValue \ninsert into OutMediationStream;  If the 'inValue' is given, the function calculates the cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cos(6d) returns 0.9601702866503661.", 
            "title": "cos (Function)"
        }, 
        {
            "location": "/api/latest/#cosh-function", 
            "text": "This function returns the hyperbolic cosine of  p1  which is in radians. It wraps the  java.lang.Math.cosh()  function.  Syntax  DOUBLE  math:cosh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose hyperbolic cosine should be found. The input is required to be in radians. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:cosh(inValue) as cosValue \ninsert into OutMediationStream;  If the 'inValue' is given, the function calculates the hyperbolic cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cosh (6d) returns 201.7156361224559.", 
            "title": "cosh (Function)"
        }, 
        {
            "location": "/api/latest/#e-function", 
            "text": "This function returns the  java.lang.Math.E  constant, which is the closest double value to e, where e is the base of the natural logarithms.   Syntax  DOUBLE  math:e()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:e() as eValue \ninsert into OutMediationStream;  This function returns the constant, 2.7182818284590452354 which is the closest double value to e and directs the output to 'OutMediationStream' output stream.", 
            "title": "e (Function)"
        }, 
        {
            "location": "/api/latest/#exp-function", 
            "text": "This function returns the Euler's number  e  raised to the power of  p1 . It wraps the  java.lang.Math.exp()  function.  Syntax  DOUBLE  math:exp( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The power that the Euler's number e is raised to. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:exp(inValue) as expValue \ninsert into OutMediationStream;  If the 'inValue' in the inputstream holds a value, this function calculates the corresponding Euler's number 'e' and directs it to the output stream, OutMediationStream. For example, exp(10.23) returns 27722.51006805505.", 
            "title": "exp (Function)"
        }, 
        {
            "location": "/api/latest/#floor-function", 
            "text": "This function wraps the  java.lang.Math.floor()  function and returns the largest value, i.e., closest to the positive infinity, that is less than or equal to  p1 , and is equal to a mathematical integer.  Syntax  DOUBLE  math:floor( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose floor value should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:floor(inValue) as floorValue \ninsert into OutMediationStream;  This function calculates the floor value of the given 'inValue' input and directs the output to the 'OutMediationStream' output stream. For example, (10.23) returns 10.0.", 
            "title": "floor (Function)"
        }, 
        {
            "location": "/api/latest/#getexponent-function", 
            "text": "This function returns the unbiased exponent that is used in the representation of  p1 . This function wraps the  java.lang.Math.getExponent()  function.  Syntax  INT  math:getExponent( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of whose unbiased exponent representation should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:getExponent(inValue) as expValue \ninsert into OutMediationStream;  This function calculates the unbiased exponent of a given input, 'inValue' and directs the result to the 'OutMediationStream' output stream. For example, getExponent(60984.1) returns 15.", 
            "title": "getExponent (Function)"
        }, 
        {
            "location": "/api/latest/#hex-function", 
            "text": "This function wraps the  java.lang.Double.toHexString() function. It returns a hexadecimal string representation of the input,  p1`.  Syntax  STRING  math:hex( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose hexadecimal value should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue int); \nfrom InValueStream \nselect math:hex(inValue) as hexString \ninsert into OutMediationStream;  If the 'inValue' in the input stream is provided, the function converts this into its corresponding hexadecimal format and directs the output to the output stream, OutMediationStream. For example, hex(200) returns \"c8\".", 
            "title": "hex (Function)"
        }, 
        {
            "location": "/api/latest/#isinfinite-function", 
            "text": "This function wraps the  java.lang.Float.isInfinite()  and  java.lang.Double.isInfinite()  and returns  true  if  p1  is infinitely large in magnitude and  false  if otherwise.  Syntax  BOOL  math:isInfinite( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         This is the value of the parameter that the function determines to be either infinite or finite. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isInfinite(inValue1) as isInfinite \ninsert into OutMediationStream;  If the value given in the 'inValue' in the input stream is of infinitely large magnitude, the function returns the value, 'true' and directs the result to the output stream, OutMediationStream'. For example, isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.", 
            "title": "isInfinite (Function)"
        }, 
        {
            "location": "/api/latest/#isnan-function", 
            "text": "This function wraps the  java.lang.Float.isNaN()  and  java.lang.Double.isNaN()  functions and returns  true  if  p1  is NaN (Not-a-Number), and returns  false  if otherwise.  Syntax  BOOL  math:isNan( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter which the function determines to be either NaN or a number. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:isNan(inValue1) as isNaN \ninsert into OutMediationStream;  If the 'inValue1' in the input stream has a value that is undefined, then the function considers it as an 'NaN' value and directs 'True' to the output stream, OutMediationStream. For example, isNan(java.lang.Math.log(-12d)) returns true.", 
            "title": "isNan (Function)"
        }, 
        {
            "location": "/api/latest/#ln-function", 
            "text": "This function returns the natural logarithm (base e) of  p1 .  Syntax  DOUBLE  math:ln( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose natural logarithm (base e) should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:ln(inValue) as lnValue \ninsert into OutMediationStream;  If the 'inValue' in the input stream is given, the function calculates its natural logarithm (base e) and directs the results to the output stream, 'OutMeditionStream'. For example, ln(11.453) returns 2.438251704415579.", 
            "title": "ln (Function)"
        }, 
        {
            "location": "/api/latest/#log-function", 
            "text": "This function returns the logarithm of the received  number  as per the given  base .  Syntax  DOUBLE  math:log( INT|LONG|FLOAT|DOUBLE  number,  INT|LONG|FLOAT|DOUBLE  base)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         number \n         The value of the parameter whose base should be changed. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         base \n         The base value of the ouput. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (number double, base double); \nfrom InValueStream \nselect math:log(number, base) as logValue \ninsert into OutMediationStream;  If the number and the base to which it has to be converted into is given in the input stream, the function calculates the number to the base specified and directs the result to the output stream, OutMediationStream. For example, log(34, 2f) returns 5.08746284125034.", 
            "title": "log (Function)"
        }, 
        {
            "location": "/api/latest/#log10-function", 
            "text": "This function returns the base 10 logarithm of  p1 .  Syntax  DOUBLE  math:log10( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose base 10 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log10(inValue) as lnValue \ninsert into OutMediationStream;  If the 'inValue' in the input stream is given, the function calculates the base 10 logarithm of the same and directs the result to the output stream, OutMediatioStream. For example, log10(19.234) returns 1.2840696117100832.", 
            "title": "log10 (Function)"
        }, 
        {
            "location": "/api/latest/#log2-function", 
            "text": "This function returns the base 2 logarithm of  p1 .  Syntax  DOUBLE  math:log2( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose base 2 logarithm should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:log2(inValue) as lnValue \ninsert into OutMediationStream;  If the 'inValue' in the input stream is given, the function calculates the base 2 logarithm of the same and returns the value to the output stream, OutMediationStream. For example log2(91d) returns 6.507794640198696.", 
            "title": "log2 (Function)"
        }, 
        {
            "location": "/api/latest/#max-function", 
            "text": "This function returns the greater value of  p1  and  p2 .  Syntax  DOUBLE  math:max( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         One of the input values to be compared in order to find the larger value of the two \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         The input value to be compared with 'p1' in order to find the larger value of the two. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:max(inValue1,inValue2) as maxValue \ninsert into OutMediationStream;  If two input values 'inValue1, and 'inValue2' are given, the function compares them and directs the larger value to the output stream, OutMediationStream. For example, max(123.67d, 91) returns 123.67.", 
            "title": "max (Function)"
        }, 
        {
            "location": "/api/latest/#min-function", 
            "text": "This function returns the smaller value of  p1  and  p2 .  Syntax  DOUBLE  math:min( INT|LONG|FLOAT|DOUBLE  p1,  INT|LONG|FLOAT|DOUBLE  p2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         One of the input values that are to be compared in order to find the smaller value. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         p2 \n         The input value that is to be compared with 'p1' in order to find the smaller value. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double,inValue2 int); \nfrom InValueStream \nselect math:min(inValue1,inValue2) as minValue \ninsert into OutMediationStream;  If two input values, 'inValue1' and 'inValue2' are given, the function compares them and directs the smaller value of the two to the output stream, OutMediationStream. For example, min(123.67d, 91) returns 91.", 
            "title": "min (Function)"
        }, 
        {
            "location": "/api/latest/#oct-function", 
            "text": "This function converts the input parameter  p1  to octal.  Syntax  STRING  math:oct( INT|LONG  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose octal representation should be found. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue long); \nfrom InValueStream \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  If the 'inValue' in the input stream is given, this function calculates the octal value corresponding to the same and directs it to the output stream, OutMediationStream. For example, oct(99l) returns \"143\".", 
            "title": "oct (Function)"
        }, 
        {
            "location": "/api/latest/#parsedouble-function", 
            "text": "This function returns the double value of the string received.  Syntax  DOUBLE  math:parseDouble( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted into a double value. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseDouble(inValue) as output \ninsert into OutMediationStream;  If the 'inValue' in the input stream holds a value, this function converts it into the corresponding double value and directs it to the output stream, OutMediationStream. For example, parseDouble(\"123\") returns 123.0.", 
            "title": "parseDouble (Function)"
        }, 
        {
            "location": "/api/latest/#parsefloat-function", 
            "text": "This function returns the float value of the received string.  Syntax  FLOAT  math:parseFloat( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted into a float value. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseFloat(inValue) as output \ninsert into OutMediationStream;  The function converts the input value given in 'inValue',into its corresponding float value and directs the result into the output stream, OutMediationStream. For example, parseFloat(\"123\") returns 123.0.", 
            "title": "parseFloat (Function)"
        }, 
        {
            "location": "/api/latest/#parseint-function", 
            "text": "This function returns the integer value of the received string.  Syntax  INT  math:parseInt( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to an integer. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseInt(inValue) as output \ninsert into OutMediationStream;  The  function converts the 'inValue' into its corresponding integer value and directs the output to the output stream, OutMediationStream. For example, parseInt(\"123\") returns 123.", 
            "title": "parseInt (Function)"
        }, 
        {
            "location": "/api/latest/#parselong-function", 
            "text": "This function returns the long value of the string received.  Syntax  LONG  math:parseLong( STRING  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be converted to a long value. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue string); \nfrom InValueStream \nselect math:parseLong(inValue) as output \ninsert into OutMediationStream;  The function converts the 'inValue' to its corresponding long value and directs the result to the output stream, OutMediationStream. For example, parseLong(\"123\") returns 123.", 
            "title": "parseLong (Function)"
        }, 
        {
            "location": "/api/latest/#pi-function", 
            "text": "This function returns the  java.lang.Math.PI  constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter.   Syntax  DOUBLE  math:pi()  Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:pi() as piValue \ninsert into OutMediationStream;  pi() always returns 3.141592653589793.", 
            "title": "pi (Function)"
        }, 
        {
            "location": "/api/latest/#power-function", 
            "text": "This function raises the given value to a given power.  Syntax  DOUBLE  math:power( INT|LONG|FLOAT|DOUBLE  value,  INT|LONG|FLOAT|DOUBLE  to.power)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value that should be raised to the power of 'to.power' input parameter. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         to.power \n         The power to which the 'value' input parameter should be raised. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue1 double, inValue2 double); \nfrom InValueStream \nselect math:power(inValue1,inValue2) as powerValue \ninsert into OutMediationStream;  This function raises the 'inValue1' to the power of 'inValue2' and directs the output to the output stream, 'OutMediationStream. For example, (5.6d, 3.0d) returns 175.61599999999996.", 
            "title": "power (Function)"
        }, 
        {
            "location": "/api/latest/#rand-function", 
            "text": "This returns a stream of pseudo-random numbers when a sequence of calls are sent to the  rand() . Optionally, it is possible to define a seed, i.e.,  rand(seed)  using which the pseudo-random numbers are generated. These functions internally use the  java.util.Random  class.  Syntax  DOUBLE  math:rand( INT|LONG  seed)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         seed \n         An optional seed value that will be used to generate the random number sequence. \n         defaultSeed \n         INT LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (symbol string, price long, volume long); \nfrom InValueStream select symbol, math:rand() as randNumber \nselect math:oct(inValue) as octValue \ninsert into OutMediationStream;  In the example given above, a random double value between 0 and 1 will be generated using math:rand().", 
            "title": "rand (Function)"
        }, 
        {
            "location": "/api/latest/#round-function", 
            "text": "This function returns the value of the input argument rounded off to the closest integer/long value.  Syntax  INT|LONG  math:round( FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be rounded off to the closest integer/long value. \n         \n         FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:round(inValue) as roundValue \ninsert into OutMediationStream;  The function rounds off 'inValue1' to the closest int/long value and directs the output to the output stream, 'OutMediationStream'. For example, round(3252.353) returns 3252.", 
            "title": "round (Function)"
        }, 
        {
            "location": "/api/latest/#signum-function", 
            "text": "This returns +1, 0, or -1 for the given positive, zero and negative values respectively. This function wraps the  java.lang.Math.signum()  function.  Syntax  INT  math:signum( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value that should be checked to be positive, negative or zero. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:signum(inValue) as sign \ninsert into OutMediationStream;  The function evaluates the 'inValue' given to be positive, negative or zero and directs the result to the output stream, 'OutMediationStream'. For example, signum(-6.32d) returns -1.", 
            "title": "signum (Function)"
        }, 
        {
            "location": "/api/latest/#sin-function", 
            "text": "This returns the sine of the value given in radians. This function wraps the  java.lang.Math.sin()  function.  Syntax  DOUBLE  math:sin( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose sine value should be found. Input is required to be in radians. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sin(inValue) as sinValue \ninsert into OutMediationStream;  The function calculates the sine value of the given 'inValue' and directs the output to the output stream, 'OutMediationStream. For example, sin(6d) returns -0.27941549819892586.", 
            "title": "sin (Function)"
        }, 
        {
            "location": "/api/latest/#sinh-function", 
            "text": "This returns the hyperbolic sine of the value given in radians. This function wraps the  java.lang.Math.sinh()  function.   Syntax  DOUBLE  math:sinh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose hyperbolic sine value should be found. Input is required to be in radians. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sinh(inValue) as sinhValue \ninsert into OutMediationStream;  This function calculates the hyperbolic sine value of 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sinh(6d) returns 201.71315737027922.", 
            "title": "sinh (Function)"
        }, 
        {
            "location": "/api/latest/#sqrt-function", 
            "text": "This function returns the square-root of the given value. It wraps the  java.lang.Math.sqrt() s function.  Syntax  DOUBLE  math:sqrt( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose square-root value should be found. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:sqrt(inValue) as sqrtValue \ninsert into OutMediationStream;  The function calculates the square-root value of the 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sqrt(4d) returns 2.", 
            "title": "sqrt (Function)"
        }, 
        {
            "location": "/api/latest/#tan-function", 
            "text": "This function returns the tan of the given value in radians. It wraps the  java.lang.Math.tan()  function.  Syntax  DOUBLE  math:tan( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose tan value should be found. Input is required to be in radians. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tan(inValue) as tanValue \ninsert into OutMediationStream;  This function calculates the tan value of the 'inValue' given and directs the output to the output stream, 'OutMediationStream'. For example, tan(6d) returns -0.29100619138474915.", 
            "title": "tan (Function)"
        }, 
        {
            "location": "/api/latest/#tanh-function", 
            "text": "This function returns the hyperbolic tangent of the value given in radians. It wraps the  java.lang.Math.tanh()  function.  Syntax  DOUBLE  math:tanh( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The value of the parameter whose hyperbolic tangent value should be found. Input is required to be in radians. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:tanh(inValue) as tanhValue \ninsert into OutMediationStream;  If the 'inVaue' in the input stream is given, this function calculates the hyperbolic tangent value of the same and directs the output to 'OutMediationStream' stream. For example, tanh(6d) returns 0.9999877116507956.", 
            "title": "tanh (Function)"
        }, 
        {
            "location": "/api/latest/#todegrees-function", 
            "text": "This function converts the value given in radians to degrees. It wraps the  java.lang.Math.toDegrees()  function.  Syntax  DOUBLE  math:toDegrees( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The input value in radians that should be converted to degrees. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toDegrees(inValue) as degreesValue \ninsert into OutMediationStream;  The function converts the 'inValue' in the input stream from radians to degrees and directs the output to 'OutMediationStream' output stream. For example, toDegrees(6d) returns 343.77467707849394.", 
            "title": "toDegrees (Function)"
        }, 
        {
            "location": "/api/latest/#toradians-function", 
            "text": "This function converts the value given in degrees to radians. It wraps the  java.lang.Math.toRadians()  function.  Syntax  DOUBLE  math:toRadians( INT|LONG|FLOAT|DOUBLE  p1)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         p1 \n         The input value in degrees that should be converted to radians. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n       Examples  EXAMPLE 1  define stream InValueStream (inValue double); \nfrom InValueStream \nselect math:toRadians(inValue) as radiansValue \ninsert into OutMediationStream;  This function converts the input, from degrees to radians and directs the result to 'OutMediationStream' output stream. For example, toRadians(6d) returns 0.10471975511965977.", 
            "title": "toRadians (Function)"
        }, 
        {
            "location": "/license/", 
            "text": "Copyright (c) 2017 WSO2 Inc. (\nhttp://www.wso2.org\n) All Rights Reserved.\n\n\nWSO2 Inc. licenses this file to you under the Apache License,\nVersion 2.0 (the \"License\"); you may not use this file except\nin compliance with the License.\nYou may obtain a copy of the License at\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\n\n-------------------------------------------------------------------------\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \nLicense\n shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \nLicensor\n shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \nLegal Entity\n shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \ncontrol\n means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \nYou\n (or \nYour\n) shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \nSource\n form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \nObject\n form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \nWork\n shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \nDerivative Works\n shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \nContribution\n shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \nsubmitted\n\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \nNot a Contribution.\n\n\n   \nContributor\n shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \nNOTICE\n text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \nAS IS\n BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS", 
            "title": "License"
        }
    ]
}